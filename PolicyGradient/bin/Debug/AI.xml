<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AI</name>
    </assembly>
    <members>
        <member name="T:AI.AdditionalFunctions.MathFunc">
            <summary>
            Математические функции для векторов и матриц
            </summary>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.Unwrap(AI.Vector,System.Double)">
            <summary>
            Разворачивание арктангенса
            </summary>
            <param name="data">Данные с ф-ии atan</param>
            <param name="diffMax">Максимальный разрыв</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.PeakDel(AI.Vector)">
            <summary>
            Устранение выбросов на одном отсчете сигнала(пиков)
            </summary>
            <param name="data">Сигнал</param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.MinusOnePow(System.Int32)">
            <summary>
            Возведение -1 в степень
            </summary>
            <param name="pow">Степень</param>
            <returns></returns>
        </member>
        <member name="P:AI.AdditionalFunctions.MathFunc.SqrtPi">
            <summary>
            Квадратный корень из ПИ
            </summary>
        </member>
        <member name="P:AI.AdditionalFunctions.MathFunc.Sqrt2">
            <summary>
            Квадратный корень из 2-х
            </summary>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.Rad(System.Double,System.Int32)">
            <summary>
            Функции Радемахера
            </summary>
            <param name="x">Параметр</param>
            <param name="num">Номер функции</param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.Rad(AI.Vector,System.Int32)">
            <summary>
            Функции Радемахера
            </summary>
            <param name="x">Вектор параметров</param>
            <param name="num">Номер функции</param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.Walsh(System.Double,System.Int32)">
            <summary>
            Функции Уолша
            </summary>
            <param name="x">Параметр</param>
            <param name="num">Номер функции</param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.Walsh(AI.Vector,System.Int32)">
            <summary>
            Функции Радемахера
            </summary>
            <param name="x">Вектор параметров</param>
            <param name="num">Номер функции</param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.erf(System.Double)">
            <summary>
            Функция ошибки
            </summary>
            <param name="x">Аргумент</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.erf(AI.Vector)">
            <summary>
            Функция ошибок
            </summary>
            <param name="Inp">Входной вектор</param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.GenerateTheSequence(System.Double,System.Double,System.Double)">
            <summary>
            Генерирование последовательности
            </summary>
            <param name="began">Начальное значение</param>
            <param name="step">Шаг</param>
            <param name="end">Конечное значение</param>
            <returns>Возвращает последовательность</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.GenerateTheSequence(System.Double,System.Double)">
            <summary>
            Генерирование последовательности
            </summary>
            <param name="began">Начальное значение</param>
            <param name="end">Конечное значение</param>
            <returns>Возвращает послеовательность с шагом 1</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.GradToRad(System.Double)">
            <summary>
            Перевод градусов в радианы
            </summary>
            <param name="grad">значение в градусах</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.GradToRad(AI.Vector)">
            <summary>
            Перевод градусов в радианы
            </summary>
            <param name="Inp">значения в градусах</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.RadToGrad(System.Double)">
            <summary>
            Перевод радиан в градусы
            </summary>
            <param name="rad">значение в радианах</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.RadToGrad(AI.Vector)">
            <summary>
            Перевод радиан в градусы
            </summary>
            <param name="Inp">значение в радианах</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.factorial(System.Double)">
            <summary>
            Вычисление факториала числа
            </summary>
            <param name="x">Число</param>
            <returns>Факториал</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.factorial(AI.Vector)">
            <summary>
            Вычисление факториала векторов поэлементно
            </summary>
            <param name="Inp">Входной вектор</param>
            <returns>Факториал</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sin(AI.Vector)">
            <summary>
            Вычисление синусов
            </summary>
            <param name="Inp">Вектор углов(в радианах)</param>
            <returns>Вектор синусов</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.round(AI.Vector,System.Int32)">
            <summary>
            Округление
            </summary>
            <param name="Inp">Вектор входа</param>
            <param name="digits">до какого знака</param>
            <returns>Вектор выхода</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.cos(AI.Vector)">
            <summary>
            Вычисление косинусов
            </summary>
            <param name="Inp">Вектор углов(в радианах)</param>
            <returns>Вектор косинусов</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.tg(AI.Vector)">
            <summary>
            Вычисление тангенсов
            </summary>
            <param name="Inp">Вектор углов(в радианах)</param>
            <returns>Вектор тангенсов</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.ctg(AI.Vector)">
            <summary>
            Вычисление котангенсов
            </summary>
            <param name="Inp">Вектор углов(в радианах)</param>
            <returns>Вектор котангенсов</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.arcsin(AI.Vector)">
            <summary>
            Вычисление арксинусов
            </summary>
            <param name="Inp">Вектор синусов</param>
            <returns>Вектор углов(в радианах)</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.arccos(AI.Vector)">
            <summary>
            Вычисление арккосинусов
            </summary>
            <param name="Inp">Вектор косинусов</param>
            <returns>Вектор углов(в радианах)</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.arctg(AI.Vector)">
            <summary>
            Вычисление арктангенсов
            </summary>
            <param name="Inp">Вектор тангенсов</param>
            <returns>Вектор углов(в радианах)</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.lg(AI.Vector)">
            <summary>
            Дсятичный логарифм
            </summary>
            <param name="Inp">Подлогарифмическое число</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.ln(AI.Vector)">
            <summary>
            Логарифм по основанию "e"
            </summary>
            <param name="Inp">Подлогарифмическое число</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sec(AI.Vector)">
            <summary>
            Секанс угла
            </summary>
            <param name="Inp">углы</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.cosec(AI.Vector)">
            <summary>
            Косеканс угла
            </summary>
            <param name="Inp">углы</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.exp(AI.Vector)">
            <summary>
            Экспонента e^x
            </summary>
            <param name="Inp">показатели степени</param>
            <returns>e^Inp - поэлементно</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.tanh(AI.Vector)">
            <summary>
            Гиперболический тангенс
            </summary>
            <param name="Inp">углы</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sign(AI.Vector)">
            <summary>
            Определение знака
            </summary>
            <param name="Inp">Входной вектор</param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sqrt(AI.Vector)">
            <summary>
            Квадратный корень
            </summary>
            <param name="Inp">числа</param>		
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sin(AI.Matrix)">
            <summary>
            Вычисление синуса
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.exp(AI.Matrix)">
            <summary>
            e^x
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.tanh(AI.Matrix)">
            <summary>
            Гиперболический тангенс
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.cos(AI.Matrix)">
            <summary>
            Косинус
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.tg(AI.Matrix)">
            <summary>
            Тангенс
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.ctg(AI.Matrix)">
            <summary>
            Котангенс
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.arcsin(AI.Matrix)">
            <summary>
            Арксинус
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.arccos(AI.Matrix)">
            <summary>
            Арккосинус
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.arctg(AI.Matrix)">
            <summary>
            Арктангенс
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.abs(AI.Matrix)">
            <summary>
            Модуль
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sqrt(AI.Matrix)">
            <summary>
            Квадратный корень
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.lg(AI.Matrix)">
            <summary>
            Десятичный логарифм
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.ln(AI.Matrix)">
            <summary>
            Логарифм по основанию E
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sec(AI.Matrix)">
            <summary>
            Секонс
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.cosec(AI.Matrix)">
            <summary>
            Косеконс
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sin(AI.ComplexVector)">
            <summary>
            Синус
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.exp(AI.ComplexVector)">
            <summary>
            e^x
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.tanh(AI.ComplexVector)">
            <summary>
            Гиперболический тангенс
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sqrt(AI.ComplexVector)">
            <summary>
            Квадратный корень
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.cos(AI.ComplexVector)">
            <summary>
            Косинус
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.lg(AI.ComplexVector)">
            <summary>
            Логарифм по основанию 10
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.ln(AI.ComplexVector)">
            <summary>
            Логарифм по основанию e
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.tg(AI.ComplexVector)">
            <summary>
            Тангенс
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.ctg(AI.ComplexVector)">
            <summary>
            Котангенс
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.arcsin(AI.ComplexVector)">
            <summary>
            Арксинус
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.arccos(AI.ComplexVector)">
            <summary>
            Арккосинус
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.arctg(AI.ComplexVector)">
            <summary>
            Арктангенс
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sec(AI.ComplexVector)">
            <summary>
            Секонс
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.cosec(AI.ComplexVector)">
            <summary>
            Косеконс
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.abs(AI.Vector)">
            <summary>
            Модуль
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.abs(AI.ComplexVector)">
            <summary>
            Модуль
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="T:AI.AdditionalFunctions.NeuroFunc">
            <summary>
            Функции активации нейронов
            </summary>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Sigmoid(AI.Vector,System.Double)">
            <summary>
            Сигмоидальная однополярная активационная ф-я
            </summary>
            <param name="Inp">Входной вектор</param>
            <param name="betta">Угол наклона</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Sigmoid(System.Double,System.Double)">
            <summary>
            Сигмоидальная однополярная активационная ф-я
            </summary>
            <param name="x">Входное значение</param>
            <param name="betta">Угол наклона</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.InverseSigmoid(System.Double,System.Double)">
            <summary>
            Сигмоидальная однополярная активационная ф-я
            </summary>
            <param name="x">Входное значение</param>
            <param name="betta">Угол наклона</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.InverseSigmoid(AI.Vector,System.Double)">
            <summary>
            Сигмоидальная однополярная активационная ф-я
            </summary>
            <param name="x">Входное значение</param>
            <param name="betta">Угол наклона</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.SigmoidBiplyar(AI.Vector,System.Double)">
            <summary>
            Сигмоидальная биполярная активационная ф-я
            </summary>
            <param name="Inp">Входной вектор</param>
            <param name="betta">Угол наклона</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Threshold(AI.Vector,System.Double)">
            <summary>
            Пороговая активационная ф-я
            </summary>
            <param name="Inp">Входной вектор</param>
            <param name="threshold">Порог</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Threshold(AI.Vector,System.Double,System.Double)">
            <summary>
            Ограничение сверху и снизу
            </summary>
            <param name="Inp">Входной вектор</param>
            <param name="thresholdUp"></param>
            <param name="thresholdDoun"></param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Relu(AI.Vector,System.Double)">
            <summary>
            Релу
            </summary>
            <param name="Inp"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Relu(AI.Vector,System.Double,System.Double)">
            <summary>
            Активация Релу
            </summary>
            <param name="Inp">Вход</param>
            <param name="thresholdUp">Верхний порог</param>
            <param name="thresholdDoun">Нижний порог</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Relu(AI.Matrix,System.Double,System.Double)">
            <summary>
            Активация Релу
            </summary>
            <param name="Inp">Вход</param>
            <param name="thresholdUp">Верхний порог</param>
            <param name="thresholdDoun">Нижний порог</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Sigmoid(AI.Matrix,System.Double)">
            <summary>
            Сигмоида
            </summary>
            <param name="Inp"></param>
            <param name="betta"></param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.SigmoidBiplyar(AI.Matrix,System.Double)">
            <summary>
            Сигмоида
            </summary>
            <param name="Inp"></param>
            <param name="betta"></param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Threshold(AI.Matrix,System.Double)">
            <summary>
            Сигмоида
            </summary>
            <param name="Inp"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Sigmoid(AI.Tensor,System.Double)">
            <summary>
            Сигмоида
            </summary>
            <param name="tensor">Тензор входа</param>
            <param name="betta">Коэфициент наклона</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Log10(AI.Tensor)">
            <summary>
            Логарифм по основанию 10
            </summary>
            <param name="tensor">Тензор входа</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Relu(AI.Matrix,System.Double)">
            <summary>
            Активация Релу
            </summary>
            <param name="Inp">Вход</param>
            <param name="threshold">Нижний порог</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Relu(AI.Vector[],System.Double)">
            <summary>
            Активация Релу
            </summary>
            <param name="Inp">Вход</param>
            <param name="threshold">Нижний порог</param>
        </member>
        <member name="T:AI.AdditionalFunctions.DistributionFunc">
            <summary>
            Функции распределения случайной величины
            </summary>
        </member>
        <member name="M:AI.AdditionalFunctions.DistributionFunc.Gauss(AI.Vector,System.Double,System.Double)">
            <summary>
            Функция распределения по нормальному закону 
            </summary>
            <param name="Inp">Входной вектор</param>
            <param name="m">Мат. ожидание</param>
            <param name="sko">СКО</param>
        </member>
        <member name="M:AI.AdditionalFunctions.DistributionFunc.Gauss(AI.Matrix,System.Double,System.Double)">
            <summary>
            Ф-я Гаусса
            </summary>
            <param name="inp"></param>
            <param name="m"></param>
            <param name="std"></param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.DistributionFunc.GaussRect(System.Int32,System.Int32,System.Double)">
            <summary>
            Фильтр гаусса
            </summary>
            <param name="h">Высота фильтра</param>
            <param name="w">Ширина</param>
            <param name="std">СКО</param>
            <returns>Фильтр Гаусса</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.DistributionFunc.Gauss(System.Double,System.Double,System.Double)">
            <summary>
            Функция вероятность принадлежности
            </summary>
            <param name="Inp">Входное значение</param>
            <param name="m">Мат. ожидание</param>
            <param name="sko">СКО</param>
        </member>
        <member name="M:AI.AdditionalFunctions.DistributionFunc.Gauss1(AI.Matrix,System.Double,System.Double)">
            <summary>
            Функция Гаусса при x=m -> G(x) = 1
            </summary>
            <param name="inp"></param>
            <param name="m"></param>
            <param name="sko"></param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.DistributionFunc.GaussNorm1(System.Double,System.Double,System.Double)">
            <summary>
            Функция вероятность принадлежности при inp = m, out = 1
            </summary>
            <param name="Inp">Входное значение</param>
            <param name="m">Мат. ожидание</param>
            <param name="std">СКО</param>
        </member>
        <member name="M:AI.AdditionalFunctions.DistributionFunc.GaussNorm1(AI.Vector,System.Double,System.Double)">
            <summary>
            Функция вероятность принадлежности при inp = m, out = 1
            </summary>
            <param name="Inp">Входной вектор</param>
            <param name="m">Мат. ожидание</param>
            <param name="std">СКО</param>
        </member>
        <member name="M:AI.AdditionalFunctions.DistributionFunc.Puasson(AI.Vector,System.Double)">
            <summary>
            Функция распределения Пуасона 
            </summary>
            <param name="Inp">Входной вектор</param>
            <param name="m">Мат. ожидание от 0 до +inf</param>
        </member>
        <member name="T:AI.AdditionalFunctions.GeomFunc">
            <summary>
            Аналитическая геометрия
            </summary>
        </member>
        <member name="M:AI.AdditionalFunctions.GeomFunc.Cos(AI.Vector,AI.Vector)">
            <summary>
            Косинус угла между двумя векторами
            </summary>
            <param name="vector1">Первый вектор</param>
            <param name="vector2">Второй вектор</param>
        </member>
        <member name="M:AI.AdditionalFunctions.GeomFunc.NormVect(AI.Vector)">
            <summary>
            Вычисляет эвклидовую норму вектора 
            </summary>
            <param name="vector">Входной вектор</param>
        </member>
        <member name="M:AI.AdditionalFunctions.GeomFunc.ScalarProduct(AI.Vector,AI.Vector)">
            <summary>
            Скалярное произведение 2-х векторов
            </summary>
            <param name="vector">Первый вектор</param>
            <param name="vector2">Второй вектор</param>
            <returns>Возвращает скалярное произведение</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.GeomFunc.ProectionAtoB(AI.Vector,AI.Vector)">
            <summary>
            Проекция вектора А на вектор B
            </summary>
            <param name="A">Вектор А</param>
            <param name="B">Вуктор В</param>
            <returns>Результат проецирования</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.GeomFunc.AngleVect(AI.Vector,AI.Vector)">
            <summary>
            Угол между векторами
            </summary>
            <param name="vector">Первый вектор</param>
            <param name="vector2">Второй вектор</param>
            <returns>Возвращает угол в радианах</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.GeomFunc.VectorFromAToB(AI.Vector,AI.Vector)">
            <summary>
            Вычисляет вектор соединяющий точку А с точкой Б
            </summary>
            <param name="pointA">координаты точки А</param>
            <param name="pointB">координаты точки Б</param>
            <returns>Возвращает компаненты вектора</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.GeomFunc.DistanceFromAToB(AI.Vector,AI.Vector)">
            <summary>
            Вычисляет растояние от точки А до Б
            </summary>
            <param name="pointA">координаты точки А</param>
            <param name="pointB">координаты точки Б</param>
            <returns>Возвращает растояние</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.GeomFunc.VectorRotate(AI.Vector,System.Double,System.Int32,System.Int32)">
            <summary>
            Поворот вектора на заданные углы
            </summary>
        </member>
        <member name="T:AI.Charts.ChartData">
            <summary>
            Данные графика
            </summary>
        </member>
        <member name="P:AI.Charts.ChartData.ChartName">
            <summary>
            Имя графика
            </summary>
        </member>
        <member name="M:AI.Charts.ChartData.SempleADD(AI.Vector,AI.Vector,AI.Charts.Description,System.Drawing.Color,AI.Charts.ChartType)">
            <summary>
            Добавление графика
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="description"></param>
            <param name="color"></param>
            <param name="chartType"></param>
        </member>
        <member name="T:AI.Charts.ChartDataSemple">
            <summary>
            Описание одной части графика
            </summary>
        </member>
        <member name="P:AI.Charts.ChartDataSemple.DescriptionData">
            <summary>
            Описание (метаданные)
            </summary>
        </member>
        <member name="F:AI.Charts.ChartDataSemple.DataX">
            <summary>
            Данные по оси X
            </summary>
        </member>
        <member name="F:AI.Charts.ChartDataSemple.DataY">
            <summary>
            Данные по Y
            </summary>
        </member>
        <member name="P:AI.Charts.ChartDataSemple.ColorChart">
            <summary>
            Цвет графика
            </summary>
        </member>
        <member name="P:AI.Charts.ChartDataSemple.ChartType">
            <summary>
            Тип графика
            </summary>
        </member>
        <member name="M:AI.Charts.ChartDataSemple.#ctor(AI.Vector,AI.Vector,AI.Charts.Description,System.Drawing.Color,AI.Charts.ChartType)">
            <summary>
            Данные графика
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="description"></param>
            <param name="color"></param>
            <param name="chartType"></param>
        </member>
        <member name="T:AI.Charts.ChartType">
            <summary>
            Доступные типы графиков
            </summary>
        </member>
        <member name="F:AI.Charts.ChartType.Plot">
            <summary>
            График в виде линии 
            </summary>
        </member>
        <member name="F:AI.Charts.ChartType.Bar">
            <summary>
            График в виде столбцов(гистограмма)
            </summary>
        </member>
        <member name="F:AI.Charts.ChartType.Scatter">
            <summary>
            Скаттерограмма, график в виде точек
            </summary>
        </member>
        <member name="F:AI.Charts.ChartType.Spline">
            <summary>
            Сплайновая кривая 
            </summary>
        </member>
        <member name="T:AI.Charts.Control.ChartVisual">
            <summary>
            Визуально представление данных (Графики)
            </summary>
        </member>
        <member name="P:AI.Charts.Control.ChartVisual.ChartName">
            <summary>
            Имя графика
            </summary>
        </member>
        <member name="P:AI.Charts.Control.ChartVisual.LabelX">
            <summary>
            Имя оси X
            </summary>
        </member>
        <member name="P:AI.Charts.Control.ChartVisual.LabelY">
            <summary>
            Имя оси Y
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.#ctor">
            <summary>
            Графики
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.VisualData(AI.Charts.ChartData)">
            <summary>
            Визуализация графиков
            </summary>
            <param name="chartDatas">Данные графиков</param>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddPlot(AI.Vector,AI.Vector,System.String,System.Drawing.Color,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddRadialPlot(AI.Vector,AI.Vector,System.String,System.Drawing.Color,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddRadialDegPlot(AI.Vector,AI.Vector,System.String,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddPlot(System.String,System.Drawing.Color,System.Int32,System.Boolean)">
            <summary>
            Создание графика без данных
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddData(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Динамическое добавление данных
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddBar(AI.Vector,AI.Vector,System.String,System.Drawing.Color)">
            <summary>
            Создание гистограммы с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AddScatter(AI.Vector,AI.Vector,System.String,System.Drawing.Color)">
            <summary>
            Создание гистограммы с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.ChartImg">
            <summary>
             Отрисовка графика
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.Clear">
            <summary>
            Очистка графика
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.AutoScale">
            <summary>
            Масштабирование по умолчанию
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.chart1_Click(System.Object,System.EventArgs)">
            <summary>
            Клик по графику
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.chart1_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Мышь опущена
            </summary>
        </member>
        <member name="F:AI.Charts.Control.ChartVisual.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the control.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AI.Charts.Control.ChartVisual.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="T:AI.Charts.Control.HeatMapControl">
            <summary>
            Тепловая карта
            </summary>
        </member>
        <member name="M:AI.Charts.Control.HeatMapControl.#ctor">
            <summary>
            Тепловая карта
            </summary>
        </member>
        <member name="M:AI.Charts.Control.HeatMapControl.NewGrad">
            <summary>
            Задает градиент тепловой карты
            </summary>
        </member>
        <member name="M:AI.Charts.Control.HeatMapControl.GetColor(System.Double)">
            <summary>
            Получение цвета из значения 
            </summary>
            <param name="value">значение</param>
            <returns></returns>
        </member>
        <member name="M:AI.Charts.Control.HeatMapControl.HeatMap_SizeChanged(System.Object,System.EventArgs)">
            <summary>
            Удержание позиций меток
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AI.Charts.Control.HeatMapControl.ResizeImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Преобразование изображения
            Источник: https://stackoverflow.com/questions/1922040/how-to-resize-an-image-c-sharp/24199315
            </summary>
            <param name="image"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Charts.Control.HeatMapControl.CalculateHeatMap(AI.Matrix)">
            <summary>
            Расчет тепловой карты для матрицы
            </summary>
            <param name="matrix">Матрица</param>
        </member>
        <member name="M:AI.Charts.Control.HeatMapControl.CalculateHeatMap(System.Double[0:,0:])">
            <summary>
            Расчет тепловой карты для двумерного массива
            </summary>
            <param name="data">Массив</param>
        </member>
        <member name="F:AI.Charts.Control.HeatMapControl.components">
            <summary> 
            Обязательная переменная конструктора.
            </summary>
        </member>
        <member name="M:AI.Charts.Control.HeatMapControl.Dispose(System.Boolean)">
            <summary> 
            Освободить все используемые ресурсы.
            </summary>
            <param name="disposing">истинно, если управляемый ресурс должен быть удален; иначе ложно.</param>
        </member>
        <member name="M:AI.Charts.Control.HeatMapControl.InitializeComponent">
            <summary> 
            Требуемый метод для поддержки конструктора — не изменяйте 
            содержимое этого метода с помощью редактора кода.
            </summary>
        </member>
        <member name="T:AI.Charts.Controls.DataMethods">
            <summary>
            Description of DataMethods.
            </summary>
        </member>
        <member name="M:AI.Charts.Controls.DataMethods.ReducData3000(AI.Vector,AI.Vector,System.Int32)">
            <summary>
            Прореживание данных, чтобы на графике не было большого числа точек
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Charts.Controls.DataMethods.ImageFromChart(System.Windows.Forms.DataVisualization.Charting.Chart)">
            <summary>
            Получение изображения графика 
            </summary>
            <param name="chart">График</param>
        </member>
        <member name="M:AI.Charts.Controls.DataMethods.GetColorForStyle(System.String)">
            <summary>
            Получение среднего цвета из картинки
            </summary>
            <param name="path">Путь до картинки</param>
        </member>
        <member name="T:AI.Charts.Description">
            <summary>
            Описание для графика
            </summary>
        </member>
        <member name="F:AI.Charts.Description.X">
            <summary>
            Название оси X
            </summary>
        </member>
        <member name="F:AI.Charts.Description.Y">
            <summary>
            Название оси Y
            </summary>
        </member>
        <member name="F:AI.Charts.Description.Name">
            <summary>
            Название графика
            </summary>
        </member>
        <member name="P:AI.Charts.Description.Descript">
            <summary>
            Описание графика
            </summary>
        </member>
        <member name="M:AI.Charts.Description.#ctor(System.String,System.String,System.String)">
            <summary>
            Описание графика
            </summary>
            <param name="xL">Название оси X</param>
            <param name="yL">Название оси Y</param>
            <param name="name">Название графика</param>
        </member>
        <member name="T:AI.ExtensionCV">
            <summary>
            Расширения для компьютерного зрения
            </summary>
        </member>
        <member name="M:AI.ExtensionCV.ToMatrix(System.Drawing.Bitmap)">
            <summary>
            Преобразование картинки в матрицу
            </summary>
            <param name="bitmap">Картинка</param>
        </member>
        <member name="M:AI.ExtensionCV.ToMatrix(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Преобразование картинки в матрицу
            </summary>
            <param name="bitmap">Картинка</param>
            <param name="newW">Новая ширин</param>
            <param name="newH">Новая высота</param>
        </member>
        <member name="M:AI.ExtensionCV.ToTensor(System.Drawing.Bitmap)">
            <summary>
            Преобразование картинки в тензор
            </summary>
            <param name="bitmap">Картинка</param>
        </member>
        <member name="M:AI.ExtensionCV.ToTensor(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Преобразование картинки в тензор и изменение размера
            </summary>
            <param name="bitmap">Картинка</param>
            <param name="newW">Новая ширина</param>
            <param name="newH">Новая высота</param>
        </member>
        <member name="T:AI.ComputerVision.ImgFilters">
            <summary>
            Фильтрация изображений
            </summary>
        </member>
        <member name="M:AI.ComputerVision.ImgFilters.SpaceFilter(AI.Matrix,AI.Matrix,System.Double,System.Double)">
            <summary>
            Пространственный фильтр полутонового изображения
            </summary>
            <param name="img">Матрица изображения</param>
            <param name="filter">Матрица фильтра</param>
            <param name="coef">Коэффициент контраста</param>
            <param name="dx">Яркость</param>
            <returns>Возвращает результат фильтрации</returns>
        </member>
        <member name="M:AI.ComputerVision.ImgFilters.ContrastFilter(AI.Matrix,System.Int32,System.Int32)">
            <summary>
            Контрастирование
            </summary>
            <param name="img"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.ImgFilters.FC(AI.Matrix)">
            <summary>
            Алгоритм локального контрастирования
            </summary>
            <param name="img">Изображение</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.ImgFilters.MedianFilter(AI.Matrix,AI.Matrix,System.Double,System.Double)">
            <summary>
            Медианный фильтр полутонового изображения
            </summary>
            <param name="img">Матрица изображения</param>
            <param name="filter">Матрица фильтра</param>
            <param name="coef">Коэффициент контраста</param>
            <param name="dx">Яркость</param>
            <returns>Возвращает результат фильтрации</returns>
        </member>
        <member name="M:AI.ComputerVision.ImgFilters.Contrast(AI.Matrix,System.Double,System.Double)">
            <summary>
            Регулировка контраста и яркости
            </summary>
            <param name="img">Матрица изображения</param>
            <param name="coef">Контраст</param>
            <param name="dx">Яркость</param>
            <returns>Итоговое изображение</returns>
        </member>
        <member name="M:AI.ComputerVision.ImgFilters.StdFilter(AI.Matrix,AI.Matrix,System.Double,System.Double)">
            <summary>
            STD фильтр полутонового изображения
            </summary>
            <param name="img">Матрица изображения</param>
            <param name="filter">Матрица фильтра</param>
            <param name="coef">Коэффициент контраста</param>
            <param name="dx">Яркость</param>
            <returns>Возвращает результат фильтрации</returns>
        </member>
        <member name="T:AI.ComputerVision.ImgConverter">
            <summary>
            Конвертирование изображений
            в разные математические типы
            и обратно
            </summary>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.GetBitmap(System.String)">
            <summary>
            Загрузка картинки
            </summary>
            <param name="path">Имя</param>
            <returns>изображение</returns>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.ImgToByteArray(System.Drawing.Bitmap)">
            <summary>
            Получение массива байт, для сохранения или передачи по сети
            </summary>
            <param name="bitmap">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpToTensor(System.Drawing.Bitmap)">
            <summary>
            Преобразование изображения в тензор 3-го ранга(нормировка на 1)
            </summary>
            <param name="Bmp">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpToMatr(System.Drawing.Bitmap)">
            <summary>
            Изображение в полутоновую матрицу
            </summary>
            <param name="Bmp">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpToMatrBlue(System.Drawing.Bitmap)">
            <summary>
            Изображение в матрицу синего канала
            </summary>
            <param name="Bmp">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpToMatrGreen(System.Drawing.Bitmap)">
            <summary>
            Изображение в матрицу зеленого канала
            </summary>
            <param name="Bmp">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpToMatrRed(System.Drawing.Bitmap)">
            <summary>
            Изображение в матрицу красного канала
            </summary>
            <param name="Bmp">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpToHMatr(System.Drawing.Bitmap)">
            <summary>
            Преобразование картинки в матрицу H компонент
            H принадлежит интервалу [0,1]
            </summary>
            <param name="Bmp">Картинка</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.RotateBitmap(System.Drawing.Bitmap,System.Single)">
            <summary>
            Поворот изображения на заданный угол
            </summary>
            <param name="bmp">Исходное изображение</param>
            <param name="angleRotate">Угол поворота</param>
            <returns>Изображение повернутое на заданный угол</returns>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.VerticalReflectionBitmap(System.Drawing.Bitmap)">
            <summary>
            Вертикальное зеркальное отображение
            </summary>
            <param name="bmp">Изображение</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.HorizontalReflectionBitmap(System.Drawing.Bitmap)">
            <summary>
            Горизонтальное зеркальное отображение
            </summary>
            <param name="bmp">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpResizeW(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Пропорционально изменение размеров с помощью явного указания ширины
            </summary>
            <param name="bitmap">Исходное изображение</param>
            <param name="newW">Новая ширина</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpResizeH(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Пропорционально изменение размеров с помощью явного указания высоты
            </summary>
            <param name="bitmap">Исходное изображение</param>
            <param name="newH">Новая высота</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpResizeM(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Пропорционально изменение размеров с помощью явного указания размера максимальной стороны
            </summary>
            <param name="bitmap">Исходное изображение</param>
            <param name="newM">Размер максимальной стороны</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.HComponent(System.Drawing.Color)">
            <summary>
            Вычисление H компоненты
            </summary>
            <param name="rgb"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.Visualization(AI.Matrix)">
            <summary>
            Визуализация матрицы
            </summary>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.ToBitmap(AI.Matrix)">
            <summary>
            Перевод матрицы в полутоновое изображение
            </summary>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.ToBitmap(AI.Tensor)">
            <summary>
            Тензор в картинку
            </summary>
            <param name="tensor">Тензор</param>
            <returns>Bitmap</returns>
        </member>
        <member name="T:AI.DSP.Analyse.Trend">
            <summary>
            Тренд сигнала
            </summary>
        </member>
        <member name="P:AI.DSP.Analyse.Trend.K">
            <summary>
            Коэффициент наклона
            </summary>
        </member>
        <member name="P:AI.DSP.Analyse.Trend.B">
            <summary>
            Смещение
            </summary>
        </member>
        <member name="M:AI.DSP.Analyse.Trend.#ctor(AI.Vector,AI.Vector)">
            <summary>
            Обучающая выборка
            </summary>
            <param name="X">Вектор X(независимая переменная)</param>
            <param name="Y">Вектор Y(зависимая переменная)</param>
        </member>
        <member name="M:AI.DSP.Analyse.Trend.ToString">
            <summary>
            Вывод в строку
            </summary>
            <returns>Строка типа: f(x) = k*x+(b)</returns>
        </member>
        <member name="M:AI.DSP.Analyse.Trend.Predict(System.Double)">
            <summary>
            Прогнозирование с помощью линейной модели
            </summary>
            <param name="x">Независимая переменная</param>
            <returns>Зависимая переменная</returns>
        </member>
        <member name="M:AI.DSP.Analyse.Trend.Predict(AI.Vector)">
            <summary>
            Прогнозирование с помощью линейной модели
            </summary>
            <param name="X">Вектор независимых переменных</param>
            <returns>Вектор зависимых переменных</returns>
        </member>
        <member name="T:AI.DSP.Analyse.Welch">
            <summary>
            Метод Уэлча
            </summary>
        </member>
        <member name="M:AI.DSP.Analyse.Welch.WelchRun(AI.Vector,System.Int32,System.Double,System.Func{System.Int32,AI.Vector})">
            <summary>
             Запуск метода Уэлча
            </summary>
            <param name="signal">Сигнал</param>
            <param name="window">Окно</param>
            <param name="D">Перекрытие</param>
            <param name="windowForFFT">Оконная весовая ф-я</param>
        </member>
        <member name="M:AI.DSP.Analyse.Welch.BartlettRun(AI.Vector,System.Int32,System.Func{System.Int32,AI.Vector})">
            <summary>
             Запуск метода периодограмм
            </summary>
            <param name="signal">Сигнал</param>
            <param name="window">Окно</param>
            <param name="windowForFFT">Оконная весовая ф-я</param>
        </member>
        <member name="T:AI.DSP.FIR.FilterLowButterworth">
            <summary>
            Фильтр Баттерворта
            </summary>
        </member>
        <member name="P:AI.DSP.FIR.FilterLowButterworth.Name">
            <summary>
            Имя фильтра
            </summary>
        </member>
        <member name="M:AI.DSP.FIR.FilterLowButterworth.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Фильтр Баттерворта
            </summary>
            <param name="f0">Частота среза</param>
            <param name="fd">Частота дискретизации</param>
            <param name="signalLen">Длинна реализации</param>
            <param name="order">Порядок фильтра</param>
        </member>
        <member name="M:AI.DSP.FIR.FilterLowButterworth.FilterOutp(AI.Vector)">
            <summary>
            Фильтрация сигнала
            </summary>
            <param name="signal">Сигнал</param>
        </member>
        <member name="T:AI.DSP.FIR.FIRFilter">
            <summary>
            Фильтр с конечной импульсной характеристикой
            </summary>
        </member>
        <member name="P:AI.DSP.FIR.FIRFilter.Name">
            <summary>
            Имя фильтра
            </summary>
        </member>
        <member name="M:AI.DSP.FIR.FIRFilter.#ctor(AI.Vector,System.Int32,AI.DSP.FIR.FIRCalcConvType)">
            <summary>
            Инициализация фильтра
            </summary>
            <param name="ht">Импульсная характеристика фильтра</param>
            <param name="fd">Частота дискретизации</param>
            <param name="calcConvType">Метод расчета свертки</param>
        </member>
        <member name="M:AI.DSP.FIR.FIRFilter.FilterOutp(AI.Vector)">
            <summary>
            Расчет отклика фильтра на сигнал
            </summary>
            <param name="input">Сигнал</param>
        </member>
        <member name="T:AI.DSP.FIR.FIRCalcConvType">
            <summary>
            Метод расчета свертки
            </summary>
        </member>
        <member name="F:AI.DSP.FIR.FIRCalcConvType.Simple">
            <summary>
            Простая свертка
            </summary>
        </member>
        <member name="F:AI.DSP.FIR.FIRCalcConvType.WithFFT">
            <summary>
            Быстрая с исп. БПФ
            </summary>
        </member>
        <member name="F:AI.DSP.FIR.FIRCalcConvType.Sectional">
            <summary>
            Секционная
            </summary>
        </member>
        <member name="F:AI.DSP.FIR.FIRCalcConvType.Sectional4">
            <summary>
            Секционная 4 потока
            </summary>
        </member>
        <member name="T:AI.DSP.IIR.IIRFilter">
            <summary>
            Фильтр БИХ
            </summary>
        </member>
        <member name="P:AI.DSP.IIR.IIRFilter.Name">
            <summary>
            Имя фильтра
            </summary>
        </member>
        <member name="M:AI.DSP.IIR.IIRFilter.#ctor(AI.Vector,AI.Vector)">
            <summary>
            БИХ-фильтр
            </summary>
            <param name="a">Коэффициенты а</param>
            <param name="b">Коэффициенты b</param>
        </member>
        <member name="M:AI.DSP.IIR.IIRFilter.Outp(System.Double)">
            <summary>
            Выход фильтра
            </summary>
            <param name="inp">Вход</param>
        </member>
        <member name="M:AI.DSP.IIR.IIRFilter.FilterOutp(AI.Vector)">
            <summary>
            Выход рекурсивного фильтра
            </summary>
            <param name="signal">Входной сигнал</param>
        </member>
        <member name="M:AI.DSP.IIR.IIRFilter.Reset">
            <summary>
            Сброс состояния
            </summary>
        </member>
        <member name="M:AI.DSP.IIR.IIRFilter.ExportState">
            <summary>
            Экспорт состояния
            </summary>
        </member>
        <member name="M:AI.DSP.IIR.IIRFilter.ImportState(AI.Vector,AI.Vector)">
            <summary>
            Импорт состояния фильтра
            </summary>
            <param name="inputs">Входы</param>
            <param name="outputs">Выходы</param>
        </member>
        <member name="T:AI.DSP.Modulation.AM">
            <summary>
            Амплитудная модуляция
            </summary>
        </member>
        <member name="M:AI.DSP.Modulation.AM.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Инициализация модулятора ампл. модуляции
            </summary>
            <param name="fd">Частота дискретизации</param>
            <param name="f0">Несущая частота</param>
            <param name="m">Коэффициент модуляции</param>
        </member>
        <member name="M:AI.DSP.Modulation.AM.Modulate(AI.DSP.Channel)">
            <summary>
            Модуляция
            </summary>
            <param name="signalIn"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DSP.Modulation.AM.Demodulate(AI.DSP.Channel)">
            <summary>
            Демодуляция
            </summary>
            <param name="channel">Канал с модулированным сигналом</param>
        </member>
        <member name="M:AI.DSP.Modulation.AM.ModulateSimple(AI.DSP.Channel)">
            <summary>
            Модуляция для сигналов с одинаковой частотой дискретизации
            </summary>
            <param name="signalIn">Входной сигнал</param>
        </member>
        <member name="T:AI.DSP.Modulation.FM">
            <summary>
            Частотная модуляция
            </summary>
        </member>
        <member name="M:AI.DSP.Modulation.FM.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Инициализация модулятора частотной модуляции
            </summary>
            <param name="fd">Частота дискретизации</param>
            <param name="f0">Несущая частота</param>
            <param name="deltF">Дифиация частоты</param>
        </member>
        <member name="M:AI.DSP.Modulation.FM.Demodulate(AI.DSP.Channel)">
            <summary>
            Демодуляция ЧМК
            </summary>
            <param name="channel">Канал</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSP.Modulation.FM.Modulate(AI.DSP.Channel)">
            <summary>
            Модуляция
            </summary>
            <param name="signalIn"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DSP.Modulation.FM.ModulateSimple(AI.DSP.Channel)">
            <summary>
            Модуляция для сигналов с одинаковой частотой дискретизации
            </summary>
            <param name="signalIn">Входной сигнал</param>
        </member>
        <member name="T:AI.DSP.Modulation.IModulator">
            <summary>
            Интерфейс модулятора
            </summary>
        </member>
        <member name="M:AI.DSP.Modulation.IModulator.Modulate(AI.DSP.Channel)">
            <summary>
            Модуляция сигнала
            </summary>
            <param name="channel">Канал</param>
        </member>
        <member name="M:AI.DSP.Modulation.IModulator.Demodulate(AI.DSP.Channel)">
            <summary>
            Демодуляция сигнала
            </summary>
            <param name="channel">Канал</param>
        </member>
        <member name="T:AI.DSP.Oversampling.UpSampling">
            <summary>
            Увеличение частоты дискретизации
            </summary>
        </member>
        <member name="M:AI.DSP.Oversampling.UpSampling.UpSamplingRectFilter(AI.Vector,System.Int32,System.Int32)">
            <summary>
            Увеличение частоты дискретизации(Фильтр с прямоугольной АЧХ)
            </summary>
            <param name="signal">Сигнал</param>
            <param name="fd">Частота дискретизации</param>
            <param name="kUpSemp">Во сколько раз увеличить</param>
        </member>
        <member name="M:AI.DSP.Oversampling.UpSampling.UpSamplingButterworthFilter(AI.Vector,System.Int32,System.Int32,System.Int32)">
            <summary>
            Увеличение частоты дискретизации(Фильтр Баттерворта)
            </summary>
            <param name="signal">Сигнал</param>
            <param name="fd">Частота дискретизации</param>
            <param name="kUpSemp">Во сколько раз увеличить</param>
            <param name="order">Порядок фильтра</param>
        </member>
        <member name="M:AI.DSP.Oversampling.UpSampling.UpSamplingButterworthFilterW(AI.Vector,System.Int32,System.Int32,System.Int32)">
            <summary>
            Увеличение частоты дискретизации(Фильтр Баттерворта)
            </summary>
            <param name="signal">Сигнал</param>
            <param name="fd">Частота дискретизации</param>
            <param name="kUpSemp">Во сколько раз увеличить</param>
            <param name="order">Порядок фильтра</param>
        </member>
        <member name="T:AI.DSP.Signal1D">
            <summary>
            Основной класс для одномерного сигнала
            </summary>
        </member>
        <member name="P:AI.DSP.Signal1D.Name">
            <summary>
            Имя сигнала
            </summary>
        </member>
        <member name="P:AI.DSP.Signal1D.Description">
            <summary>
            Описание сигнала
            </summary>
        </member>
        <member name="P:AI.DSP.Signal1D.Fd">
            <summary>
            Частота дискретизации
            </summary>
        </member>
        <member name="P:AI.DSP.Signal1D.Dt">
            <summary>
            Шаг по времени
            </summary>
        </member>
        <member name="P:AI.DSP.Signal1D.ScaleVolt">
            <summary>
            Масштаб в вольтах
            </summary>
        </member>
        <member name="M:AI.DSP.Signal1D.#ctor(AI.Vector[],System.Int32)">
            <summary>
            Инициализация многоканальным сигналом
            </summary>
            <param name="channels">Сигнал</param>
            <param name="fd">Частота дискретизации</param>
        </member>
        <member name="M:AI.DSP.Signal1D.#ctor">
            <summary>
            Создает пустой список каналов
            </summary>
        </member>
        <member name="M:AI.DSP.Signal1D.#ctor(AI.Vector,System.Int32)">
            <summary>
            Инициализация многоканальным сигналом
            </summary>
            <param name="signal">Сигнал</param>
            <param name="fd">Частота дискретизации</param>
        </member>
        <member name="M:AI.DSP.Signal1D.#ctor(AI.DSP.Channel)">
            <summary>
            Инициализация многоканальным сигналом
            </summary>
            <param name="signal">Сигнал</param>
        </member>
        <member name="M:AI.DSP.Signal1D.Add(AI.DSP.Channel)">
            <summary>
            Добавление сигнала
            </summary>
            <param name="signal">Сигнал</param>
        </member>
        <member name="M:AI.DSP.Signal1D.Trends">
            <summary>
            Тренды сигнала
            </summary>
        </member>
        <member name="M:AI.DSP.Signal1D.SignalWithoutTrend">
            <summary>
            Сигнал без тренда
            </summary>
        </member>
        <member name="M:AI.DSP.Signal1D.SignalWithM0Std1Trend">
            <summary>
            Сигнал нулевым мат. ожиданием и средне квадратичным отклонением равным 1 (вычитается тренд)
            </summary>
        </member>
        <member name="M:AI.DSP.Signal1D.SignalWithM0Std1">
            <summary>
            Сигнал нулевым мат. ожиданием и средне квадратичным отклонением равным 1 (вычитается среднее)
            </summary>
        </member>
        <member name="M:AI.DSP.Signal1D.GetSpectr(System.Int32)">
            <summary>
            Рассчитывает спектр
            </summary>
            <param name="numCh">Номер канала</param>
            <returns>Амплитудный спектр частоты 0 .. fd/2</returns>
        </member>
        <member name="M:AI.DSP.Signal1D.GetSpectrAll">
            <summary>
            Рассчитывает спектр по всем каналам
            </summary>
            <returns>Спектры</returns>
        </member>
        <member name="M:AI.DSP.Signal1D.CorrelationMatrix">
            <summary>
            Корреляционная матрица по каналам
            </summary>
            <returns>Матрица</returns>
        </member>
        <member name="M:AI.DSP.Signal1D.CorrelationMatrixSpectr">
            <summary>
            Корреляционная матрица амплитудных спектров
            </summary>
            <returns>Матрица</returns>
        </member>
        <member name="M:AI.DSP.Signal1D.CouplingCoefficient">
            <summary>
            Коэффициент связи между каналами рассчитывается как, единица минус определитель корреляционной матрицы
            </summary>
            <returns>Коэфициент связи [1,0] близко к 1 связь сильная, к 0 слабая</returns>
        </member>
        <member name="M:AI.DSP.Signal1D.CouplingCoefficientSp">
            <summary>
            Коэффициент связи между сперктрами каналов рассчитывается как, единица минус определитель корреляционной матрицы амплитудных спектров
            </summary>
            <returns>Коэфициент связи [1,0] близко к 1 связь сильная, к 0 слабая</returns>
        </member>
        <member name="M:AI.DSP.Signal1D.Time">
            <summary>
            Генерация отсчетов времени
            </summary>
            <returns>Отсчеты времени</returns>
        </member>
        <member name="M:AI.DSP.Signal1D.Freq">
            <summary>
            Генерация отсчетов частоты
            </summary>
            <returns>Отсчеты частоты</returns>
        </member>
        <member name="M:AI.DSP.Signal1D.ConvertVolt(AI.DSP.TypeScaleVolt)">
            <summary>
            Конвертирование шкалы напряжения 
            </summary>
            <param name="typeScaleVolt">Новый масштаб</param>
        </member>
        <member name="M:AI.DSP.Signal1D.Filtration(AI.DSPCore.IFilter)">
            <summary>
            Фильтрация сигнала
            </summary>
            <param name="filter">Фильтр</param>
        </member>
        <member name="M:AI.DSP.Signal1D.YName">
            <summary>
            Единица измерения шкалы Y
            </summary>
        </member>
        <member name="M:AI.DSP.Signal1D.ChannelNames">
            <summary>
            Список имен каналов
            </summary>
        </member>
        <member name="T:AI.DSP.Channel">
            <summary>
            Канал
            </summary>
        </member>
        <member name="P:AI.DSP.Channel.ChData">
            <summary>
            Отсчеты сигнала
            </summary>
        </member>
        <member name="P:AI.DSP.Channel.Fd">
            <summary>
            Частота дискретизации
            </summary>
        </member>
        <member name="P:AI.DSP.Channel.Dt">
            <summary>
            Шаг по времени
            </summary>
        </member>
        <member name="P:AI.DSP.Channel.Name">
            <summary>
            Имя канала
            </summary>
        </member>
        <member name="P:AI.DSP.Channel.Description">
            <summary>
            Описание
            </summary>
        </member>
        <member name="P:AI.DSP.Channel.Item(System.Int32)">
            <summary>
            Доступ по индексам к данным канала
            </summary>
            <param name="i">Индекс</param>
        </member>
        <member name="P:AI.DSP.Channel.ScaleVolt">
            <summary>
            Масштаб по напряжению
            </summary>
        </member>
        <member name="M:AI.DSP.Channel.#ctor">
            <summary>
            Канал
            </summary>
        </member>
        <member name="M:AI.DSP.Channel.#ctor(AI.Vector,System.Int32)">
            <summary>
            Канал, задается через вектор данных и частоту дискретизации
            </summary>
            <param name="vectorData">Вектор</param>
            <param name="fd">Частота</param>
        </member>
        <member name="M:AI.DSP.Channel.#ctor(AI.Vector,System.Int32,System.String)">
            <summary>
            Канал, задается через вектор данных, частоту дискретизации и имя
            </summary>
            <param name="vectorData">Вектор</param>
            <param name="fd">Частота</param>
            <param name="name">Имя</param>
        </member>
        <member name="M:AI.DSP.Channel.#ctor(AI.Vector,System.Int32,System.String,System.String)">
            <summary>
            Канал, задается через вектор данных, частоту дискретизации, имя и  описание
            </summary>
            <param name="vectorData">Вектор</param>
            <param name="fd">Частота</param>
            <param name="name">Имя</param>
            <param name="description">Описание</param>
        </member>
        <member name="M:AI.DSP.Channel.GetChannels(AI.Vector[],System.Int32)">
            <summary>
            Преобразует масив векторов в массив каналов
            </summary>
            <param name="vects">Массив векторов</param>
            <param name="fd">Частота дискретизации</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSP.Channel.ChansToVects(AI.DSP.Channel[])">
            <summary>
            Массив каналов в массив векторов
            </summary>
            <param name="channels">Массив каналов</param>
        </member>
        <member name="M:AI.DSP.Channel.SignalTrend">
            <summary>
            Тренды сигнала
            </summary>
        </member>
        <member name="M:AI.DSP.Channel.SignalWithoutTrend">
            <summary>
            Сигнал без тренда
            </summary>
        </member>
        <member name="M:AI.DSP.Channel.SignalWithM0Std1Trend">
            <summary>
            Сигнал нулевым мат. ожиданием и средне квадратичным отклонением равным 1 (вычитается тренд)
            </summary>
        </member>
        <member name="M:AI.DSP.Channel.SignalWithM0Std1">
            <summary>
            Сигнал нулевым мат. ожиданием и средне квадратичным отклонением равным 1 (вычитается среднее)
            </summary>
        </member>
        <member name="M:AI.DSP.Channel.GetSpectr">
            <summary>
            Рассчитывает спектр
            </summary>
            <returns>Амплитудный спектр частоты 0 .. fd/2</returns>
        </member>
        <member name="M:AI.DSP.Channel.GetSpectr(System.Func{System.Int32,AI.Vector})">
            <summary>
            Рассчитывает спектр с использованием оконных функций
            </summary>
            <returns>Амплитудный спектр частоты 0 .. fd/2</returns>
        </member>
        <member name="M:AI.DSP.Channel.Time">
            <summary>
            Генерация отсчетов времени
            </summary>
            <returns>Отсчеты времени</returns>
        </member>
        <member name="M:AI.DSP.Channel.Freq">
            <summary>
            Генерация отсчетов частоты
            </summary>
            <returns>Отсчеты частоты</returns>
        </member>
        <member name="M:AI.DSP.Channel.KoefScaleToVolt(AI.DSP.TypeScaleVolt)">
            <summary>
            Коэффициент для перевода в вольты
            </summary>
            <param name="scaleVolt">Масштаб</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSP.Channel.YName">
            <summary>
            Единица измерения шкалы Y
            </summary>
        </member>
        <member name="M:AI.DSP.Channel.ConvertVolt(AI.DSP.TypeScaleVolt)">
            <summary>
            Конвертирование масштаба по Y
            </summary>
            <param name="newScale">Новый масштаб</param>
        </member>
        <member name="M:AI.DSP.Channel.Filtration(AI.DSPCore.IFilter)">
            <summary>
            Фильтрация канала
            </summary>
            <param name="filter">Фильтр</param>
        </member>
        <member name="T:AI.DSP.TypeScaleVolt">
            <summary>
            Масштаб в вольтах
            </summary>
        </member>
        <member name="F:AI.DSP.TypeScaleVolt.kV">
            <summary>
            Киловольты 
            </summary>
        </member>
        <member name="F:AI.DSP.TypeScaleVolt.V">
            <summary>
            Вольты
            </summary>
        </member>
        <member name="F:AI.DSP.TypeScaleVolt.mV">
            <summary>
            Милливольты
            </summary>
        </member>
        <member name="F:AI.DSP.TypeScaleVolt.uV">
            <summary>
            Микровольты
            </summary>
        </member>
        <member name="F:AI.DSP.TypeScaleVolt.nV">
            <summary>
            Нановольты
            </summary>
        </member>
        <member name="T:AI.DSP.ISpectr">
            <summary>
            Базовый интерфейс реализации спектров
            </summary>
        </member>
        <member name="P:AI.DSP.ISpectr.Freq">
            <summary>
            Отсчеты частоты
            </summary>
        </member>
        <member name="P:AI.DSP.ISpectr.Data">
            <summary>
            Данные спектра
            </summary>
        </member>
        <member name="P:AI.DSP.ISpectr.Name">
            <summary>
            Имя
            </summary>
        </member>
        <member name="P:AI.DSP.ISpectr.YLable">
            <summary>
            Название шкалы Y
            </summary>
        </member>
        <member name="P:AI.DSP.ISpectr.XLable">
            <summary>
            Название шкалы X
            </summary>
        </member>
        <member name="P:AI.DSP.ISpectr.IsDbScale">
            <summary>
            Выводится ли шкала данные по Y в децибелах
            </summary>
        </member>
        <member name="P:AI.DSP.ISpectr.LogScaleX">
            <summary>
            Логарифмическая ли шкала частот
            </summary>
        </member>
        <member name="T:AI.DSP.AmplitudeSpectr">
            <summary>
            Амплитудный спектр
            </summary>
        </member>
        <member name="P:AI.DSP.AmplitudeSpectr.Freq">
            <summary>
            Отсчеты частоты
            </summary>
        </member>
        <member name="P:AI.DSP.AmplitudeSpectr.Data">
            <summary>
            Амплитуды спектра
            </summary>
        </member>
        <member name="P:AI.DSP.AmplitudeSpectr.Name">
            <summary>
            Имя
            </summary>
        </member>
        <member name="P:AI.DSP.AmplitudeSpectr.YLable">
            <summary>
            Название шкалы Y
            </summary>
        </member>
        <member name="P:AI.DSP.AmplitudeSpectr.XLable">
            <summary>
            Название шкалы X
            </summary>
        </member>
        <member name="P:AI.DSP.AmplitudeSpectr.IsDbScale">
            <summary>
            Выводится ли шкала данные по Y в децибелах
            </summary>
        </member>
        <member name="P:AI.DSP.AmplitudeSpectr.LogScaleX">
            <summary>
            Логарифмическая ли шкала частот
            </summary>
        </member>
        <member name="M:AI.DSP.AmplitudeSpectr.#ctor(AI.DSP.Channel,System.Boolean)">
            <summary>
            Амплитудный спектр
            </summary>
            <param name="channel">Канал</param>
            <param name="isDbScale">Выражать ли в db, 20log(x)</param>
        </member>
        <member name="M:AI.DSP.AmplitudeSpectr.#ctor(AI.DSP.Channel,System.Func{System.Int32,AI.Vector},System.Boolean)">
            <summary>
            Амплитудный спектр
            </summary>
            <param name="channel">Канал</param>
            <param name="windowWFunc">Оконная функция</param>
            <param name="isDbScale">Выражать ли в db, 20log(x)</param>
        </member>
        <member name="T:AI.ComplexMatrix">
            <summary>
            Матрица с комплексными числами
            </summary>
        </member>
        <member name="P:AI.ComplexMatrix.H">
            <summary>
            Число строк
            </summary>
        </member>
        <member name="P:AI.ComplexMatrix.W">
            <summary>
            Число столбцов
            </summary>
        </member>
        <member name="P:AI.ComplexMatrix.MatrixData">
            <summary>
            Данные
            </summary>
        </member>
        <member name="P:AI.ComplexMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Индексы
            </summary>
            <param name="i">номер строки</param>
            <param name="j">номер столбца</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexMatrix.#ctor">
            <summary>
            Создает мактрицу 3х3
            </summary>
        </member>
        <member name="M:AI.ComplexMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Создает матрицу hxw
            </summary>
            <param name="h">Число строк</param>
            <param name="w">Число столбцов</param>
        </member>
        <member name="M:AI.ComplexMatrix.#ctor(AI.Matrix,AI.Matrix)">
            <summary>
            Создает матрицу из 2х вещественных
            </summary>
            <param name="real">Реальная часть</param>
            <param name="im">Мнимая</param>
        </member>
        <member name="M:AI.ComplexMatrix.#ctor(AI.Matrix)">
            <summary>
            Создает матрицу по ее реальной части
            </summary>
            <param name="real">Реальная часть</param>
        </member>
        <member name="M:AI.ComplexMatrix.op_Multiply(AI.ComplexMatrix,AI.ComplexMatrix)">
            <summary>
            Умножение матриц
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexMatrix.MatrixMagn">
            <summary>
            Матрица амплитуд
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexMatrix.MatrixPhase">
            <summary>
            Матрица фаз
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexMatrix.MatrixReal">
            <summary>
            Матрица действительной части
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexMatrix.MatrixIm">
            <summary>
            Матрица мнимой части
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexMatrix.Transform(System.Func{System.Numerics.Complex,System.Numerics.Complex})">
            <summary>
            Поэлементное преобразование матриц
            </summary>
            <param name="func">Функция преобразования</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexMatrix.TransformSelf(System.Func{System.Numerics.Complex,System.Numerics.Complex})">
            <summary>
            Матрица изменяет саму себя
            </summary>
            <param name="func">Функция преобразования</param>
        </member>
        <member name="M:AI.ComplexMatrix.MatrixFFT(AI.Matrix)">
            <summary>
            Двумерное преобразование Фурье
            </summary>
            <param name="input">Вход</param>
        </member>
        <member name="M:AI.ComplexMatrix.MatrixIFFT(AI.ComplexMatrix)">
            <summary>
            Обратное двумерное преобразование Фурье
            </summary>
            <param name="input">Входная матрица</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexMatrix.MatrixFFT(AI.ComplexMatrix)">
            <summary>
            Двумерное преобразование Фурье
            </summary>
            <param name="input">Вход</param>
        </member>
        <member name="M:AI.ComplexMatrix.GetColumns(AI.ComplexMatrix)">
            <summary>
            Разложение матрицы на столбцы
            </summary>
            <param name="matr">Матрица</param>
            <returns>Массив векторов</returns>
        </member>
        <member name="M:AI.ComplexMatrix.ConjugateMatr">
            <summary>
            Сопряженная матрица
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexMatrix.AdamarProduct(AI.ComplexMatrix)">
            <summary>
            Адамарово произведение матриц (поэлементное)
            </summary>
            <param name="complexMatrix">Матрица на которую происходит умножение</param>
        </member>
        <member name="M:AI.ComplexMatrix.AdamarProduct(AI.Matrix)">
            <summary>
            Адамарово произведение матриц (поэлементное)
            </summary>
            <param name="matrix">Матрица на которую происходит умножение</param>
        </member>
        <member name="T:AI.DSPCore.DCT">
            <summary>
            Дискретно-косинусное преобразование
            </summary>
        </member>
        <member name="P:AI.DSPCore.DCT.MainMatrix">
            <summary> 
            Матрица прямого преобразования
            </summary>
        </member>
        <member name="P:AI.DSPCore.DCT.InvMatrix">
            <summary> 
            Матрица обратного преобразования
            </summary>
        </member>
        <member name="M:AI.DSPCore.DCT.#ctor">
            <summary>
            Дискретно-косинусное преобразование
            </summary>
        </member>
        <member name="M:AI.DSPCore.DCT.#ctor(System.Int32,System.Int32)">
            <summary>
            Дискретно-косинусное преобразование
            </summary>
            <param name="countInp">Кол-во входов</param>
            <param name="countOutp">Код-во Выходов</param>
        </member>
        <member name="M:AI.DSPCore.DCT.GetMatrW(System.Int32,System.Int32)">
            <summary>
            Матрица
            </summary>
            <param name="N"></param>
            <param name="M"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.DCT.FDCT(AI.Vector)">
            <summary>
            Прямое ДКТ
            </summary>
            <param name="inp"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.DCT.IDCT(AI.Vector)">
            <summary>
            Обратное Дкт
            </summary>
            <param name="inp"></param>
            <returns></returns>
        </member>
        <member name="T:AI.DSPCore.FastConv">
            <summary>
            Реализация быстрых сверток
            </summary>
        </member>
        <member name="M:AI.DSPCore.FastConv.FastConvolution(AI.Vector,AI.Vector)">
            <summary>
            Быстрая свертка
            </summary>
            <param name="signal">Сигнал</param>
            <param name="ht">Импульсная характеристика</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.FastConv.FastConvolution(AI.Vector,AI.Vector,System.Double)">
            <summary>
            Быстрая свертка
            </summary>
            <param name="signal">Сигнал</param>
            <param name="ht">Импульсная характеристика</param>
            <param name="fd">Частота дискретизации</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.FastConv.FastConvolutionNorm(AI.Vector,AI.Vector)">
            <summary>
            Быстрая нормированная свертка
            </summary>
            <param name="signal">Сигнал</param>
            <param name="ht">Импульсная характеристика</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.FastConv.FastNormCorrelation(AI.Vector,AI.Vector)">
            <summary>
            Быстрая корреляция
            </summary>
            <param name="signal">Сигнал</param>
            <param name="ht">Патерн</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.FastConv.FastCorrelation(AI.Vector,AI.Vector)">
            <summary>
            Быстрая нормированная корреляция
            </summary>
            <param name="signal">Сигнал</param>
            <param name="ht">Патерн</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.FastConv.SectionalConvolutionNorm(AI.Vector,AI.Vector,System.Int32)">
            <summary>
            Быстрая секционная свертка
            </summary>
            <param name="signal">Сигнал</param>
            <param name="pattern">Паттерн (участок в разы меньше сигнала)</param>
            <param name="num">Число секций</param>
        </member>
        <member name="M:AI.DSPCore.FastConv.SectionalConvolution(AI.Vector,AI.Vector,System.Int32)">
            <summary>
            Быстрая секционная свертка
            </summary>
            <param name="signal">Сигнал</param>
            <param name="pattern">Паттерн (участок в разы меньше сигнала)</param>
            <param name="num">Число секций</param>
        </member>
        <member name="T:AI.DSPCore.FastHilbert">
            <summary>
            Description of Hilbert.
            </summary>
        </member>
        <member name="M:AI.DSPCore.FastHilbert.ConjugateToTheHilbert(AI.Vector)">
            <summary>
            Сигнал сопряженный по Гильберту
            </summary>
            <param name="st">Исходный сигнал</param>
        </member>
        <member name="M:AI.DSPCore.FastHilbert.GetAnalSig(AI.Vector)">
            <summary>
            Аналитический сигнал
            </summary>
            <param name="st">Входной сигнал</param>
        </member>
        <member name="M:AI.DSPCore.FastHilbert.Envelope(AI.Vector)">
            <summary>
            Огибающая
            </summary>
            <param name="st">Входной сигнал</param>
        </member>
        <member name="M:AI.DSPCore.FastHilbert.Phase(AI.Vector)">
            <summary>
            Мгновенная фаза
            </summary>
            <param name="st">Входной сигнал</param>
        </member>
        <member name="M:AI.DSPCore.FastHilbert.Frequency(AI.Vector)">
            <summary>
            Мгновенная частота
            </summary>
            <param name="st">Входной сигнал</param>
        </member>
        <member name="M:AI.DSPCore.FastHilbert.EnvelopeQI(AI.Vector,System.Double,System.Double)">
            <summary>
            Выделение огибающей на базе квадратурн. сост
            </summary>
        </member>
        <member name="M:AI.DSPCore.FastHilbert.PhaseQI(AI.Vector,System.Double,System.Double)">
            <summary>
            Выделение девиации частоты на базе квадратурн. сост
            </summary>
        </member>
        <member name="T:AI.DSPCore.Filters">
            <summary>
            Класс для реализации цифровых фильтров
            </summary>
        </member>
        <member name="M:AI.DSPCore.Filters.Filter(AI.Vector,AI.Vector,System.Boolean)">
            <summary>
            Реализация простого фильтра
            </summary>
            <param name="st">Вектор сигнала</param>
            <param name="kw">АЧХ</param>
            <param name="mean">Нужна ли постоянная составляющая</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.Filter(AI.Vector,AI.ComplexVector,System.Boolean)">
            <summary>
            Реализация простого фильтра
            </summary>
            <param name="st">Вектор сигнала</param>
            <param name="kw">КЧХ</param>
            <param name="mean">Нужна ли постоянная составляющая</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.FilterKontur(AI.Vector,System.Double,System.Double,System.Int32)">
            <summary>
            Реализация колебательного контура
            </summary>
            <param name="st">Вектор сигнала</param>
            <param name="Q">Добротность</param>
            <param name="f0">Резонансная частота</param>
            <param name="fd">Частота дискретизации</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.FilterLow(AI.Vector,System.Double,System.Int32)">
            <summary>
            ФНЧ (Прямоугольная АЧХ)
            </summary>
            <param name="signal">Отсчеты сигнала</param>
            <param name="sr">Частота среза</param>
            <param name="fd">Частота дискретизации</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.FilterLowButterworthCFH(AI.Vector,System.Double,System.Int32,System.Int32)">
            <summary>
            ФНЧ (АЧХ повторяет АЧХ Баттерворта), задан через КЧХ
            </summary>
            <param name="signal">Отсчеты сигнала</param>
            <param name="sr">Частота среза</param>
            <param name="fd">Частота дискретизации</param>
            <param name="order">Порядок фильтра</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.FilterLowButterworthAFH(AI.Vector,System.Double,System.Int32,System.Int32)">
            <summary>
            ФНЧ (АЧХ повторяет АЧХ Баттерворта), задан через АЧХ
            </summary>
            <param name="signal">Отсчеты сигнала</param>
            <param name="sr">Частота среза</param>
            <param name="fd">Частота дискретизации</param>
            <param name="order">Порядок фильтра</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.FilterBand(AI.Vector,System.Double,System.Double,System.Int32)">
            <summary>
            Полосовой фильтр (Прямоугольная АЧХ)
            </summary>
            <param name="signal">Отсчеты сигнала</param>
            <param name="sr1">Нижняя частота полосы</param>
            <param name="sr2">Верхняя частота полосы</param>
            <param name="fd">Частота дискретизации</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.FilterHigh(AI.Vector,System.Double,System.Int32)">
            <summary>
            ФВЧ (Прямоугольная АЧХ)
            </summary>
            <param name="signal">Отсчеты сигнала</param>
            <param name="sr">Частота среза</param>
            <param name="fd">Частота дискретизации</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.FilterRezector(AI.Vector,System.Double,System.Double,System.Int32)">
            <summary>
            Режекторный фильтр
            </summary>
            <param name="signal">Отсчеты сигнала</param>
            <param name="sr1">Нижняя частота полосы</param>
            <param name="sr2">Верхняя частота полосы</param>
            <param name="fd">Частота дискретизации</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.GetAFH(AI.Vector,System.Double[],AI.DSPCore.AFHType)">
            <summary>
            Создание АЧХ нужного типа
            </summary>
            <param name="f">Вектор частот</param>
            <param name="param">параметры</param>
            <param name="afh">Тип АЧХ</param>
        </member>
        <member name="M:AI.DSPCore.Filters.CreatAFH(AI.Vector,System.String[])">
            <summary>
            Создание составной АЧХ
            </summary>
            <param name="f">Вектор частот</param>
            <param name="param">Параметры</param>
            <returns>Возвращает АЧХ</returns>
        </member>
        <member name="M:AI.DSPCore.Filters.ExpAv(AI.Vector,System.Double)">
            <summary>
            Эспоненциональное скользящее среднее
            </summary>
            <param name="inp">Вход</param>
            <param name="oldPart">Коэффициент сглаживания</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.Filters.MAv(AI.Vector,System.Int32)">
            <summary>
            Cкользящее среднее
            </summary>
            <param name="inp">Вход</param>
            <param name="l">Размер окна</param>
        </member>
        <member name="M:AI.DSPCore.Filters.GetEnvelope(AI.Vector,System.Int32)">
            <summary>
            Получение огибающей
            </summary>
            <param name="inp"></param>
            <param name="dec">Прореживание</param>
        </member>
        <member name="M:AI.DSPCore.Filters.ButterworthLowAFH(System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            Ачх фильтра Баттерворта
            </summary>
            <param name="N">Число отсчетов сигнала</param>
            <param name="sr">Частота среза</param>
            <param name="fd">Частота дискретизации</param>
            <param name="order">Порядок фильтра</param>
        </member>
        <member name="M:AI.DSPCore.Filters.ButterworthLowCFH(System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            КЧХ фильтра Баттерворта
            </summary>
            <param name="N">Число отсчетов сигнала</param>
            <param name="sr">Частота среза</param>
            <param name="fd">Частота дискретизации</param>
            <param name="order">Порядок фильтра</param>
        </member>
        <member name="T:AI.DSPCore.AFHType">
            <summary>
            Типы АЧХ
            </summary>
        </member>
        <member name="F:AI.DSPCore.AFHType.Low">
            <summary>
            ФНЧ
            </summary>
        </member>
        <member name="F:AI.DSPCore.AFHType.High">
            <summary>
            ФВЧ
            </summary>
        </member>
        <member name="F:AI.DSPCore.AFHType.Rezector">
            <summary>
            Режектор
            </summary>
        </member>
        <member name="F:AI.DSPCore.AFHType.Band">
            <summary>
            Полосовой
            </summary>
        </member>
        <member name="M:AI.DSPCore.FurCor.FFT.DoFFT(AI.ComplexVector)">
            <summary>
            Perform a complex fast fourier transform on an array.
            </summary>
            <param name="samples">array of audio samples (imaginary part will be zero)</param>
            <returns>the fourier transformation of the samples</returns>
        </member>
        <member name="M:AI.DSPCore.FurCor.FFT.DoIRFFT(AI.ComplexVector,System.Int32)">
            <summary>
            Perform a complex fast Fourier transform on an array with a specified number of samples.
            </summary>
            <param name="complexArray">array of audio samples (imaginary parts will be zero)</param>
            <param name="numSamples">number of samples in longer file</param>
            <returns>the Fourier transformation of the samples</returns>
        </member>
        <member name="M:AI.DSPCore.FurCor.FFT.RecursiveFFT(System.Numerics.Complex[])">
            <summary>
            Recursively compute the complex fast Fourier transform of an array. 
            Implemented using a recursive implementation of the Cooley-Tukey radix-2 algorithm: O(n log n)
            </summary>
            <param name="complexArray">array of complexArray (size should be padded with zeros to a length of the first power of 2
            equal to or greater than the intial length</param>
            <returns>the discrete Fourier transformation of the complexArray</returns>
        </member>
        <member name="M:AI.DSPCore.FurCor.FFT.DoInverseFFT(AI.ComplexVector)">
            <summary>
            Recursively compute an inverse complex fast Fourier transform of an array. 
            Implemented using a recursive implementation of the Cooley-Tukey radix-2 algorithm: O(n log n)
            </summary>
            <param name="complexVector">array of complexArray (size should be padded with zeros to a length of the first power of 2
            equal to or greater than the intial length</param>
            <returns>the fourier transformation of the complexArray</returns>
        </member>
        <member name="T:AI.DSPCore.Signal">
            <summary>
            Description of Signal.
            </summary>
        </member>
        <member name="M:AI.DSPCore.Signal.Sin(AI.Vector,System.Double,System.Double,System.Double)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
            <param name="fi">Начальная фаза</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Sin(AI.Vector,System.Double,AI.Vector,System.Double)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
            <param name="fi">Начальная фаза</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Sin(AI.Vector,System.Double,System.Double,AI.Vector)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
            <param name="fi">Начальная фаза</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Sin(AI.Vector,AI.Vector,System.Double,System.Double)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
            <param name="fi">Начальная фаза</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Sin(AI.Vector,System.Double,System.Double)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Frequency(System.Int32,System.Double)">
            <summary>
            Массив частот
            </summary>
            <param name="N">Кол-во значений</param>
            <param name="fd">Частота дискретизации</param>
            <returns>Вектор частот</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.FrequencyCentr(System.Int32,System.Double)">
            <summary>
            Центрированный массив частот 
            </summary>
            <param name="N">Кол-во значений</param>
            <param name="fd">Частота дискретизации</param>
            <returns>Вектор частот</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Sin(AI.Vector,System.Double,AI.Vector)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Sin(AI.Vector,AI.Vector,System.Double)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Sin(AI.Vector,System.Double)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="f">частота</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Sin(AI.Vector,AI.Vector)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="f">частота</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Rect(AI.Vector,System.Double,System.Double,System.Double)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">Частота</param>
            <param name="fi">Фаза</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Rect(AI.Vector,AI.Vector,System.Double,System.Double)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Вектор амплитуд</param>
            <param name="f">Частота</param>
            <param name="fi">Фаза</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Rect(AI.Vector,System.Double,AI.Vector,System.Double)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">Вектор частот</param>
            <param name="fi">Фаза</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Rect(AI.Vector,System.Double,System.Double,AI.Vector)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">Частота</param>
            <param name="fi">Вектор фаз</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Rect(AI.Vector,System.Double,System.Double)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">Частота</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Rect(AI.Vector,System.Double,AI.Vector)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">Вектор частот</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Rect(AI.Vector,AI.Vector,System.Double)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Вектор амплитуда</param>
            <param name="f">Вектор частот</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Rect(AI.Vector,System.Double)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="f">Частота</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Rect(AI.Vector,AI.Vector)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="f">Вектор частот</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.AmkRect(AI.Vector,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Амплитудно-модулированые колебания (прямоугольное модулирующее колебание)
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f1">Несущая частота</param>
            <param name="fi1">Фаза модулирующего сигала</param>
            <param name="f2">Частота модулятора</param>
            <param name="fi2">Фаза модулируемого сигала</param>
            <param name="k">Коэффициент модуляции</param>
            <returns>Вектор отсчетов</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.AmkRect(AI.Vector,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Амплитудно-модулированые колебания (прямоугольное модулирующее колебание)
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f1">Несущая частота</param>
            <param name="f2">Частота модулятора</param>
            <param name="fi2">Фаза модулируемого сигала</param>
            <param name="k">Коэффициент модуляции</param>
            <returns>Вектор отсчетов</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.AmkRect(AI.Vector,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Амплитудно-модулированые колебания (прямоугольное модулирующее колебание)
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f1">Несущая частота</param>
            <param name="f2">Частота модулятора</param>
            <param name="k">Коэффициент модуляции</param>
            <returns>Вектор отсчетов</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.AmkRectK(AI.Vector,System.Double,System.Double,System.Double)">
            <summary>
            Амплитудно-модулированые колебания (прямоугольное модулирующее колебание)
            </summary>
            <param name="t">Вектор времени</param>
            <param name="f1">Несущая частота</param>
            <param name="f2">Частота модулятора</param>
            <param name="k">Коэффициент модуляции</param>
            <returns>Вектор отсчетов</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.AmkRectA(AI.Vector,System.Double,System.Double,System.Double)">
            <summary>
            Амплитудно-модулированые колебания (прямоугольное модулирующее колебание)
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f1">Несущая частота</param>
            <param name="f2">Частота модулятора</param>
            <returns>Вектор отсчетов</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.AmkRect(AI.Vector,System.Double,System.Double)">
            <summary>
            Амплитудно-модулированые колебания
            </summary>
            <param name="t"></param>
            <param name="f1"></param>
            <param name="f2"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.Signal.DampedOscillations(AI.Vector,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Затухающие колебания
            </summary>
            <param name="t">Время симуляции</param>
            <param name="f">частота</param>
            <param name="kDamp">Коэффициент затухания</param>
            <param name="A">Амплитуда(начальная)</param>
            <param name="fi">Фаза</param>
        </member>
        <member name="M:AI.DSPCore.Signal.Energe(AI.Vector,System.Double)">
            <summary>
            Энергия выделяемая на едичном резисторе за все время
            </summary>
            <param name="signal">Сигнал отсчеты</param>
            <param name="fd">Частота дискретизация</param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.Signal.LFMRectNP(System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Пачка ЛЧМ
            </summary>
            <param name="f"></param>
            <param name="f0"></param>
            <param name="fd"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:AI.DSPCore.Signal.LFM(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            ЛЧМ
            </summary>
            <param name="df"></param>
            <param name="f0"></param>
            <param name="fd"></param>
            <param name="time"></param>
        </member>
        <member name="M:AI.DSPCore.Signal.Perediscr(AI.Vector,System.Int32,System.Int32)">
            <summary>
            Передискретизация сигнала
            (повышение частоты дискретизации в целое число раз)
            </summary>
            <param name="inp">Входной вектор</param>
            <param name="fd">Старая частота дискретизации</param>
            <param name="newfd">Новая частота дикретизации</param>
            <returns>Вектор тойже длительности, что и входной,
            но с более высокой частотой дискретизации</returns>
        </member>
        <member name="M:AI.DSPCore.Signal.Norm(AI.Vector,System.Double)">
            <summary>
            Норма сигнала
            </summary>
            <param name="signal"></param>
            <param name="fd"></param>
            <returns></returns>
        </member>
        <member name="T:AI.DSPCore.IFilter">
            <summary>
            Интерфейс фильтра
            </summary>
        </member>
        <member name="P:AI.DSPCore.IFilter.Name">
            <summary>
            Имя фильтра
            </summary>
        </member>
        <member name="M:AI.DSPCore.IFilter.FilterOutp(AI.Vector)">
            <summary>
            Запуск фильтрации
            </summary>
            <param name="signal">Исходный сигнал</param>
            <returns>Отфильтрованный</returns>
        </member>
        <member name="T:AI.Furie">
            <summary>
            Преобразование Фурье
            </summary>
        </member>
        <member name="P:AI.Furie.rotateCoef">
            <summary>
            Вектор поворота
            </summary>
        </member>
        <member name="F:AI.Furie._n">
            <summary>
            Кол-во
            </summary>
        </member>
        <member name="M:AI.Furie.#ctor(System.Int32)">
            <summary>
            Фурье
            </summary>
        </member>
        <member name="M:AI.Furie.FFT(AI.Vector)">
            <summary>
            Быстрое Фурье
            </summary>
            <param name="inp"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Furie.RealIFFT(AI.ComplexVector)">
            <summary>
            Реальная часть ОБПФ
            </summary>
            <param name="cInp">Комплексный вектор</param>
        </member>
        <member name="M:AI.Furie.RealIFFT2(AI.ComplexVector)">
            <summary>
            Реальная часть БПФ(не нормировано на кол-во)
            </summary>
            <param name="cInp">Комплексный вектор</param>
        </member>
        <member name="M:AI.Furie.GetSpectr(AI.Vector,System.Func{System.Int32,AI.Vector})">
            <summary>
            Выдает спектр сигнала от 0 до fd/2
            </summary>
            <param name="input">Вектор входа</param>
            <param name="window">Оконная ф-я</param>
            <returns>Спектр сигнала</returns>
        </member>
        <member name="M:AI.Furie.IFFT(AI.ComplexVector)">
            <summary>
            ОБПФ
            </summary>
            <param name="inp">Вход</param>
        </member>
        <member name="M:AI.Furie.ifft(System.Numerics.Complex[])">
            <summary>
            Возвращает спектр сигнала
            </summary>
            <param name="inp">Массив значений сигнала. Количество значений должно быть степенью 2</param>
            <returns>Массив со значениями спектра сигнала</returns>
        </member>
        <member name="M:AI.Furie.fft(AI.ComplexVector)">
            <summary>
            Возвращает комплексный вектор спектра сигнала
            </summary>
            <param name="inp">Массив значений сигнала. Количество значений должно быть степенью 2</param>
            <returns>Массив со значениями спектра сигнала</returns>
        </member>
        <member name="M:AI.Furie.fft(AI.Vector)">
            <summary>
            Быстрое преобразование Фурье(БПФ)
            </summary>
            <param name="inp">Входной вектор</param>
        </member>
        <member name="M:AI.Furie.ifft1(AI.ComplexVector)">
            <summary>
            Возвращает комплексный вектор спектра сигнала
            </summary>
            <param name="inp">Массив значений сигнала. Количество значений должно быть степенью 2</param>
            <returns>Массив со значениями спектра сигнала</returns>
        </member>
        <member name="M:AI.Furie.ifft(AI.ComplexVector)">
            <summary>
            ОБПФ
            </summary>
            <param name="A">Входной вектор</param>
        </member>
        <member name="M:AI.Furie.ifft(AI.Vector)">
            <summary>
            ОБПФ
            </summary>
            <param name="A">Входной вектор</param>
        </member>
        <member name="M:AI.Furie.DPF(AI.Vector)">
            <summary>
            Дискретное преобразование Фурье
            </summary>
            <param name="x">Входной действительный вектор</param>
        </member>
        <member name="M:AI.Furie.DPF(AI.ComplexVector)">
            <summary>
            Дискретное преобразование Фурье
            </summary>
            <param name="x">Входной комплесный вектор</param>
        </member>
        <member name="M:AI.Furie.ODPF(AI.Vector)">
            <summary>
            Обратное дискретное преобразование Фурье
            </summary>
            <param name="x">Входной действительный вектор</param>
        </member>
        <member name="M:AI.Furie.ODPF(AI.ComplexVector)">
            <summary>
            Обратное дискретное преобразование Фурье
            </summary>
            <param name="x">Входной действительный вектор</param>
        </member>
        <member name="M:AI.Furie.TimeFrTransform(AI.Vector,System.Int32)">
            <summary>
            Чачтотно-временное преобразование
            </summary>
            <param name="vect">Вектор</param>
            <param name="lenFr">Размер фрейма</param>
        </member>
        <member name="T:AI.WindowForFFT">
            <summary>
            Оконные ф-ии БПФ
            </summary>
        </member>
        <member name="M:AI.WindowForFFT.HannWindow(System.Int32)">
            <summary>
            Окно ханна дает уровень боковых лепестков -31.5 db
            </summary>
            <param name="windowSize">Размер окна</param>
        </member>
        <member name="M:AI.WindowForFFT.HammingWindow(System.Int32)">
            <summary>
            Окно Хэмминга дает уровень боковых лепестков -42 db
            </summary>
            <param name="windowSize">Размер окна</param>
        </member>
        <member name="M:AI.WindowForFFT.RectWindow(System.Int32)">
            <summary>
            Прямоугольное окно дает уровень боковых лепестков -13 db
            </summary>
            <param name="windowSize">Размер окна</param>
        </member>
        <member name="M:AI.WindowForFFT.BlackmanWindow(System.Int32)">
            <summary>
            Окно Блэкмана дает уровень боковых лепестков -58 db
            </summary>
            <param name="windowSize">Размер окна</param>
        </member>
        <member name="T:AI.AlgorithmAnalysis.Metrics">
            <summary>
            Метрики качества
            </summary>
        </member>
        <member name="M:AI.AlgorithmAnalysis.Metrics.Pressicion(AI.ML.Classifiers.IClassifier,AI.ML.Datasets.VectorIntDataset,System.Int32)">
            <summary>
            Точности по классам
            </summary>
            <param name="classifier">Классификатор</param>
            <param name="vectorClasses">Датасет</param>
            <param name="classes">число классов</param>
        </member>
        <member name="M:AI.AlgorithmAnalysis.Metrics.PressicionMean(AI.ML.Classifiers.IClassifier,AI.ML.Datasets.VectorIntDataset,System.Int32)">
            <summary>
            Средняя точность
            </summary>
            <param name="classifier">Классификатор</param>
            <param name="vectorClasses">Датасет</param>
            <param name="classes">число классов</param>
        </member>
        <member name="M:AI.AlgorithmAnalysis.Metrics.PressicionMatrix(AI.ML.Classifiers.IClassifier,AI.ML.Datasets.VectorIntDataset,System.Int32)">
            <summary>
            Матрица точностей(перепутывания)
            </summary>
            <param name="classifier">Классификатор</param>
            <param name="vectorClasses">Датасет</param>
            <param name="classes">число классов</param>
        </member>
        <member name="T:AI.ML.Classifiers.StructClassCorr">
            <summary>
            Структура для хранения класса
            </summary>
        </member>
        <member name="F:AI.ML.Classifiers.StructClassCorr._strName">
            <summary>
            Имя класса
            </summary>
        </member>
        <member name="F:AI.ML.Classifiers.StructClassCorr._centGiperSfer">
            <summary>
            Центр гиперсферы
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.StructClassCorr.Probability">
            <summary>
            Вероятность принадлежности
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.StructClassCorr.StrName">
            <summary>
            Индекс класса
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.StructClassCorr.CentGiperSfer">
            <summary>
            Центр гиперсферы
            </summary>
        </member>
        <member name="T:AI.ML.Classifiers.StructClassesCorr">
            <summary>
            Структура классификатора
            </summary>
        </member>
        <member name="F:AI.ML.Classifiers.StructClassesCorr._classes">
            <summary>
            Список классов
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.StructClassesCorr.Classes">
            <summary>
            Список классов
            </summary>
        </member>
        <member name="T:AI.ML.Classifiers.CorrelationClassifier">
            <summary>
            Классификатор
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.CorrelationClassifier.Classes">
            <summary>
            Классы
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.#ctor">
            <summary>
            Корреляционный классификатор
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.#ctor(System.String)">
            <summary>
            Классификатор
            </summary>
            <param name="path">Путь до файла</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.#ctor(AI.ML.Classifiers.StructClassesCorr)">
            <summary>
            Классификатор
            </summary>
            <param name="classifikator"> Коллекция классов</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.CorrelationMetric(AI.Vector,AI.Vector)">
            <summary>
            Корреляционная метрика
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй вектор</param>
            <returns>Коэффициент корреляции нормированный [0;1]</returns>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.GetCentr(AI.Vector[])">
            <summary>
            Поиск центра класса
            </summary>
            <param name="vectors">Точки класса</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.Recognition(AI.Vector[])">
            <summary>
            Распознавание набора векторов
            </summary>
            <param name="vects">Вектора</param>
            <returns>Вектор меток</returns>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.Teach1(AI.Vector[],System.Int32)">
            <summary>
            Обучение одного элеменнта класса
            </summary>
            <param name="tDataset">Выборка</param>
            <param name="numClass">Имя класса</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.AddClass1(AI.Vector[],System.Int32)">
            <summary>
            Добавление класса в классификатор
            </summary>
            <param name="tDataset">Выборка</param>
            <param name="numClass">Имя класса</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.AddClass(AI.Vector[],System.Int32)">
            <summary>
            Добавление класса в классификатор
            </summary>
            <param name="tDataset">Выборка</param>
            <param name="numClass">Имя класса</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.Save(System.String)">
            <summary>
            Сохранение классификатора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.Open(System.String)">
            <summary>
            Загрузка классификатора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.RecognizeVectorStruct(AI.Vector)">
            <summary>
            Распознавание
            </summary>
            <param name="inp">Вектор который надо распознать</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.AddClass(AI.Vector,System.Int32)">
            <summary>
            Добавление класса
            </summary>
            <param name="data">Центральный вектор</param>
            <param name="num">Индекс класса</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.Recognize(AI.Vector)">
            <summary>
            Распознавание вектора
            </summary>
            <param name="inp">Вход</param>
            <returns>Индекс класса</returns>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.RecognizeVector(AI.Vector)">
            <summary>
            Распознавание
            </summary>
            <param name="inp">Вектор который надо распознать</param>
        </member>
        <member name="T:AI.ML.Classifiers.IClassifier">
            <summary>
            Интерфейс для работы классификаторов
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.IClassifier.AddClass(AI.Vector,System.Int32)">
            <summary>
            Добавление класса
            </summary>
            <param name="data">"Вектор</param>
            <param name="nameClass">Номер класса</param>
        </member>
        <member name="M:AI.ML.Classifiers.IClassifier.Save(System.String)">
            <summary>
            Сохранение классификатора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Classifiers.IClassifier.Open(System.String)">
            <summary>
            Загрузка классификатора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Classifiers.IClassifier.Recognize(AI.Vector)">
            <summary>
            Распознавание
            </summary>
            <param name="inp">Вектор который надо распознать</param>
        </member>
        <member name="M:AI.ML.Classifiers.IClassifier.RecognizeVector(AI.Vector)">
            <summary>
            Распознавание
            </summary>
            <param name="inp">Вектор который надо распознать</param>
        </member>
        <member name="T:AI.ML.Classifiers.kNNCl">
            <summary>
            Классификатор (метод k-ближайших соседей) эффективный метод классификации
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.kNNCl.K">
            <summary>
            Число соседей
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.kNNCl.H">
            <summary>
            Ширина окна
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.kNNCl.FixedH">
            <summary>
            Фиксирована ли ширина
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.kNNCl.IsParsenMethod">
            <summary>
            Используется ли окно Парзена
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.kNNCl.KernelParsenWindow">
            <summary>
            Ядро окна Парзена
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.kNNCl.Dist">
            <summary>
            Функция растояния
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.kNNCl.Classes">
            <summary>
            Массив классов
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.kNNCl.#ctor">
            <summary>
            Классификатор (Метод ближайшего соседа)
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.kNNCl.#ctor(AI.ML.Datasets.VectorIntDataset)">
            <summary>
            Классификатор (Метод ближайшего соседа)
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.kNNCl.GetKNN(System.String)">
            <summary>
            Загрузка из csv файла (признаки;метка_класса)
            </summary>
            <param name="pathToEtallonClassCsv">Путь до файла</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Classifiers.kNNCl.RbfK(System.Double)">
            <summary>
            Радиально-базисное ядро для окна Парзена
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Classifiers.kNNCl.#ctor(System.String,System.Int32)">
            <summary>
            Классификатор (Метод ближайшего соседа)
            </summary>
            <param name="path">Путь до файла</param>
            <param name="n">Число классов</param>
        </member>
        <member name="M:AI.ML.Classifiers.kNNCl.#ctor(AI.ML.Classifiers.StructClasses)">
            <summary>
            Классификатор (Метод ближайшего соседа)
            </summary>
            <param name="classifikator"> Коллекция классов</param>
        </member>
        <member name="M:AI.ML.Classifiers.kNNCl.Save(System.String)">
            <summary>
            Сохранение классификатора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Classifiers.kNNCl.Open(System.String)">
            <summary>
            Загрузка классификатора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Classifiers.kNNCl.ToVector(System.Int32)">
            <summary>
            Перевод в вектор
            </summary>
            <param name="i">Индекс</param>
        </member>
        <member name="M:AI.ML.Classifiers.kNNCl.Rang(AI.Vector)">
            <summary>
            Ранжирование
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.kNNCl.GetN">
            <summary>
            Получение числа классов
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Classifiers.kNNCl.Recognize(AI.Vector)">
            <summary>
            Распознавание
            </summary>
            <param name="inp">Вектор который надо распознать</param>
        </member>
        <member name="M:AI.ML.Classifiers.kNNCl.AddClass(AI.Vector,System.Int32)">
            <summary>
            Добавление класса
            </summary>
            <param name="tData">Центральный вектор</param>
            <param name="num">Индекс класса</param>
        </member>
        <member name="M:AI.ML.Classifiers.kNNCl.RecognizeVector(AI.Vector)">
            <summary>
            Возращает вектор, его длинна - число классов, на номере нужного класса стоит 1
            </summary>
            <param name="inp">Вектор входа</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Classifiers.kNNCl.RecognizeVectorMax(AI.Vector)">
            <summary>
            Возращает вектор, его длинна - число классов, на номере нужного класса стоит 1
            </summary>
            <param name="inp">Вектор входа</param>
            <returns></returns>
        </member>
        <member name="T:AI.ML.Classifiers.StructClass">
            <summary>
            Структура для хранения класса
            </summary>
        </member>
        <member name="F:AI.ML.Classifiers.StructClass._strName">
            <summary>
            Имя класса
            </summary>
        </member>
        <member name="F:AI.ML.Classifiers.StructClass._centGiperSfer">
            <summary>
            Центр гиперсферы
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.StructClass.NumCl">
            <summary>
            Имя класса
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.StructClass.CentGiperSfer">
            <summary>
            Центр гиперсферы
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.StructClass.R">
            <summary>
            Расстояние
            </summary>
        </member>
        <member name="T:AI.ML.Classifiers.StructClasses">
            <summary>
            Структура классификатора
            </summary>
        </member>
        <member name="F:AI.ML.Classifiers.StructClasses._classes">
            <summary>
            Коллекция классов
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.StructClasses.Classes">
            <summary>
            Список классов
            </summary>
        </member>
        <member name="T:AI.ML.Classifiers.NN">
            <summary>
            Классификатор (метод ближайшего соседа) простейший и довольно эффективный метод классификации
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.NN.Classes">
            <summary>
            Массив классов
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.NN.#ctor">
            <summary>
            Классификатор (Метод ближайшего соседа)
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.NN.#ctor(System.String)">
            <summary>
            Классификатор (Метод ближайшего соседа)
            </summary>
            <param name="path">Путь до файла</param>
        </member>
        <member name="M:AI.ML.Classifiers.NN.#ctor(AI.ML.Classifiers.StructClasses)">
            <summary>
            Классификатор (Метод ближайшего соседа)
            </summary>
            <param name="classifikator"> Коллекция классов</param>
        </member>
        <member name="M:AI.ML.Classifiers.NN.GetCentr(AI.Vector[])">
            <summary>
            Поиск центра класса
            </summary>
            <param name="vectors">Точки класса</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Classifiers.NN.Teach1(AI.Vector[],System.Int32)">
            <summary>
            Обучение одного элеменнта класса
            </summary>
            <param name="tDataset">Выборка</param>
            <param name="nameClass">Индекс класса</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Classifiers.NN.AddClass1(AI.Vector[],System.Int32)">
            <summary>
            Добавление класса в классификатор
            </summary>
            <param name="tDataset">Выборка</param>
            <param name="numClass">Номер класса</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Classifiers.NN.AddClass(AI.Vector[],System.Int32)">
            <summary>
            Добавление класса в классификатор
            </summary>
            <param name="tDataset">Выборка</param>
            <param name="numClass">Имя класса</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Classifiers.NN.Save(System.String)">
            <summary>
            Сохранение классификатора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Classifiers.NN.Open(System.String)">
            <summary>
            Загрузка классификатора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Classifiers.NN.Recognize(AI.Vector)">
            <summary>
            Распознавание
            </summary>
            <param name="inp">Вектор который надо распознать</param>
        </member>
        <member name="M:AI.ML.Classifiers.NN.AddClass(AI.Vector,System.Int32)">
            <summary>
            Добавление класса
            </summary>
            <param name="tData">Центральный вектор</param>
            <param name="num">Индекс класса</param>
        </member>
        <member name="M:AI.ML.Classifiers.NN.RecognizeVector(AI.Vector)">
            <summary>
            Возращает вектор, его длинна - число классов, на номере нужного класса стоит 1
            </summary>
            <param name="inp">Вектор входа</param>
            <returns></returns>
        </member>
        <member name="T:AI.ML.Datasets.ExtensionOfFeatureSpace">
            <summary>
            Расширение пространства признаков
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.Polinomial(System.Double,System.Int32)">
            <summary>
            Раширение пространства признаков полиномиальной ф-ей
            </summary>
            <param name="x">Вход</param>
            <param name="n">степень полинома</param>
            <returns>Новый вектор</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.Polinomial(AI.Vector,System.Int32)">
            <summary>
            Раширение пространства признаков полиномиальной ф-ей
            </summary>
            <param name="inp">Вход</param>
            <param name="n">степень полинома</param>
            <returns>Новый вектор</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.Cos(System.Double,System.Int32)">
            <summary>
            Раширение пространства признаков косинусами
            </summary>
            <param name="x">Вход</param>
            <param name="n">Число гармоник</param>
            <returns>Новый вектор</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.Sin(System.Double,System.Int32)">
            <summary>
            Раширение пространства признаков синусами 
            </summary>
            <param name="x">Вход</param>
            <param name="n">Число гармоник</param>
            <returns>Новый вектор</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.SinCos(System.Double,System.Int32)">
            <summary>
            Раширение пространства признаков синусами и косинусами
            </summary>
            <param name="x">Вход</param>
            <param name="n">Число гармоник</param>
            <returns>Новый вектор</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.Cos(AI.Vector,System.Int32)">
            <summary>
            Раширение пространства признаков косинусами
            </summary>
            <param name="inp">Вход</param>
            <param name="n">Число гармоник</param>
            <returns>Новый вектор</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.PoliCos(AI.Vector,System.Int32,System.Int32)">
            <summary>
            Расширение пространства с помощью полиномиальных ф-й и потом косинусов
            </summary>
            <param name="x">Вход</param>
            <param name="nPolinom">Степень полинома</param>
            <param name="nCos">Кол-во косинусов</param>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.PoliCos(System.Double,System.Int32,System.Int32)">
            <summary>
            Расширение пространства с помощью полиномиальных ф-й и потом косинусов
            </summary>
            <param name="x">Вход</param>
            <param name="nPolinom">Степень полинома</param>
            <param name="nCos">Кол-во косинусов</param>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.GaussRBF(System.Double,AI.Vector,System.Double)">
            <summary>
            Радиально-базисная ф-я Гаусса
            </summary>
            <param name="x">Вход</param>
            <param name="centers">Массив центров</param>
            <param name="std">СКО</param>
            <returns>Вектор значений от 0 до 1</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.Sinc(System.Double,AI.Vector)">
            <summary>
            Синус Котельникова sin(x)/x
            </summary>
            <param name="x"></param>
            <param name="centers"></param>
            <returns></returns>
        </member>
        <member name="T:AI.ML.Datasets.VectorClass">
            <summary>
            Представляет структуру вектор-класс
            </summary>
        </member>
        <member name="P:AI.ML.Datasets.VectorClass.InpVector">
            <summary>
            Вектор для классификации
            </summary>
        </member>
        <member name="P:AI.ML.Datasets.VectorClass.ClassMark">
            <summary>
            Метка класса
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.VectorClass.#ctor(AI.Vector,System.Int32)">
            <summary>
            Представляет структуру вектор-класс
            </summary>
            <param name="vector">Вектор</param>
            <param name="mark">Метка класса</param>
        </member>
        <member name="T:AI.ML.Datasets.VectorIntDataset">
            <summary>
            Датасет
            </summary>
        </member>
        <member name="F:AI.ML.Datasets.VectorIntDataset.mean">
            <summary>
            Средний вектор
            </summary>
        </member>
        <member name="F:AI.ML.Datasets.VectorIntDataset.disp">
            <summary>
            Дисперсия по выборке
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.#ctor(System.String)">
            <summary>
            Загрузка датасета из файла
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.#ctor">
            <summary>
            Датасет
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.GetRandomData">
            <summary>
            Случайный представитель датасета
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.Save(System.String)">
            <summary>
            Сохранение датасета
            </summary>
            <param name="path">Путь до датасета</param>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.CorrMatrFeatures">
            <summary>
            Корреляционная матрица признаков
            </summary>
            <returns>Нормированная кор. матрица</returns>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.DispMeanResult">
            <summary>
            Получение вектора дисперсии и среднего вектора
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.Normalise">
            <summary>
            Нормализация датасета
            </summary>
            <returns>Датасет</returns>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.GetDatasetDelSim(System.Double)">
            <summary>
            Удаление похожих векторов из разных классов
            </summary>
            <param name="simCoef">Коэффициент схожести</param>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.CsvToVid(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.CsvToVid(System.String,System.Int32,System.Char)">
            <summary>
            
            </summary>
        </member>
        <member name="T:AI.ML.Datasets.DataSetNoReccurent">
            <summary>
            Датасет для нерекуррентных нейросетей
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.DataSetNoReccurent.#ctor(AI.ML.NeuralNetwork.CoreNNW.NNValue[],AI.ML.NeuralNetwork.CoreNNW.NNValue[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Датасет для нерекуррентных нейросетей
            </summary>
            <param name="inputs">Входы</param>
            <param name="outputs">Выходы</param>
            <param name="los">Функция ошибки</param>
            <param name="valSplit">Какая часть выборки будет использована при валидации</param>
        </member>
        <member name="M:AI.ML.Datasets.DataSetNoReccurent.#ctor(AI.Vector[],AI.Vector[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Датасет для нерекуррентных нейросетей
            </summary>
            <param name="inputs">Входы</param>
            <param name="outputs">Выходы</param>
            <param name="los">Функция ошибки</param>
            <param name="valSplit">Какая часть выборки будет использована при валидации</param>
        </member>
        <member name="M:AI.ML.Datasets.DataSetNoReccurent.#ctor(AI.Matrix[],AI.Matrix[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Датасет для нерекуррентных нейросетей
            </summary>
            <param name="inputs">Входы</param>
            <param name="outputs">Выходы</param>
            <param name="los">Функция ошибки</param>
            <param name="valSplit">Какая часть выборки будет использована при валидации</param>
        </member>
        <member name="M:AI.ML.Datasets.DataSetNoReccurent.#ctor(AI.Tensor[],AI.Tensor[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Датасет для нерекуррентных нейросетей
            </summary>
            <param name="inputs">Входы</param>
            <param name="outputs">Выходы</param>
            <param name="los">Функция ошибки</param>
            <param name="valSplit">Какая часть выборки будет использована при валидации</param>
        </member>
        <member name="M:AI.ML.Datasets.DataSetNoReccurent.#ctor(AI.Vector[],AI.Matrix[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Датасет для нерекуррентных нейросетей
            </summary>
            <param name="inputs">Входы</param>
            <param name="outputs">Выходы</param>
            <param name="los">Функция ошибки</param>
            <param name="valSplit">Какая часть выборки будет использована при валидации</param>
        </member>
        <member name="M:AI.ML.Datasets.DataSetNoReccurent.#ctor(AI.Tensor[],AI.Matrix[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Датасет для нерекуррентных нейросетей
            </summary>
            <param name="inputs">Входы</param>
            <param name="outputs">Выходы</param>
            <param name="los">Функция ошибки</param>
            <param name="valSplit">Какая часть выборки будет использована при валидации</param>
        </member>
        <member name="M:AI.ML.Datasets.DataSetNoReccurent.#ctor(AI.Matrix[],AI.Tensor[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Датасет для нерекуррентных нейросетей
            </summary>
            <param name="inputs">Входы</param>
            <param name="outputs">Выходы</param>
            <param name="los">Функция ошибки</param>
            <param name="valSplit">Какая часть выборки будет использована при валидации</param>
        </member>
        <member name="M:AI.ML.Datasets.DataSetNoReccurent.#ctor(AI.Matrix[],AI.Vector[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Датасет для нерекуррентных нейросетей
            </summary>
            <param name="inputs">Входы</param>
            <param name="outputs">Выходы</param>
            <param name="los">Функция ошибки</param>
            <param name="valSplit">Какая часть выборки будет использована при валидации</param>
        </member>
        <member name="M:AI.ML.Datasets.DataSetNoReccurent.#ctor(AI.Vector[],AI.Tensor[],AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss,System.Double)">
            <summary>
            Датасет для нерекуррентных нейросетей
            </summary>
            <param name="inputs">Входы</param>
            <param name="outputs">Выходы</param>
            <param name="los">Функция ошибки</param>
            <param name="valSplit">Какая часть выборки будет использована при валидации</param>
        </member>
        <member name="T:AI.ML.Genetic.GeneticCore.Cell">
            <summary>
            Клетка
            </summary>
        </member>
        <member name="P:AI.ML.Genetic.GeneticCore.Cell.Score">
            <summary>
            Набранные очки
            </summary>
        </member>
        <member name="P:AI.ML.Genetic.GeneticCore.Cell.Parametrs">
            <summary>
            Параметры (хромосомы)
            </summary>
        </member>
        <member name="P:AI.ML.Genetic.GeneticCore.Cell.Function">
            <summary>
            Полезная функция
            </summary>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Cell.#ctor(System.Int32,System.Func{AI.Vector,AI.Vector,AI.Vector},System.Random,System.Double,System.Double)">
            <summary>
            Клетка
            </summary>
            <param name="parametrsCount">Число параметров</param>
            <param name="function">Функция</param>
            <param name="rnd">ГСПЧ</param>
            <param name="valDown">Нижняя граница распределения</param>
            <param name="valUp">Верхняя граница распределения</param>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Cell.Output(AI.Vector)">
            <summary>
            Выход модели
            </summary>
            <param name="inpVector">Входной вектор</param>
        </member>
        <member name="T:AI.ML.Genetic.GeneticCore.Population">
            <summary>
            Популяция клеток
            </summary>
        </member>
        <member name="F:AI.ML.Genetic.GeneticCore.Population.mutProb">
            <summary>
            Вероятность мутации
            </summary>
        </member>
        <member name="F:AI.ML.Genetic.GeneticCore.Population.k">
            <summary>
            Точка кросоверинга 
            </summary>
        </member>
        <member name="P:AI.ML.Genetic.GeneticCore.Population.LiderCount">
            <summary>
            Число лидеров для размножения
            </summary>
        </member>
        <member name="P:AI.ML.Genetic.GeneticCore.Population.MutationValue">
            <summary>
            Величина мутации
            </summary>
        </member>
        <member name="P:AI.ML.Genetic.GeneticCore.Population.DValueUp">
            <summary>
            Верхняя граница поиска
            </summary>
        </member>
        <member name="P:AI.ML.Genetic.GeneticCore.Population.DValueDown">
            <summary>
            Нижняя граница поиска
            </summary>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Population.#ctor(System.Int32,System.Int32,System.Func{AI.Vector,AI.Vector,AI.Vector},AI.Vector[],AI.Vector[],System.Double,System.Double)">
            <summary>
            Популяция
            </summary>
            <param name="countCell">Число клеток</param>
            <param name="countParam">Число параметров</param>
            <param name="function">Полезная функция</param>
            <param name="inp">Векторы входа</param>
            <param name="outp">Векторы выхода</param>
            <param name="valDown">Нижняя граница поиска</param>
            <param name="valUp">Верхняя граница поиска</param>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Population.#ctor(System.Int32,System.Int32,System.Func{AI.Vector,AI.Vector,AI.Vector},AI.Vector,AI.Vector,System.Double,System.Double)">
            <summary>
            Популяция
            </summary>
            <param name="countCell">Число клеток</param>
            <param name="countParam">Число параметров</param>
            <param name="function">Полезная функция</param>
            <param name="inp">Вектор входа</param>
            <param name="outp">Вектор выхода</param>
            <param name="valDown">Нижняя граница поиска</param>
            <param name="valUp">Верхняя граница поиска</param>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Population.CellOut(AI.Vector,System.Int32)">
            <summary>
             Проход функции от одной переменной
            </summary>
            <param name="inp">Вектор входов</param>
            <param name="indCell">Номер клетки</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Population.Epoch(System.Int32)">
            <summary>
            Эпоха жизни клеток
            </summary>
            <param name="count">Число детей</param>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Population.Score(AI.Vector,AI.Vector)">
            <summary>
            Очки на одном примере
            </summary>
            <param name="outp">Выход модели</param>
            <param name="targ">Целевое значение</param>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Population.SortCells">
            <summary>
            Сортировка клеток
            </summary>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Population.Mutation(AI.ML.Genetic.GeneticCore.Cell)">
            <summary>
            Мутация клетки
            </summary>
            <param name="input">Исходная клетка</param>
        </member>
        <member name="M:AI.ML.Genetic.GeneticCore.Population.Cross(AI.ML.Genetic.GeneticCore.Cell,AI.ML.Genetic.GeneticCore.Cell)">
            <summary>
            Скрещивание клеток
            </summary>
            <param name="par1">Первый родитель</param>
            <param name="par2">Второй родитель</param>
        </member>
        <member name="T:AI.ML.GradientDecentDataset">
            <summary>
            Класс для хранения обучающей выборки для градиентного спуска
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecentDataset.X">
            <summary>
            Набор векторов "Х"
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecentDataset.Y">
            <summary>
            Набор векторов "Y"
            </summary>
        </member>
        <member name="M:AI.ML.GradientDecentDataset.#ctor">
            <summary>
            Создает экземпляр GradientDecentDataset
            </summary>
        </member>
        <member name="M:AI.ML.GradientDecentDataset.#ctor(System.Collections.Generic.List{AI.Vector},System.Collections.Generic.List{AI.Vector})">
            <summary>
            Создает экземпляр GradientDecentDataset
            </summary>
            <param name="xVector">Набор векторов "Х"</param>
            <param name="yVector">Набор векторов "Y"</param>
        </member>
        <member name="M:AI.ML.GradientDecentDataset.Add(AI.Vector,AI.Vector)">
            <summary>
            Добавляет данные в обучающую выборку
            </summary>
            <param name="x">Вектор х</param>
            <param name="y">Вектор у</param>
        </member>
        <member name="M:AI.ML.GradientDecentDataset.Add(System.Double,System.Double)">
            <summary>
            Добавляет данные в обучающую выборку
            </summary>
            <param name="x">переменная х</param>
            <param name="y">переменная у</param>
        </member>
        <member name="M:AI.ML.GradientDecentDataset.Add(AI.Vector,System.Double)">
            <summary>
            Добавляет данные в обучающую выборку
            </summary>
            <param name="x">Вектор х</param>
            <param name="y">Переменная у</param>
        </member>
        <member name="M:AI.ML.GradientDecentDataset.Clear">
            <summary>
            Очистка данных
            </summary>
        </member>
        <member name="T:AI.ML.GradientDecent">
            <summary>
            Градиентный спуск
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecent.Step">
            <summary>
            Шаг для вычисления частных производных и градиента
            (чем он меньше, тем точнее вычисление частных производных)
            по умолчанию шаг 1e-7
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecent.GdDataset">
            <summary>
            Обучающая выборка
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecent.Parammetrs">
            <summary>
            Вектор оптимизируемых парамметров
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecent.Function">
            <summary>
            Целевая функция типа:
            double SF(Vector_парамметры, ListVector_обучающая_выборка_Х, ListVector_обучающая_выборка_Y)
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecent.Norm">
            <summary>
            Норма обучения, по умолчанию 0.002
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecent.Itterations">
            <summary>
            Кол-во иттераций, по умолчанию 30
            </summary>
        </member>
        <member name="M:AI.ML.GradientDecent.#ctor(AI.Vector,System.Func{AI.Vector,System.Collections.Generic.List{AI.Vector},System.Collections.Generic.List{AI.Vector},System.Double},AI.ML.GradientDecentDataset)">
            <summary>
            Создание объекта Градиентный спуск
            </summary>
            <param name="param">Вектор оптимизируемых парамметров</param>
            <param name="function">Целевая функция типа:
            double SF(Vector_парамметры, ListVector_обучающая_выборка_Х, ListVector_обучающая_выборка_Y)</param>
            <param name="gdd">Обучающая выборка</param>
        </member>
        <member name="M:AI.ML.GradientDecent.DecentIter">
            <summary>
            Одна иттерация спуска
            </summary>
        </member>
        <member name="M:AI.ML.GradientDecent.Decent">
            <summary>
            Синхронное выполнение градиентного спуска
            </summary>
        </member>
        <member name="M:AI.ML.GradientDecent.AsyncDecent">
            <summary>
            Асинхронное выполнение градиентного спуска
            </summary>
        </member>
        <member name="M:AI.ML.GradientDecent.PartialDerivatives(AI.Vector,System.Collections.Generic.List{AI.Vector},System.Collections.Generic.List{AI.Vector},System.Func{AI.Vector,System.Collections.Generic.List{AI.Vector},System.Collections.Generic.List{AI.Vector},System.Double})">
            <summary>
            Частные производные
            </summary>
            <param name="param">Начальный вектор параметров(точка)</param>
            <param name="function">Целевая функция(принимает вектор параметров, выдает результирующее значение)</param>
             <param name="inp"> Вектора входа</param>
              <param name="ideal"> Идеальные выходы</param>
            <returns>Возвращает вектор частных производных</returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation">
            <summary>
            Интерфейс актив. функций
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation.Numerator">
            <summary>
            Числитель инициализатора
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Прямой проход
            </summary>
            <param name="x">Тензор аргумента</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Обратный проход
            </summary>
            <param name="x">Тензор аргумента</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.LinearUnit">
            <summary>
            Линейная активационная функция
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.LinearUnit.Numerator">
            <summary>
            Числитель для инициализатора
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.LinearUnit.#ctor">
            <summary>
            Линейная активационная функция
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.LinearUnit.Forward(System.Double)">
            <summary>
            Прямой проход
            </summary>
            <param name="x">Аргумента</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.LinearUnit.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Прямой проход
            </summary>
            <param name="x">Тензор аргумента</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.LinearUnit.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Обратный проход(производная)
            </summary>
            <param name="x">Тензор аргумента</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.LinearUnit.ToString">
            <summary>
            Имя активации
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.ReLU">
            <summary>
            Активация ReLU
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.ReLU.Numerator">
            <summary>
            Числитель для инициализатора
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.ReLU.#ctor">
            <summary>
            Активация ReLU
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.ReLU.#ctor(System.Double)">
            <summary>
            Активация ReLU
            </summary>
            <param name="slope">Наклон при x меньше 0 </param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.ReLU.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Прямой проход
            </summary>
            <param name="x">Тензор входа</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.ReLU.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Обратный проход
            </summary>
            <param name="x">Тензор входа</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.ReLU.ToString">
            <summary>
            Имя актив ф.-ии
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidUnit">
            <summary>
            Сигмоидальная функция активации
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidUnit.Numerator">
            <summary>
            Числитель для инициализатора
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidUnit.#ctor">
            <summary>
            Сигмоидальная функция активации
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidUnit.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Прямой проход
            </summary>
            <param name="x">Тензор аргумента</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidUnit.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Обратный проход(производная)
            </summary>
            <param name="x">Тензор аргумента</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SigmoidUnit.ToString">
            <summary>
            Имя функции
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.SoftmaxUnit">
            <summary>
            Софтмакс активация
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.SoftmaxUnit.Numerator">
            <summary>
            Числитель для инициализатора
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SoftmaxUnit.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Прямой проход
            </summary>
            <param name="x">Тензор входа</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SoftmaxUnit.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Обратный проход
            </summary>
            <param name="x">Тензор входа</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.SoftmaxUnit.ToString">
            <summary>
            Имя функции активации
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Activations.TanhUnit">
            <summary>
            Активационная функция гиперболшический тангенс
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Activations.TanhUnit.Numerator">
            <summary>
            Числитель для инициализатора
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.TanhUnit.#ctor">
            <summary>
            Активационная функция гиперболшический тангенс
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.TanhUnit.Forward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Прямой проход
            </summary>
            <param name="x">Тензор входа</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Activations.TanhUnit.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Обратный проход
            </summary>
            <param name="x">Тензор входа</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSequence">
            <summary>
            Данные последовательностей (для рекуррентных сетей)
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSequence.Steps">
            <summary>
            Последовательность шагов
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSequence.#ctor">
            <summary>
            Данные последовательностей (для рекуррентных сетей)
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSequence.#ctor(System.Collections.Generic.List{AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep})">
            <summary>
            Данные последовательностей (для рекуррентных сетей)
            </summary>
            <param name="steps">Коллекция шагов</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSet">
            <summary>
            Набор данных для обучения нейросети
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSet.InputShape">
            <summary>
            Входная размерность данных
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSet.OutputShape">
            <summary>
            Выходная размерность данных
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSet.LossFunction">
            <summary>
            Функция потерь
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSet.Training">
            <summary>
            Тренировочный датасет
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSet.Validation">
            <summary>
            Валидационный датасет
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSet.Testing">
            <summary>
            Тестовый датасет
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep">
            <summary>
            Шаг данных
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.Input">
            <summary>
            Тензор входа
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.TargetOutput">
            <summary>
            Тензор идеального значения
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor">
            <summary>
            Шаг данных
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(AI.Vector,AI.Vector)">
            <summary>
            Шаг данных
            </summary>
            <param name="input">Вход</param>
            <param name="targetOutput">Выход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(AI.Vector,AI.Matrix)">
            <summary>
            Шаг данных
            </summary>
            <param name="input">Вход</param>
            <param name="targetOutput">Выход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(AI.Vector,AI.Tensor)">
            <summary>
            Шаг данных
            </summary>
            <param name="input">Вход</param>
            <param name="targetOutput">Выход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(AI.Matrix,AI.Vector)">
            <summary>
            Шаг данных
            </summary>
            <param name="input">Вход</param>
            <param name="targetOutput">Выход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(AI.Matrix,AI.Tensor)">
            <summary>
            Шаг данных
            </summary>
            <param name="input">Вход</param>
            <param name="targetOutput">Выход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(AI.Matrix,AI.Matrix)">
            <summary>
            Шаг данных
            </summary>
            <param name="input">Вектор входа</param>
            <param name="targetOutput">Вектор выхода</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(AI.Tensor,AI.Vector)">
            <summary>
            Шаг данных
            </summary>
            <param name="input">Вход</param>
            <param name="targetOutput">Выход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(AI.Tensor,AI.Tensor)">
            <summary>
            Шаг данных
            </summary>
            <param name="input">Вход</param>
            <param name="targetOutput">Выход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(AI.Tensor,AI.Matrix)">
            <summary>
            Шаг данных
            </summary>
            <param name="input">Вход</param>
            <param name="targetOutput">Выход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(System.Double[],System.Double[])">
            <summary>
            Шаг данных
            </summary>
            <param name="input">Вход</param>
            <param name="targetOutput">Выход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(System.Double[])">
            <summary>
            Шаг данных
            </summary>
            <param name="input">Вектор входа</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Шаг данных
            </summary>
            <param name="input">Тензор входа</param>
            <param name="targetOutput">Тензор выхода</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Шаг данных
            </summary>
            <param name="input">Тензор входа</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(AI.Vector)">
            <summary>
            Шаг данных
            </summary>
            <param name="input">Вход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(AI.Matrix)">
            <summary>
            Шаг данных
            </summary>
            <param name="input">Вход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataStep.#ctor(AI.Tensor)">
            <summary>
            Шаг данных
            </summary>
            <param name="input">Вход</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Shape">
            <summary>
            Форма тензора
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Shape.H">
            <summary>
            Высота тензора
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Shape.W">
            <summary>
            Ширина тензора
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Shape.D">
            <summary>
            Глубина тензора
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Shape.Len">
            <summary>
            Число элементов
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Shape.#ctor">
            <summary>
            Форма тензора
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Shape.#ctor(System.Int32)">
            <summary>
            Форма тензора(создает форму высоты h, ширина 1, глубина 1)
            </summary>
            <param name="h">Высота</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Shape.#ctor(System.Int32,System.Int32)">
            <summary>
            Форма тензора(создает форму высоты h, ширина w, глубина 1)
            </summary>
            <param name="h">Высота</param>
            <param name="w">Ширина тензора</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Shape.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Форма тензора
            </summary>
            <param name="h">Высота</param>
            <param name="w">Ширина тензора</param>
            <param name="d">Глубина</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Shape.ReShape(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Shape)">
            <summary>
            Изменение 
            </summary>
            <param name="value"></param>
            <param name="newShape"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Shape.ToString">
            <summary>
            Суммаризация 
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.ILearningLayer">
            <summary>
            Слои с обучаемыми параметрами
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ILearningLayer.GetParameters">
            <summary>
            Получение тренируемых параметров
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.ILayer">
            <summary>
            Интерфейс слоя
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ILayer.InputShape">
            <summary>
            Входная размерность
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ILayer.OutputShape">
            <summary>
            Выходная размерность
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ILayer.TrainableParameters">
            <summary>
            Число обучаемых параметров
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ILayer.AddDenInSqrt">
            <summary>
            Добавлнение в знаменатель
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ILayer.Function">
            <summary>
            Функция активации
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ILayer.Activate(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Прямой проход
            </summary>
            <param name="input">Вход</param>
            <param name="g">Граф автодифференцирования</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ILayer.Generate(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Random)">
            <summary>
            Генерация весов
            </summary>
            <param name="inpShape">Входная размерность</param>
            <param name="random">Генератор случайных чисел</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.INetwork">
            <summary>
            Интерфейс нейронной сети
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.INetwork.InputShape">
            <summary>
            Размерность входа
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.INetwork.OutputShape">
            <summary>
            Размерность выхода
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.INetwork.TrainableParameters">
            <summary>
            Число обучаемых параметров
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.INetwork.Layers">
            <summary>
            Список слоев
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.INetwork.Activate(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Прямой проход
            </summary>
            <param name="input">Вход</param>
            <param name="g">Граф автодифференцирования</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.INetwork.GetParameters">
            <summary>
            Обучаемые параметры
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.ISavedLayer">
            <summary>
            Интерфейс сохраняемых слоев
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ISavedLayer.LayerToBts">
            <summary>
            Запись слоя в массив байт
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ISavedLayer.TypeLayer">
            <summary>
            Тип слоя
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ISavedLayer.TypeNonLin">
            <summary>
            Тип активации
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer">
            <summary>
            Сверточный слой НС
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.fs">
            <summary>
            Структура фильтров
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.StrideX">
            <summary>
            Шаг по оси X
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.StrideY">
            <summary>
            Шаг по оси Y
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.PaddingX">
            <summary>
            Pad по X
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.PaddingY">
            <summary>
            Pad по Y
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.IsSame">
            <summary>
            Сохраняется ли размерность входа
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.TrainableParameters">
            <summary>
            Число обучаемых парамметров
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.Numerator">
            <summary>
            Числитель инициализатора
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.AddDenInSqrt">
            <summary>
            Добавление значения в знаминатель нод корень при инициализации весов
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.Function">
            <summary>
            Функция активации
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.Bias">
            <summary>
            Веса смещения
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.Filters">
            <summary>
            Тензоры фильтров
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.InputShape">
            <summary>
            Входная размерность
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.OutputShape">
            <summary>
            Выходная размерность
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.TypeLayer">
            <summary>
            Тип слоя
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.TypeNonLin">
            <summary>
            Тип активации
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,AI.ML.NeuralNetwork.CoreNNW.Layers.FilterStruct,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation,System.Random)">
            <summary>
            Сверточный слой
            </summary>
            <param name="inputShape">Входная размерность</param>
            <param name="filterStruct">Структура фильтров</param>
            <param name="func">Функция активации</param>
            <param name="rnd">Генератор случайных чисел</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Layers.FilterStruct,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation)">
            <summary>
            Сверточный слой
            </summary>
            <param name="filterStruct">Структура фильтров</param>
            <param name="func">Функция активации</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation,System.Int32,System.Int32,System.Int32)">
            <summary>
            Сверточный слой
            </summary>
            <param name="func">Функция активации</param>
            <param name="count">Число фильтров</param>
            <param name="h">Высота фильтра</param>
            <param name="w">Ширина фильтра</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.GeneratorW(System.Random,System.Double)">
            <summary>
            Настройка инициализатора рандома
            </summary>
            <param name="random">Гспч</param>
            <param name="addDenumInSqrt">Добавление значение в подкоренное выражение в знаменатель</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.Activate(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Прямой проход сети
            </summary>
            <param name="input">Вход</param>
            <param name="g">Граф</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.Generate(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Random)">
            <summary>
            Генерация слоя НС
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.RestOutShape">
            <summary>
            Обновление размера выхода
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.ToString">
            <summary>
            Описание слоя
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.GetParameters">
            <summary>
            Получение тренируемых параметров
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.LayerToBts">
            <summary>
            Сохранение сверточного слоя в массив байт
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.ConvolutionLayer.LayerFromBts(System.Byte[],AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation)">
            <summary>
            Восстановление слоя из массива байт
            </summary>
            <param name="byteArray">Массив байт</param>
            <param name="nonlinearity">Нелинейная активация</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterStruct">
            <summary>
            Структура фильтра сверточной сети
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterStruct.FilterW">
            <summary>
            Ширина фильтра
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterStruct.FilterH">
            <summary>
            Высота фильтра
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterStruct.FilterCount">
            <summary>
            Число фильтров
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FilterStruct.Len">
            <summary>
            Произведение высоты на ширину и на число фильтров
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten">
            <summary>
            Слой который преобразует тензор в вектор
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.InputShape">
            <summary>
            Входная размерность
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.OutputShape">
            <summary>
            Выходная размерность
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.TrainableParameters">
            <summary>
            Число обучаемых параметров
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.AddDenInSqrt">
            <summary>
            Добавлнение в знаменатель
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.Function">
            <summary>
            Функция активации
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape)">
            <summary>
            Слой который преобразует тензор в вектор
            </summary>
            <param name="inputShape">Входная размерность</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Single)">
            <summary>
            Слой который преобразует тензор в вектор
            </summary>
            <param name="inputShape">Входная размерность</param>
            <param name="gain">Усиление градиента</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.#ctor">
            <summary>
            Слой который преобразует тензор в вектор
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.Activate(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Прямой проход
            </summary>
            <param name="input">Вход</param>
            <param name="g">Граф автодифференцирования</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.Generate(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Random)">
            <summary>
            Генерация весов
            </summary>
            <param name="inpShape">Входная размерность</param>
            <param name="random">Генератор случайных чисел</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Flatten.ToString">
            <summary>
            Описание слоя
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling">
            <summary>
            Макспуллинг
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling.InputShape">
            <summary>
            Входная размерность
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling.OutputShape">
            <summary>
            Выходная размерность
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling.TrainableParameters">
            <summary>
            Число обучаемых параметров
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling.AddDenInSqrt">
            <summary>
            Добавлнение в знаменатель
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling.Function">
            <summary>
            Функция активации
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Int32,System.Int32)">
            <summary>
            Макспуллинг
            </summary>
            <param name="inputShape">Размерность входа</param>
            <param name="h">Во сколько раз прорядить по высоте</param>
            <param name="w">Во сколько раз прорядить по ширине</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling.#ctor(System.Int32,System.Int32)">
            <summary>
            Макспуллинг (в стэке слоев) 
            </summary>
            <param name="h">Во сколько раз прорядить по высоте</param>
            <param name="w">Во сколько раз прорядить по ширине</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling.Activate(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Прямой проход
            </summary>
            <param name="input">Вход</param>
            <param name="g">Граф автодифференцирования</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling.Generate(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Random)">
            <summary>
            Генерация весов
            </summary>
            <param name="inpShape">Входная размерность</param>
            <param name="random">ГПСЧ</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.MaxPooling.ToString">
            <summary>
            Описание слоя
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.Upsampling2dBicibic">
            <summary>
            Upsampling с бикубической интерполяцией
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Upsampling2dBicibic.InputShape">
            <summary>
            Размерность входа
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Upsampling2dBicibic.OutputShape">
            <summary>
            Размерность выхода
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Upsampling2dBicibic.TrainableParameters">
            <summary>
            Число обучаемых параметров
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Upsampling2dBicibic.AddDenInSqrt">
            <summary>
            Добавление к знаменателю
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.Upsampling2dBicibic.Function">
            <summary>
            Функция активации
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Upsampling2dBicibic.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Int32,System.Int32)">
            <summary>
            Upsampling с бикубической интерполяцией
            </summary>
            <param name="inputShape">Входная размерность</param>
            <param name="h">Высота</param>
            <param name="w">Ширина</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Upsampling2dBicibic.#ctor(System.Int32,System.Int32)">
            <summary>
            Upsampling с бикубической интерполяцией
            </summary>
            <param name="h">Высота</param>
            <param name="w">Ширина</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Upsampling2dBicibic.Activate(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Прямой проход
            </summary>
            <param name="input">Вход</param>
            <param name="g">Граф</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Upsampling2dBicibic.Generate(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Random)">
            <summary>
            Генерация параметров
            </summary>
            <param name="inpShape">Входная размерность</param>
            <param name="random">ГПСЧ</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.Upsampling2dBicibic.ToString">
            <summary>
            Описание слоя
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer">
            <summary>
            Полносвязный слой
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.W">
            <summary>
            Матрица весов
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.Bias">
            <summary>
            Вектор смещения
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.Function">
            <summary>
            Функция активации
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.AddDenInSqrt">
            <summary>
            Добавлнение в знаменатель
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.TrainableParameters">
            <summary>
            Число обучаемых параметров
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.InputShape">
            <summary>
            Входная размерность
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.OutputShape">
            <summary>
            Выходная размерность
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.#ctor(System.Int32,System.Int32,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation,System.Random)">
            <summary>
            Полносвязный слой
            </summary>
            <param name="inputDimension">Число входов</param>
            <param name="outputDimension">Число выходов</param>
            <param name="f">Функция активации</param>
            <param name="rnd">Генератор случайных чисел</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Int32,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation,System.Random)">
            <summary>
            Полносвязный слой
            </summary>
            <param name="inputShape">Входная размерность</param>
            <param name="outputDimension">Число выходов</param>
            <param name="f">Функция активации</param>
            <param name="rnd">Генератор случайных чисел</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.#ctor(System.Int32,AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation)">
            <summary>
            Полносвязный слой
            </summary>
            <param name="outputDimension">Число выходов</param>
            <param name="f">Функция активации</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.Activate(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Прямой проход
            </summary>
            <param name="input">Вход</param>
            <param name="g">Граф автодифференцирования</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.ResetState">
            <summary>
            Сброс состояния
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.GetParameters">
            <summary>
            Получение тренируемых параметров
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.Generate(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Random)">
            <summary>
            Генерация весов
            </summary>
            <param name="inpShape">Входная размерность</param>
            <param name="random">Генератор случайных чисел</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.FeedForwardLayer.ToString">
            <summary>
            Описание слоя
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer">
            <summary>
            Линейный слой
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.TrainableParameters">
            <summary>
            Число обучаемых параметров
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.InputShape">
            <summary>
            Входная размерность
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.OutputShape">
            <summary>
            Выходная размерность
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.AddDenInSqrt">
            <summary>
            Добавлнение в знаменатель
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.Function">
            <summary>
            Функция активации
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.#ctor(System.Int32,System.Int32,System.Double,System.Random)">
            <summary>
            Линейный слой
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Int32,System.Double,System.Random)">
            <summary>
            Линейный слой
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.#ctor(System.Int32)">
            <summary>
            Линейный слой
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.Activate(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Прямой проход
            </summary>
            <param name="input">Вход</param>
            <param name="g">Граф автодифференцирования</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.ResetState">
            <summary>
            Сброс состояния(нужно для рекуррентных)
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.GetParameters">
            <summary>
            Получение тренируемых параметров
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.Generate(AI.ML.NeuralNetwork.CoreNNW.Shape,System.Random)">
            <summary>
            Генерация весов
            </summary>
            <param name="inpShape">Входная размерность</param>
            <param name="random">Генератор случайных чисел</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.LinearLayer.ToString">
            <summary>
            Описание слоя
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Layers.NNW">
            <summary>
            Класс нейронной сети
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.NNW.Layers">
            <summary>
            Список слоев сети
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.NNW.InputShape">
            <summary>
            Входная размерность
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.NNW.OutputShape">
            <summary>
            Выходная размерность
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Layers.NNW.TrainableParameters">
            <summary>
            Число обучаемых параметров
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.NNW.#ctor(System.Int32)">
            <summary>
            Класс нейронной сети
            </summary>
            <param name="seed">Сид генератора случ. чисел</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.NNW.#ctor(System.Collections.Generic.List{AI.ML.NeuralNetwork.CoreNNW.Layers.ILayer})">
            <summary>
            Класс нейронной сети
            </summary>
            <param name="layers">Список слоев</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.NNW.AddNewLayer(AI.ML.NeuralNetwork.CoreNNW.Layers.ILayer)">
            <summary>
            Добавление НОВОГО слоя в НС
            </summary>
            <param name="layer">Слой</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.NNW.AddNewLayer(AI.ML.NeuralNetwork.CoreNNW.Shape,AI.ML.NeuralNetwork.CoreNNW.Layers.ILayer)">
            <summary>
            Добавление НОВОГО слоя в НС
            </summary>
            <param name="inpShape">Размерность тензора входа</param>
            <param name="layer">Слой</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.NNW.Activate(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Прямой проход
            </summary>
            <param name="input">Вход</param>
            <param name="g">Граф автодифференцирования</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.NNW.GetParameters">
            <summary>
            Получение тренируемых параметров
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.NNW.ToString">
            <summary>
            Описание слоя
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.NNW.Save(System.String)">
            <summary>
            Сохранение нейросети
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Layers.NNW.Load(System.String)">
            <summary>
            Загрузка нейросети
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Loss.CrossEntropyWithSoftmax">
            <summary>
            Расчет ошибки для перекрестной энтропии при условии, что выход - Softmax
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.CrossEntropyWithSoftmax.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Обратный проход(взятие производной)
            </summary>
            <param name="actualOutput">Значение выхода (актуальное)</param>
            <param name="targetOutput">Целевое значение (идеальное)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.CrossEntropyWithSoftmax.Measure(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Значение ошибки
            </summary>
            <param name="actualOutput">Значение выхода (актуальное)</param>
            <param name="targetOutput">Целевое значение (идеальное)</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss">
            <summary>
            Интерфейс функции потерь
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Обратный проход(взятие производной)
            </summary>
            <param name="actualOutput">Значение выхода (актуальное)</param>
            <param name="targetOutput">Целевое значение (идеальное)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss.Measure(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Значение ошибки
            </summary>
            <param name="actualOutput">Значение выхода (актуальное)</param>
            <param name="targetOutput">Целевое значение (идеальное)</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Loss.LossMeanSqrSqrt">
            <summary>
            Средний квадрат отклонения (Деленный на корень квадратный размерности)
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.LossMeanSqrSqrt.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Обратный проход(взятие производной)
            </summary>
            <param name="actualOutput">Значение выхода (актуальное)</param>
            <param name="targetOutput">Целевое значение (идеальное)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.LossMeanSqrSqrt.Measure(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Значение ошибки
            </summary>
            <param name="actualOutput">Значение выхода (актуальное)</param>
            <param name="targetOutput">Целевое значение (идеальное)</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Loss.LossSumOfSquares">
            <summary>
            Сумма квадратов отклонения
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.LossSumOfSquares.Backward(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Обратный проход(взятие производной)
            </summary>
            <param name="actualOutput">Значение выхода (актуальное)</param>
            <param name="targetOutput">Целевое значение (идеальное)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Loss.LossSumOfSquares.Measure(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Значение ошибки
            </summary>
            <param name="actualOutput">Значение выхода (актуальное)</param>
            <param name="targetOutput">Целевое значение (идеальное)</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.GraphCPU">
            <summary>
            Граф автодифференцирования для ЦП
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.IsBackward">
            <summary>
            Включен ли обратный проход
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Backprop">
            <summary>
            Элементы обратного прохода
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.#ctor">
            <summary>
            Граф автодифференцирования для ЦП
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.#ctor(System.Boolean)">
            <summary>
            Граф автодифференцирования для ЦП
            </summary>
            <param name="applyBackprop">Выполняется ли обратный проход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Backward">
            <summary>
            Обратный проход
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Restart(System.Boolean)">
            <summary>
            Перезапуск графа
            </summary>
            <param name="isBacward">Включен ли обратный проход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Copyist(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32)">
            <summary>
            Копирование тензора
            </summary>
            <param name="value">Тензор</param>
            <param name="count">Число копий</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.ScalarProduct(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Скалярное произведение
            </summary>
            <param name="m1">Первый вектор</param>
            <param name="m2">Второй Вектор</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.AddCicleBuff(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32)">
            <summary>
             Добавление значения в циклический буффер
            </summary>
            <param name="old">Старое состояние буффера</param>
            <param name="inp">Значение(одно число)</param>
            <param name="len">Емкость буффера</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.ConcatinateVectors(AI.ML.NeuralNetwork.CoreNNW.NNValue[])">
            <summary>
            Конкатенация массива векторов
            </summary>
            <param name="m">Массив векторов</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.DeConcatinateOne(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Разрезание вектора на вектора по 1 элементу
            </summary>
            <param name="vector">Вектор</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.ConcatinateVectors(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Конкатенация векторов
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.NonLinear(AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Вычисление нелинейных функций
            </summary>
            <param name="function">Функция</param>
            <param name="m">Аргумент</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Mul(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Произведение матриц
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Add(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Сумма
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Add(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Сумма трех тензоров
            </summary>
            <param name="m1">Первый тензор</param>
            <param name="m2">Второй тензор</param>
            <param name="m3">Третий тензор</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.OneMinus(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            1-m
            </summary>
            <param name="m">Тензор входа</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Subtract(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Вычитание
            </summary>
            <param name="m1">Уменьшаемое</param>
            <param name="m2">Вычитаемое</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.MulMatrixByNumber(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Double)">
            <summary>
            Умножение матрицы на число
            </summary>
            <param name="m">Матрица</param>
            <param name="s">Число</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.MulMatrixByNumber(System.Double,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Умножение числа на матрицу/тензор
            </summary>
            <param name="s">Число</param>
            <param name="m">Матрица/тензор</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Invers(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Инверсия -m (Оптимизировать)
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.AdamarMul(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Адамарово(поэлементное произведение)
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Convolution(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Свертка
            </summary>
            <param name="input">Тензор входа</param>
            <param name="filters">Фильтры</param>
            <param name="padX">Добавление к x</param>
            <param name="padY">Добавление к y</param>
            <param name="strideX">Шаг по оси x</param>
            <param name="strideY">Шаг по оси y</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Convolution(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue[],AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Свертка
            </summary>
            <param name="input">Тензор входа</param>
            <param name="filters">Фильтры</param>
            <param name="bias">Вектор смещения</param>
            <param name="padX">Добавление к x</param>
            <param name="padY">Добавление к y</param>
            <param name="strideX">Шаг по оси x</param>
            <param name="strideY">Шаг по оси y</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.MaxPooling(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32,System.Int32)">
            <summary>
            Макспуллинг
            </summary>
            <param name="input">Тензор входа</param>
            <param name="h">Во сколько раз уменьшить высоту</param>
            <param name="w">Во сколько раз уменьшить ширину</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.ReShape(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Shape,System.Single)">
            <summary>
            Преобразование размерности тензора
            </summary>
            <param name="input">Тензор</param>
            <param name="newShape">Новая размерность</param>
            <param name="gain">Усиление градиента</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.UnPooling(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32,System.Int32)">
            <summary>
            Анпулинг, увеличивает размерность выхода вставляя нули между соседними значениями
            </summary>
            <param name="inp"></param>
            <param name="h"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.GraphCPU.Upsampling2dUpsampling2dBicibic(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32,System.Int32)">
            <summary>
            Ансепмплинг, увеличивает размерность входя бикубической интерполяцией
            </summary>
            <param name="inp"></param>
            <param name="h"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph">
            <summary>
            Интерфейс графа автодифференцирования
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.IsBackward">
            <summary>
            Производится ли обратный проход
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Backprop">
            <summary>
            Элементы обратного прохода
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Backward">
            <summary>
            Обратный проход (дифференцирование)
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Restart(System.Boolean)">
            <summary>
            Перезагрузка
            </summary>
            <param name="isBacward"> Производится ли обратный проход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Copyist(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32)">
            <summary>
            Копирование тензора
            </summary>
            <param name="value">Тензор</param>
            <param name="count">Число копий</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.ScalarProduct(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Скалярное произведение двух векторов
            </summary>
            <param name="v1">Первый вектор</param>
            <param name="v2">Второй вектор</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.ConcatinateVectors(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Конкатинация 2х векторов
            </summary>
            <param name="v1">Первый вектор</param>
            <param name="v2">Второй вектор</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.ConcatinateVectors(AI.ML.NeuralNetwork.CoreNNW.NNValue[])">
            <summary>
            Конкатинация массива векторов
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.DeConcatinateOne(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Разрезание вектора на вектора по 1 элементу
            </summary>
            <param name="vector">Вектор</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.NonLinear(AI.ML.NeuralNetwork.CoreNNW.Activations.IActivation,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Активационная функция
            </summary>
            <param name="neuron">Функция активация</param>
            <param name="t">Тензор к которому она применяется</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.AddCicleBuff(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32)">
            <summary>
            Добавление элемента в циклический буфер
            </summary>
            <param name="old">Старое состояние буфера</param>
            <param name="inp">Добавляемый элемент</param>
            <param name="len">Емкость буфера</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Mul(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Умножение матриц
            </summary>
            <param name="m1">Первая матрица</param>
            <param name="m2">Вторая матрица</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Add(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Сложение двух тензоров
            </summary>
            <param name="t1">Первый тензор</param>
            <param name="t2">Второй тензор</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Add(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Сложение трех тензоров
            </summary>
            <param name="t1">Первый тензор</param>
            <param name="t2">Второй тензор</param>
            <param name="t3">Третий тензор</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.OneMinus(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            1-m
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Subtract(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Вычитание
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.MulMatrixByNumber(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Double)">
            <summary>
            Умножение на число
            </summary>
            <param name="m"></param>
            <param name="s">Число</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.MulMatrixByNumber(System.Double,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Умножение на число
            </summary>
            <param name="m"></param>
            <param name="s">Число</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Invers(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Инверсия тензора -m
            </summary>
            <param name="m">Тензор</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.AdamarMul(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Адамарово произведение тензоров
            </summary>
            <param name="m1">Первый тензор</param>
            <param name="m2">Второй тензор</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Convolution(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Свертка
            </summary>
            <param name="input">Тензор входа</param>
            <param name="filters">Фильтры</param>
            <param name="padX">Добавление к x</param>
            <param name="padY">Добавление к y</param>
            <param name="strideX">Шаг по оси x</param>
            <param name="strideY">Шаг по оси y</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Convolution(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.NNValue[],AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Свертка
            </summary>
            <param name="input">Тензор входа</param>
            <param name="filters">Фильтры</param>
            <param name="bias">Вектор смещения</param>
            <param name="padX">Добавление к x</param>
            <param name="padY">Добавление к y</param>
            <param name="strideX">Шаг по оси x</param>
            <param name="strideY">Шаг по оси y</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.MaxPooling(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32,System.Int32)">
            <summary>
            Макспуллинг
            </summary>
            <param name="inp">Тензор входа</param>
            <param name="h">Во сколько раз уменьшить высоту</param>
            <param name="w">Во сколько раз уменьшить ширину</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.ReShape(AI.ML.NeuralNetwork.CoreNNW.NNValue,AI.ML.NeuralNetwork.CoreNNW.Shape,System.Single)">
            <summary>
            Преобразование размерности тензора
            </summary>
            <param name="input">Тензор</param>
            <param name="newShape">Новая размерность</param>
            <param name="gain">Усиление градиента</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.UnPooling(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32,System.Int32)">
            <summary>
            Анпуллинг
            </summary>
            <param name="inp">Тензор входа</param>
            <param name="h">Во сколько раз увеличить высоту</param>
            <param name="w">Во сколько раз увеличить ширину</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Models.IGraph.Upsampling2dUpsampling2dBicibic(AI.ML.NeuralNetwork.CoreNNW.NNValue,System.Int32,System.Int32)">
            <summary>
            Upsampling с бикубической интерполяцией
            </summary>
            <param name="inp">Вход</param>
            <param name="h">Во сколько раз увеличить высоту</param>
            <param name="w">Во сколько раз увеличить ширину</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Models.IRunnable">
            <summary>
            Интерфейс для запуска обратного обучения
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Models.IRunnable.Run">
            <summary>
            Делигат для запуска обратного прохода
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Models.Runnable">
            <summary>
            Интерфейс для запуска обратного обучения
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Models.Runnable.Run">
            <summary>
            Делигат для запуска обратного прохода
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.NNValue">
            <summary>
            Основной класс для хранения данных о нейросети, может быть вектором, матрицей или тензором 3-го ранга
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNValue.H">
            <summary>
            Высота
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNValue.W">
            <summary>
            Ширина
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNValue.D">
            <summary>
            Глубина
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNValue.Len">
            <summary>
            Число элементов тензора
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.NNValue.DataInTensor">
            <summary>
            Данные в тензоре
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.NNValue.DifData">
            <summary>
            Данные диференцирования
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.NNValue.StepCache">
            <summary>
            Кэш
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.NNValue.StepCache2">
            <summary>
            Кэш для более сложных моделей обучения
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNValue.S">
            <summary>
            Площадь тензора
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNValue.Item(System.Int32)">
            <summary>
            Получение элемента по его индексу в массиве
            </summary>
            <param name="i">Индекс</param>
            <returns></returns>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNValue.Item(System.Int32,System.Int32)">
            <summary>
            Получение элемента по индексу  высоты и ширины
            </summary>
            <param name="h">Индекс высоты</param>
            <param name="w">Индекс ширины</param>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.NNValue.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Получение элемента по индексу высоты,ширины и глубины
            </summary>
            <param name="h">Высота</param>
            <param name="w">Ширина</param>
            <param name="d">Глубина</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.#ctor(System.Int32)">
            <summary>
            Создание тензора с параметрами dim, 1,1
            </summary>
            <param name="dim">Размерность тензора</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.#ctor(AI.Vector)">
            <summary>
            Создание тензора на базе вектора, вектор становится вектор-столбцом
            </summary>
            <param name="data">Вектор</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.#ctor(AI.Tensor)">
            <summary>
            Создание тензора на базе тензора из AI
            </summary>
            <param name="tensor">Тензор</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.#ctor(AI.Matrix)">
            <summary>
            Создание тензора на базе матрицы из AI
            </summary>
            <param name="matrix">Матрица</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.#ctor(System.Int32,System.Int32)">
            <summary>
            Создание матрицы (тензора hxwx1)
            </summary>
            <param name="h">Высота</param>
            <param name="w">Ширина</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Создание тензора
            </summary>
            <param name="h">Высота</param>
            <param name="w">Ширина</param>
            <param name="d">Глубина</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.#ctor(System.Double[])">
            <summary>
            Создание вектора
            </summary>
            <param name="vector">Массив данных</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.ToString">
            <summary>
            Перевод матрицы в строку
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.ToStrings">
            <summary>
            Перевод матрицы в массив строк
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.ToTensor">
            <summary>
            Перевод в AI Тензор
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.ToMatrix">
            <summary>
            Перевод в AI Матрицу
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.ToTxts">
            <summary>
            Перевод матрицы в массив строк
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.ToTxtsNoInfo">
            <summary>
            Перевод матрицы в массив строк
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.Gauss(System.Random)">
            <summary>
            Гауссово распределение
            </summary>
            <returns>Возвращает норм. распред величину СКО = 1, M = 0</returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.Clone">
            <summary>
            Клонирование тензора
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.ResetDw">
            <summary>
            Сброс производных
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.ResetStepCache">
            <summary>
            Сброс кэша
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.Transpose(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Транспонирование
            </summary>
            <param name="m">Матрица</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.Random(System.Int32,System.Int32,System.Double,System.Random)">
            <summary>
            Заполнение тензора случайными числами
            </summary>
            <param name="h">Ширина</param>
            <param name="w">Высота</param>
            <param name="initParamsStdDev">ско</param>
            <param name="rnd">Генератор псевдослуч. чисел</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.Random(System.Int32,System.Int32,System.Int32,System.Double,System.Random)">
            <summary>
            Заполнение тензора случайными числами
            </summary>
            <param name="h">Ширина</param>
            <param name="w">Высота</param>
            <param name="d">Глубина</param>
            <param name="initParamsStdDev">ско</param>
            <param name="rnd">Генератор псевдослуч. чисел</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.RandomR(System.Int32,System.Int32,System.Int32,System.Double,System.Random)">
            <summary>
            Заполнение тензора случайными числами
            </summary>
            <param name="h">Ширина</param>
            <param name="w">Высота</param>
            <param name="d">Глубина</param>
            <param name="initParamsStdDev">ско</param>
            <param name="rnd">Генератор псевдослуч. чисел</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.Ident(System.Int32)">
            <summary>
            Создание единичной матрицы
            </summary>
            <param name="dim">Размерность матрицы</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.Uniform(System.Int32,System.Int32,System.Double)">
            <summary>
            Создание матрицы заполненной одним числом
            </summary>
            <param name="h">Высота</param>
            <param name="w">Ширина</param>
            <param name="s">Число</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.Ones(System.Int32,System.Int32)">
            <summary>
            Заполнение тензора единицами
            </summary>
            <param name="h">Высота</param>
            <param name="w">Ширина</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.NegativeOnes(System.Int32,System.Int32)">
            <summary>
            Заполнение тензора -1
            </summary>
            <param name="h">Высота</param>
            <param name="w">Ширина</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.SaveAsText(System.String)">
            <summary>
            Сохранение тензора в текстовом формате
            </summary>
            <param name="path">Путь до файла</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.SaveAsTextNoInfo(System.String)">
            <summary>
            Сохранение без тензора без описания
            </summary>
            <param name="path">Путь для сохранения</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.NNValue.GetShape">
            <summary>
            Получить форму тензора
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Train.IOptimizer">
            <summary>
            Оптимизатор
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Train.IOptimizer.UpdateModelParams(AI.ML.NeuralNetwork.CoreNNW.Layers.NNW,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Обновление параметров 
            </summary>
            <param name="network">Нейросеть</param>
            <param name="learningRate">Скорость обучения</param>
            <param name="gradClip">Максимальное значение градиента</param>
            <param name="gradGain">Коэф. усиления градиентов</param>
            <param name="L1">Коэф. L1 регуляризации</param>
            <param name="L2">Коэф. L1 регуляризации</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Train.IOptimizer.Reset">
            <summary>
            Сброс параметров обучения
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Train.ITrainer">
            <summary>
            Интерфейс учителя
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Train.ITrainer.Train(System.Int32,System.Double,AI.ML.NeuralNetwork.CoreNNW.Layers.NNW,AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSet,System.Double)">
            <summary>
            Обучение сети
            </summary>
            <param name="trainingEpochs">Число эпох</param>
            <param name="learningRate">Скорость обучения</param>
            <param name="network">Нейронная сеть</param>
            <param name="data">Набор данных(датасет)</param>
            <param name="minLoss">Минимальная ошибка, после которой останавливается обучение</param>
            <returns>Ошибка</returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Train.TrainInfo">
            <summary>
            Информация об обучение нейросети
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.TrainInfo.ValidationLoss">
            <summary>
            Ошибка валидации
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.TrainInfo.TrainLoss">
            <summary>
            Ошибка обучения
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Train.TrainInfo.TestLoss">
            <summary>
            Ошибка на тестовой выборке
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Train.TrainInfo.#ctor">
            <summary>
            Информация об обучение нейросети
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Train.TrainInfo.AddTrainLoss(System.Double)">
            <summary>
            Добавить значение ошибки обучения
            </summary>
            <param name="loss">Значение ошибки</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Train.TrainInfo.AddValidationLoss(System.Double)">
            <summary>
            Добавить значение ошибки валидации
            </summary>
            <param name="loss">Значение ошибки</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Adam">
            <summary>
            Метод Адам
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Adam.#ctor">
            <summary>
            Адам
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Adam.UpdateModelParams(AI.ML.NeuralNetwork.CoreNNW.Layers.NNW,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Обновление параметров 
            </summary>
            <param name="network">Нейросеть</param>
            <param name="learningRate">Скорость обучения</param>
            <param name="gradClip">Максимальное значение градиента</param>
            <param name="kG">Коэф. усиления градиентов</param>
            <param name="L1">Коэф. L1 регуляризации</param>
            <param name="L2">Коэф. L1 регуляризации</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.Adam.Reset">
            <summary>
            Сброс
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Optimizers.SGD">
            <summary>
            Стохастический градиентный спуск
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Optimizers.SGD.Momentum">
            <summary>
            Момент
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.SGD.#ctor">
            <summary>
            Стохастический градиентный спуск, момент = 0
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.SGD.#ctor(System.Double)">
            <summary>
            Стохастический градиентный спуск
            </summary>
            <param name="momentum">Момент</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.SGD.Reset">
            <summary>
            Сброс параметров обучения
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.SGD.UpdateModelParams(AI.ML.NeuralNetwork.CoreNNW.Layers.NNW,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Обновление весов нейронной сети
            </summary>
            <param name="network">Нейросеть с вычисленными градиентами</param>
            <param name="learningRate">Скорость обучения</param>
            <param name="gradClip">Ограничения градиента</param>
            <param name="L1">Коэффициент нормы L1</param>
            <param name="L2">Коэффициент нормы L2</param>
            <param name="kG">Усиление градиента, чаще всего (1/N, где N-мощность обучающей выборки/батча)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Optimizers.SGD.ToString">
            <summary>
            Строковое представление
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Trainer">
            <summary>
            Класс для обучения нейросетей
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Trainer.L2Regularization">
            <summary>
            Коэффициент L2 регуляризации, если он равен 0 L2 регуляризации нет
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Trainer.L1Regularization">
            <summary>
            Коэффициент L1 регуляризации, если он равен 0 L2 регуляризации нет
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Trainer.BatchSize">
            <summary>
            Размер мини-пакета
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Trainer.TrainTypeSetting">
            <summary>
            Тип обучение, онлайн, офлайн или мини пакетный
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Trainer.TrainOptimizer">
            <summary>
            Метод обчения SGD, Adam и т.п.
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Trainer.RandomSeed">
            <summary>
            Сид для генератора случайных чисел
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.Trainer.GradientClipValue">
            <summary>
            Ограничение грандиента, чтобы избежать взрыва градиента, по умолчанию 3
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.CoreNNW.Trainer.Info">
            <summary>
            Информация об обучении НС
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Trainer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Models.IGraph)">
            <summary>
            Создание "учителя" для нейросети
            </summary> 
            <param name="graph">Граф автодифференцирования</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Trainer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Models.IGraph,AI.ML.NeuralNetwork.CoreNNW.TrainType)">
            <summary>
            Создание "учителя" для нейросети
            </summary> 
            <param name="graph">Граф автодифференцирования</param>
            <param name="trainType">Тип обучения</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Trainer.#ctor(AI.ML.NeuralNetwork.CoreNNW.Models.IGraph,AI.ML.NeuralNetwork.CoreNNW.TrainType,AI.ML.NeuralNetwork.CoreNNW.Train.IOptimizer)">
            <summary>
            Создание "учителя" для нейросети
            </summary> 
            <param name="graph">Граф автодифференцирования</param>
            <param name="trainType">Тип обучения</param>
            <param name="optimizer">Метод обучения</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Trainer.Train(System.Int32,System.Double,AI.ML.NeuralNetwork.CoreNNW.Layers.NNW,AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSet,System.Double)">
            <summary>
            Обучение сети
            </summary>
            <param name="trainingEpochs">Число эпох</param>
            <param name="learningRate">Скорость обучения</param>
            <param name="network">Нейронная сеть</param>
            <param name="data">Набор данных(датасет)</param>
            <param name="minLoss">Значение ошибки при которой останавливается обучение</param>
            <returns>Ошибка</returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Trainer.PassOnline(System.Double,AI.ML.NeuralNetwork.CoreNNW.Layers.NNW,System.Collections.Generic.List{AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSequence},System.Boolean,AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss)">
            <summary>
            Онлайн обучение
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Trainer.PassOffline(System.Double,AI.ML.NeuralNetwork.CoreNNW.Layers.NNW,System.Collections.Generic.List{AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSequence},System.Boolean,AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss)">
            <summary>
            Оффлайн обучение
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Trainer.PassBatch(System.Double,AI.ML.NeuralNetwork.CoreNNW.Layers.NNW,System.Collections.Generic.List{AI.ML.NeuralNetwork.CoreNNW.DataStructs.DataSequence},System.Boolean,AI.ML.NeuralNetwork.CoreNNW.Loss.ILoss)">
            <summary>
            Один проход для минипакетного обучения
            </summary>
            <param name="learningRate">Скорость обучения</param>
            <param name="network">Нейросеть</param>
            <param name="sequences">Датасет</param>
            <param name="isTraining">Производится ли обучение</param>
            <param name="lossFunction">Функция ошибки</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Trainer.UpdateModelParams(AI.ML.NeuralNetwork.CoreNNW.Layers.NNW,System.Double)">
            <summary>
            Обновление весов
            </summary>
            <param name="network">Сеть</param>
            <param name="learningRate">Скорость обучения</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.TrainType">
            <summary>
            Тип обучения
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.TrainType.Offline">
            <summary>
            Офлайн обучение
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.TrainType.Online">
            <summary>
            Онлайн обучение
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CoreNNW.TrainType.MiniBatch">
            <summary>
            Мини-пакетное обучение
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CoreNNW.Saver">
            <summary>
            Класс для сохранения нейросети и компонентов
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Saver.SaveNNValue(System.String,AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Сохраниение NNValue (Тензор, основной тип данных НС)
            </summary>
            <param name="path">Путь до файла</param>
            <param name="data">Тензор</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Saver.NNValueToBts(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Сохраниение NNValue в массив байт (Тензор, основной тип данных НС)
            </summary>
            <param name="data">Тензор</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Saver.NNValueToBtsOnlyW(AI.ML.NeuralNetwork.CoreNNW.NNValue)">
            <summary>
            Сохраниение NNValue в массив байт, сохраняет только веса сети (Тензор, основной тип данных НС)
            </summary>
            <param name="data">Тензор</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Saver.LoadNNValue(System.String)">
            <summary>
            Загрузка NNValue (Тензор, основной тип данных НС)
            </summary>
            <param name="path">Путь до файла</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Saver.NNValueFromBts(System.Byte[])">
            <summary>
            Загрузка NNValue из массива байт (Тензор, основной тип данных НС)
            </summary>
            <param name="byteArray">Массив байт</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Saver.NNValueFromBtsOnlyW(System.Byte[])">
            <summary>
            Загрузка NNValue из массива байт, только веса (Тензор, основной тип данных НС)
            </summary>
            <param name="byteArray">Массив байт</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Saver.LoadNetwork(System.String)">
            <summary>
            Десериализация нейросети
            </summary>
            <param name="filePath">Путь до файла</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CoreNNW.Saver.SaveNetwork(System.String,AI.ML.NeuralNetwork.CoreNNW.Layers.NNW)">
            <summary>
            Сохранение нейросети
            </summary>
            <param name="filePath">Путь до файла</param>
            <param name="nnw">Нейросеть</param>
        </member>
        <member name="T:AI.ML.Regression.ExpMean">
            <summary>
            Description of ExpMean.
            </summary>
        </member>
        <member name="M:AI.ML.Regression.ExpMean.#ctor(AI.Vector,System.Double)">
            <summary>
            Прогнозирование на основе скользящего среднего
            </summary>
            <param name="inp">Вход</param>
            <param name="oldPart">Старая часть(коэф. сглаживания)</param>
        </member>
        <member name="M:AI.ML.Regression.ExpMean.Predict(System.Double)">
            <summary>
            Прогноз
            </summary>
        </member>
        <member name="M:AI.ML.Regression.ExpMean.Predict(System.Int32)">
            <summary>
            Прогноз
            </summary>
        </member>
        <member name="T:AI.ML.Regression.IReg">
            <summary>
            Интерфейс регрессии
            </summary>
        </member>
        <member name="M:AI.ML.Regression.IReg.Train(AI.Vector[],AI.Vector)">
            <summary>
            Обучение регрессии
            </summary>
            <param name="data">Набор векторов входов</param>
            <param name="targets">Вектор выхода</param>
        </member>
        <member name="M:AI.ML.Regression.IReg.Predict(AI.Vector)">
            <summary>
            Прогноз модели
            </summary>
            <param name="data">Вектор входа</param>
        </member>
        <member name="T:AI.ML.Regression.StructRegr">
            <summary>
            Структура для хранения класса
            </summary>
        </member>
        <member name="F:AI.ML.Regression.StructRegr._targ">
            <summary>
            Имя класса
            </summary>
        </member>
        <member name="F:AI.ML.Regression.StructRegr._centGiperSfer">
            <summary>
            Центр гиперсферы
            </summary>
        </member>
        <member name="P:AI.ML.Regression.StructRegr.Target">
            <summary>
            Значение целевой переменной 
            </summary>
        </member>
        <member name="P:AI.ML.Regression.StructRegr.CentGiperSfer">
            <summary>
            Центр гиперсферы
            </summary>
        </member>
        <member name="P:AI.ML.Regression.StructRegr.R">
            <summary>
            Расстояние
            </summary>
        </member>
        <member name="P:AI.ML.Regression.StructRegr.Params">
            <summary>
            Дополнительные параметры
            </summary>
        </member>
        <member name="T:AI.ML.Regression.StructRegres">
            <summary>
            Структура регрессии
            </summary>
        </member>
        <member name="F:AI.ML.Regression.StructRegres._classes">
            <summary>
            Коллекция классов
            </summary>
        </member>
        <member name="P:AI.ML.Regression.StructRegres.Classes">
            <summary>
            Список даных для регрессии
            </summary>
        </member>
        <member name="T:AI.ML.Regression.kNNReg">
            <summary>
            Регрессия (метод k-ближайших соседей) эффективный метод классификации
            </summary>
        </member>
        <member name="P:AI.ML.Regression.kNNReg.K">
            <summary>
            Число соседей
            </summary>
        </member>
        <member name="P:AI.ML.Regression.kNNReg.H">
            <summary>
            Ширина окна
            </summary>
        </member>
        <member name="P:AI.ML.Regression.kNNReg.FixedH">
            <summary>
            Фиксирована ли ширина
            </summary>
        </member>
        <member name="P:AI.ML.Regression.kNNReg.IsNadrMethod">
            <summary>
            Используется ли окно Парзена
            </summary>
        </member>
        <member name="P:AI.ML.Regression.kNNReg.KernelWindow">
            <summary>
            Ядро окна
            </summary>
        </member>
        <member name="P:AI.ML.Regression.kNNReg.Dist">
            <summary>
            Функция растояния
            </summary>
        </member>
        <member name="P:AI.ML.Regression.kNNReg.Reg">
            <summary>
            Данные для регрессии
            </summary>
        </member>
        <member name="M:AI.ML.Regression.kNNReg.#ctor">
            <summary>
            Регрессия (Метод ближайшего соседа)
            </summary>
        </member>
        <member name="M:AI.ML.Regression.kNNReg.RbfK(System.Double)">
            <summary>
            Радиально-базисное ядро для окна Парзена
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Regression.kNNReg.#ctor(System.String)">
            <summary>
            Регрессия (Метод ближайшего соседа)
            </summary>
            <param name="path">Путь до файла</param>
        </member>
        <member name="M:AI.ML.Regression.kNNReg.#ctor(AI.ML.Regression.StructRegres)">
            <summary>
            Регрессия (Метод ближайшего соседа)
            </summary>
            <param name="reg"> Данные для регрессии</param>
        </member>
        <member name="M:AI.ML.Regression.kNNReg.Save(System.String)">
            <summary>
            Сохранение классификатора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Regression.kNNReg.Open(System.String)">
            <summary>
            Загрузка классификатора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Regression.kNNReg.ToData(System.Int32,System.Double@)">
            <summary>
            Перевод в double
            </summary>
            <param name="i">Индекс</param>
            <param name="R">Вес окна</param>
        </member>
        <member name="M:AI.ML.Regression.kNNReg.Rang(AI.Vector)">
            <summary>
            Ранжирование
            </summary>
        </member>
        <member name="M:AI.ML.Regression.kNNReg.Train(AI.Vector,System.Double)">
            <summary>
            Добавление класса
            </summary>
            <param name="tData">Центральный вектор</param>
            <param name="targ">Зависимая переменная</param>
        </member>
        <member name="M:AI.ML.Regression.kNNReg.Train(AI.Vector[],AI.Vector)">
            <summary>
            Обучение регрессии
            </summary>
            <param name="tData">Данные входов</param>
            <param name="targs">Данные выходов</param>
        </member>
        <member name="M:AI.ML.Regression.kNNReg.Train(AI.Vector,AI.Vector)">
            <summary>
            Обучение регрессии
            </summary>
            <param name="tData">Данные входов</param>
            <param name="targs">Данные выходов</param>
        </member>
        <member name="M:AI.ML.Regression.kNNReg.Predict(AI.Vector)">
            <summary>
            Возращает вектор, его длинна - число классов, на номере нужного класса стоит 1
            </summary>
            <param name="inp">Вектор входа</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Regression.kNNReg.PredictV(AI.Vector)">
            <summary>
            Прогноз вектора значений
            </summary>
            <param name="inp">Вектор входа</param>
        </member>
        <member name="T:AI.ML.Regression.LinearRegressionModel">
            <summary>
            Модель для линейной регрессии хранит k и b   
            f(x) = k*x+b;
            </summary>
        </member>
        <member name="P:AI.ML.Regression.LinearRegressionModel.k">
            <summary>
            Тангенс угла наклона
            </summary>
        </member>
        <member name="P:AI.ML.Regression.LinearRegressionModel.b">
            <summary>
            Смещение относительно (0;0)
            </summary>
        </member>
        <member name="T:AI.ML.Regression.LinearRegression">
            <summary>
            Линейная регрессия
            </summary>
        </member>
        <member name="P:AI.ML.Regression.LinearRegression.Lrm">
            <summary>
            Парамметры линейной регрессии
            </summary>
        </member>
        <member name="M:AI.ML.Regression.LinearRegression.#ctor(AI.Vector,AI.Vector)">
            <summary>
            Обучающая выборка
            </summary>
            <param name="X">Вектор X(независимая переменная)</param>
            <param name="Y">Вектор Y(зависимая переменная)</param>
        </member>
        <member name="M:AI.ML.Regression.LinearRegression.ToString">
            <summary>
            Вывод в строку
            </summary>
            <returns>Строка типа: f(x) = k*x+(b)</returns>
        </member>
        <member name="M:AI.ML.Regression.LinearRegression.Predict(System.Double)">
            <summary>
            Прогнозирование с помощью линейной модели
            </summary>
            <param name="x">Независимая переменная</param>
            <returns>Зависимая переменная</returns>
        </member>
        <member name="M:AI.ML.Regression.LinearRegression.Predict(AI.Vector)">
            <summary>
            Прогнозирование с помощью линейной модели
            </summary>
            <param name="X">Вектор независимых переменных</param>
            <returns>Вектор зависимых переменных</returns>
        </member>
        <member name="T:AI.ML.Regression.MultipleRegression">
            <summary>
            Множественная регрессия
            </summary>
        </member>
        <member name="P:AI.ML.Regression.MultipleRegression.Parammetrs">
            <summary>
            Параметры модели
            </summary>
        </member>
        <member name="M:AI.ML.Regression.MultipleRegression.#ctor(AI.Vector[],AI.Vector,System.Boolean)">
            <summary>
            Множественная линейная регрессия
            </summary>
            <param name="X">Вектора входа</param>
            <param name="Y">Выходы</param>
            <param name="isScale">Стоит ли применить масштабирование к данным</param>
        </member>
        <member name="M:AI.ML.Regression.MultipleRegression.#ctor(System.String)">
            <summary>
            Множественная линейная регрессия
            </summary>
            <param name="path">Путь до модели</param>
        </member>
        <member name="M:AI.ML.Regression.MultipleRegression.Predict(AI.Vector)">
            <summary>
            Прогноз
            </summary>
            <param name="vect">Вектор входа</param>
            <returns>Выход</returns>
        </member>
        <member name="M:AI.ML.Regression.MultipleRegression.Predict(AI.Vector[])">
            <summary>
            Прогноз
            </summary>
            <param name="inp">Вектора входа</param>
            <returns>Вектор выхода</returns>
        </member>
        <member name="M:AI.ML.Regression.MultipleRegression.SaveModel(System.String)">
            <summary>
            Сохранение модели
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Regression.MultipleRegression.LoadModel(System.String)">
            <summary>
            Загрузка модели
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="T:AI.ML.Regression.PolynomialRegression">
            <summary>
            Description of PolynomialRegression.
            </summary>
        </member>
        <member name="M:AI.ML.Regression.PolynomialRegression.#ctor(AI.Vector,AI.Vector,System.Int32)">
            <summary>
            Полиномиальная регрессия
            </summary>
        </member>
        <member name="M:AI.ML.Regression.PolynomialRegression.Predict(System.Double)">
            <summary>
            Прогноз
            </summary>
            <param name="inp">Значение незав. переменной</param>
        </member>
        <member name="M:AI.ML.Regression.PolynomialRegression.Predict(AI.Vector)">
            <summary>
            Прогноз
            </summary>
            <param name="vect">Значения незав. переменных</param>
        </member>
        <member name="T:AI.ML.Regression.RBFGauss">
            <summary>
            Description of RegressionLagrang.
            </summary>
        </member>
        <member name="F:AI.ML.Regression.RBFGauss.param">
            <summary>
            Параметры
            </summary>
        </member>
        <member name="M:AI.ML.Regression.RBFGauss.#ctor(AI.Vector,AI.Vector,System.Int32)">
            <summary>
            Регрессия
            </summary>
            <param name="X">Вектор входа</param>
            <param name="Y">Вектор выхода</param>
            <param name="nRBF">Кол-во ядер</param>
        </member>
        <member name="M:AI.ML.Regression.RBFGauss.Predict(System.Double)">
            <summary>
            Прогноз
            </summary>
            <param name="inp">Значение незав. переменной</param>
        </member>
        <member name="M:AI.ML.Regression.RBFGauss.Predict(AI.Vector)">
            <summary>
            Прогноз
            </summary>
            <param name="vect">Значения незав. переменных</param>
        </member>
        <member name="T:AI.Distances.BaseDist">
            <summary>
            Базовые функции расстояния
            </summary>
        </member>
        <member name="M:AI.Distances.BaseDist.LpDist(AI.Vector,AI.Vector,System.Int32)">
            <summary>
            Расстояния семейства Lp
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Distances.BaseDist.EuclideanDistance(AI.Vector,AI.Vector)">
            <summary>
            Евклидово расстояние
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Distances.BaseDist.LinfDist(AI.Vector,AI.Vector)">
            <summary>
            Расстояние L-бесконечность
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Distances.BaseDist.Cos(AI.Vector,AI.Vector)">
            <summary>
            Косинусное расстояние
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Distances.BaseDist.CosRelu(AI.Vector,AI.Vector)">
            <summary>
            Косинусное расстояние + ReLu
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Distances.BaseDist.CosMin01(AI.Vector,AI.Vector)">
            <summary>
            Косинусное расстояние с минимальным значением 0.1
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Distances.BaseDist.EnergeDist(AI.Vector,AI.Vector)">
            <summary>
            Энергетическое расстояние
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Distances.BaseDist.QrEucl(AI.Vector,AI.Vector)">
            <summary>
            Квадрат Евклидова расстояния
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Distances.BaseDist.ManhattanDistance(AI.Vector,AI.Vector)">
            <summary>
            Манхетенское расстояние L1
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="T:AI.Algebra.Gauss">
            <summary>
            Метод Гаусса имеет вычислительную сложность O(n^3)
            </summary>
        </member>
        <member name="M:AI.Algebra.Gauss.SolvingEquations(AI.Matrix,AI.Vector)">
            <summary>
            Выдает ответ(решение СЛАУ)
            </summary>
            <param name="A">Матрица коэффициентов</param>
            <param name="B">Вектор ответов</param>
            <returns></returns>
        </member>
        <member name="T:AI.Algebra.Kramer">
            <summary>
            Description of Kramer.
            </summary>
        </member>
        <member name="M:AI.Algebra.Kramer.SolvingEquations(AI.Matrix,AI.Vector)">
            <summary>
            Вывод вектора решений системы уравнений
            </summary>
            <param name="A">Матрица коэфициентов системы</param>
            <param name="B">Вектор ответов</param>
            <returns>Вектор неизвестных</returns>
        </member>
        <member name="T:AI.ComplexVector">
            <summary>
            Класс реализует работу с комплексными векторами
            </summary>
        </member>
        <member name="P:AI.ComplexVector.DataInVector">
            <summary>
            Массив типа Complex содержащий отсчеты вектора
            </summary>
        </member>
        <member name="P:AI.ComplexVector.N">
            <summary>
            Размерность комплексного вектора
            </summary>
        </member>
        <member name="P:AI.ComplexVector.Item(System.Int32)">
            <summary>
            Доступ по индексу
            </summary>
            <param name="i">Индекс</param>
            <returns>Значение вектора</returns>
        </member>
        <member name="M:AI.ComplexVector.#ctor">
            <summary>
            Создает вектор с нулями (0+0j) размерности 3
            </summary>
        </member>
        <member name="M:AI.ComplexVector.#ctor(System.Int32)">
            <summary>
            Создает вектор с нулями (0+0j) размерности n
            </summary>
        </member>
        <member name="M:AI.ComplexVector.#ctor(System.Numerics.Complex[])">
            <summary>
            Создает вектор на основе массива
            </summary>
        </member>
        <member name="M:AI.ComplexVector.#ctor(System.Double[],System.Double[])">
            <summary>
            Создает вектор на основе массивов действительной и мнимой части
            </summary>
            <param name="vectorReal">Действительная часть</param>
            <param name="vectorImg">Мнимая часть</param>
        </member>
        <member name="M:AI.ComplexVector.#ctor(AI.Vector,AI.Vector)">
            <summary>
            Создает вектор на основе векторов действительной и мнимой части
            </summary>
            <param name="vectorReal">Действительная часть</param>
            <param name="vectorImg">Мнимая часть</param>
        </member>
        <member name="M:AI.ComplexVector.#ctor(AI.Vector)">
            <summary>
            Создает вектор на основе векторов действительной части мнимая заполнена нулями
            </summary>
            <param name="vectorReal">Реальная часть</param>
        </member>
        <member name="M:AI.ComplexVector.CutAndZero(System.Int32)">
            <summary>
            Дополнение нулями или обрезание до нужного размера 
            вектора.
            </summary>
            <param name="n">Новый размер</param>
        </member>
        <member name="M:AI.ComplexVector.op_Multiply(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Поэлементное умножение
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй</param>
            <returns>Результат</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Addition(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Поэлементное сложение
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй</param>
            <returns>Результат</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Division(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Поэлементное деление
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй</param>
            <returns>Результат</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Subtraction(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Поэлементное вычитание
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй</param>
            <returns>Результат</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Multiply(AI.ComplexVector,AI.Vector)">
            <summary>
            Поэлементное умножение на реальный вектор
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй</param>
            <returns>Результат</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Multiply(AI.Vector,AI.ComplexVector)">
            <summary>
            Поэлементное умножение на реальный вектор
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй</param>
            <returns>Результат</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Multiply(System.Numerics.Complex,AI.ComplexVector)">
            <summary>
            Умножение на число
            </summary>
            <param name="k">комплексное число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Subtraction(System.Numerics.Complex,AI.ComplexVector)">
            <summary>
            Вычитание из числа
            </summary>
            <param name="k">комплексное число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Subtraction(AI.ComplexVector,System.Numerics.Complex)">
            <summary>
            Вычитание числа
            </summary>
            <param name="k">комплексное число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Subtraction(System.Double,AI.ComplexVector)">
            <summary>
            Вычитание из числа
            </summary>
            <param name="k">реальное число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Subtraction(AI.ComplexVector,System.Double)">
            <summary>
            Вычитание числа
            </summary>
            <param name="k"> число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Addition(System.Numerics.Complex,AI.ComplexVector)">
            <summary>
            Сложение
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Addition(AI.ComplexVector,System.Numerics.Complex)">
            <summary>
            Сложение
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Addition(System.Double,AI.ComplexVector)">
            <summary>
            Сложение
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Addition(AI.ComplexVector,System.Double)">
            <summary>
            Сложение
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_UnaryNegation(AI.ComplexVector)">
            <summary>
            Отрицание
            </summary>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Multiply(AI.ComplexVector,System.Numerics.Complex)">
            <summary>
            Умножение
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Division(System.Numerics.Complex,AI.ComplexVector)">
            <summary>
            Деление
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Division(AI.ComplexVector,System.Numerics.Complex)">
            <summary>
            Деление
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_LogicalNot(AI.ComplexVector)">
            <summary>
            Комплексно сопряженный вектор
            </summary>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.Copy">
            <summary>
            Копирование вектора
            </summary>
            <returns>Возвращает копию</returns>
        </member>
        <member name="M:AI.ComplexVector.Revers">
             <summary>
            Реверс вектора
             </summary>
        </member>
        <member name="M:AI.ComplexVector.Shift(System.Int32)">
            <summary>
            Сдвиг последовательности на определенное число
            Пример: последовательность 1 2 3 сдвинута на 2
            это 0 0 1 2 3, на 4 это 0 0 0 0 1 2 3
            </summary>
            <param name="valueShift"> На сколько сдвинуть</param>
            <returns>возвращает вектор длинны N+valueShift</returns>
        </member>
        <member name="M:AI.ComplexVector.FurCentr">
            <summary>
            Центровка массива значений полученных при преобразовании Фурье
            </summary>
        </member>
        <member name="M:AI.ComplexVector.ImgToVector">
            <summary>
            Возвращает вектор мнимой части комплексного вектора
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexVector.RealToVector">
            <summary>
            Возвращает вектор действительной части комплексного вектора
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexVector.PhaseToVector">
            <summary>
            Возвращает вектор фаз комплексного вектора
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexVector.MagnitudeToVector">
            <summary>
            Возвращает вектор модулей комплексного вектора
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexVector.Decim(System.Int32)">
            <summary>
            Децимация(прореживание) вектора
            </summary>
            <param name="kDecim">Коэффициент децимации</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexVector.AddSimmetr">
            <summary>
            Добавление отраженного вектора
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexVector.InterpolayrZero(System.Int32)">
            <summary>
            Интерполяция поленомом нулевого порядка
            </summary>
            <param name="kInterp">коэффициент интерполяции</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexVector.ToList">
            <summary>
            Преобразование вектора в структуру типа List"Complex" 
            </summary>
        </member>
        <member name="M:AI.ComplexVector.Transform(System.Func{System.Numerics.Complex,System.Numerics.Complex})">
            <summary>
            Преобразование вектора
            </summary>
            <param name="func">Функция преобразования</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexVector.TransformSelf(System.Func{System.Numerics.Complex,System.Numerics.Complex})">
            <summary>
            Преобразование вектора
            </summary>
            <param name="func">Функция преобразования</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexVector.ComplexConjugate">
            <summary>
            Комплексно сопряженное число
            </summary>
        </member>
        <member name="M:AI.ComplexVector.ComplexConjugateSelf">
            <summary>
            Комплексно сопряженное число
            </summary>
        </member>
        <member name="M:AI.ComplexVector.Save(System.String)">
            <summary>
            Сохранение комплексного вектора
            </summary>
            <param name="path">Путь до файла</param>
        </member>
        <member name="M:AI.ComplexVector.Open(System.String)">
            <summary>
            Загрузка комплексного вектора
            </summary>
            <param name="path">Путь до файла</param>		
        </member>
        <member name="M:AI.ComplexVector.ComplexVectorPhaseMagn(AI.Vector,AI.Vector)">
            <summary>
            Преобразование вектора фаз и амплитуд в комплексный вектор
            </summary>
            <param name="magn">Вектор амплитуд</param>
            <param name="phase">Вектор фаз(рад)</param>
        </member>
        <member name="M:AI.ComplexVector.ComplexVectorPhaseDegMagnDb(AI.Vector,AI.Vector,AI.DbType)">
            <summary>
            Преобразование вектора фаз и амплитуд в комплексный вектор
            </summary>
            <param name="magnDb">Вектор амплитуд(дб)</param>
            <param name="phaseDeg">Вектор фаз(градусы)</param>
            <param name="dbType">Тип дб по энергия/амплитуда</param>
        </member>
        <member name="M:AI.ComplexVector.TransformVectorX(AI.Vector,System.Func{System.Double,System.Numerics.Complex})">
            <summary>
            Преобразование вектора(Используется вектор вещественных аргументов)
            </summary>
            <param name="transformFunc">Функция преобразования, фунция от значения вектора аргументов</param>
            <param name="x">Вектор аргументов</param>
        </member>
        <member name="M:AI.ComplexVector.TransformVectorX(AI.ComplexVector,System.Func{System.Numerics.Complex,System.Numerics.Complex})">
            <summary>
            Преобразование вектора(Используется вектор комплексных аргументов)
            </summary>
            <param name="transformFunc">Функция преобразования, фунция от значения вектора аргументов</param>
            <param name="x">Вектор аргументов</param>
        </member>
        <member name="T:AI.DbType">
            <summary>
            Тип децибелов
            </summary>
        </member>
        <member name="F:AI.DbType.Energy">
            <summary>
            Энергетический
            </summary>
        </member>
        <member name="F:AI.DbType.Ampl">
            <summary>
            Амплитудный
            </summary>
        </member>
        <member name="T:AI.Correlation">
            <summary>
            Класс реализует авто- и взаимо- кореляционные функции
            Для действительных и комплексных векторов
            </summary>
        </member>
        <member name="M:AI.Correlation.CrossCorrelation(AI.Vector,AI.Vector)">
            <summary>
            Взаимокорелляция двух действительных векторов
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй вектор</param>
            <returns>Возвращает отсчеты ВКФ</returns>
        </member>
        <member name="M:AI.Correlation.CrossCorrelation(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Взаимокорелляция двух комплексных векторов
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй вектор</param>
            <returns>Возвращает отсчеты ВКФ</returns>
        </member>
        <member name="M:AI.Correlation.AutoCorrelation(AI.Vector)">
            <summary>
            Автокорелляция действительного векторов
            </summary>
            <param name="A">Вектор</param>
            <returns>Возвращает осчеты АКФ</returns>
        </member>
        <member name="M:AI.Correlation.AutoCorrelation(AI.ComplexVector)">
            <summary>
            Автокорелляция комплексного векторов
            </summary>
            <param name="A">Вектор</param>
            <returns>Возвращает осчеты АКФ</returns>	
        </member>
        <member name="T:AI.ExtensionMath">
            <summary>
            Методы расширения
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Transform(System.String[],System.Func{System.String,System.String})">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToStr(System.String[],System.String)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.MatrixsToTensor(AI.Matrix[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToVector(System.Double[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToVector(System.Single[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToVector(System.Int32[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToVector(System.Int64[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToVector(System.Decimal[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToVector(System.Int16[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToVector(System.Byte[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToMatrix(System.Double[],System.Int32,System.Int32)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToMatrix(System.Single[],System.Int32,System.Int32)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToMatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToMatrix(System.Int16[],System.Int32,System.Int32)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToMatrix(System.Decimal[],System.Int32,System.Int32)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToMatrix(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToMatrix(System.Int64[],System.Int32,System.Int32)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToMatrix(System.Double[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToMatrix(System.Int32[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToMatrix(System.Int64[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToMatrix(System.Int16[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToMatrix(System.Single[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToMatrix(System.Byte[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToDoubArray(System.Single[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToDoubArray(System.Int32[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToDoubArray(System.Int64[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToDoubArray(System.Decimal[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToDoubArray(System.Int16[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToDoubArray(System.Byte[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToDoubArray2D(System.Single[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToDoubArray2D(System.Int32[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToDoubArray2D(System.Int64[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToDoubArray2D(System.Decimal[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToDoubArray2D(System.Int16[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToDoubArray2D(System.Byte[0:,0:])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToFloatArray(System.Double[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToFloatArray(System.Int32[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToFloatArray(System.Decimal[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToFloatArray(System.Int64[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToFloatArray(System.Int16[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToFloatArray(System.Byte[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Mean(System.Double[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Mean(System.Single[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Mean(System.Int32[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Mean(System.Int16[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Mean(System.Byte[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Mean(System.Decimal[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Mean(System.Int64[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Disp(System.Double[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Disp(System.Single[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Disp(System.Int16[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Disp(System.Int32[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Disp(System.Decimal[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Disp(System.Int64[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Disp(System.Byte[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Std(System.Double[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Std(System.Byte[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Std(System.Int16[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Std(System.Int32[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Std(System.Int64[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Std(System.Single[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Std(System.Decimal[])">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Transform(System.Double[],System.Func{System.Double,System.Double})">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Transform(System.Single[],System.Func{System.Single,System.Double})">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Transform(System.Int32[],System.Func{System.Int32,System.Double})">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Transform(System.Int64[],System.Func{System.Int64,System.Double})">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Transform(System.Decimal[],System.Func{System.Decimal,System.Double})">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Transform(System.Byte[],System.Func{System.Byte,System.Double})">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Transform(System.Int16[],System.Func{System.Int16,System.Double})">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.Transform(System.Int16[],System.Func{System.Int16,System.Int16})">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToStr(System.Double[],System.String)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToStr(System.Single[],System.String)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToStr(System.Int32[],System.String)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToStr(System.Int16[],System.String)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToStr(System.Byte[],System.String)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToStr(System.Int64[],System.String)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="M:AI.ExtensionMath.ToStr(System.Decimal[],System.String)">
            <summary>
            Методы расширения из AI.dll
            </summary>
        </member>
        <member name="T:AI.OperationMath">
            <summary>
            Математические операции
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Double[],System.Double[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Single[],System.Double[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Byte[],System.Double[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Int16[],System.Double[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Int32[],System.Double[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Int64[],System.Double[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Decimal[],System.Double[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Double[],System.Single[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Double[],System.Int32[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Double[],System.Int16[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Double[],System.Byte[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Double[],System.Int64[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Double[],System.Decimal[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Double[],AI.Vector)">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(AI.Vector,AI.Vector)">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Single[],System.Single[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Int32[],System.Single[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Int64[],System.Single[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Byte[],System.Single[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Int16[],System.Single[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Decimal[],System.Single[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Single[],System.Int32[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Single[],System.Int16[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Single[],System.Byte[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Single[],System.Int64[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Single[],System.Decimal[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Int32[],System.Int32[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Int16[],System.Int32[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Byte[],System.Int32[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Int32[],System.Int16[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="M:AI.OperationMath.LinComb(System.Int32[],System.Byte[])">
            <summary>
            Скалярное произведение, линейная комбинация
            </summary>
        </member>
        <member name="T:AI.Functions">
            <summary>
            Математические фукции
            </summary>
        </member>
        <member name="M:AI.Functions.NextPow2(System.Int32)">
            <summary>
            Следующая степень числа 2
            </summary>
            <param name="n">входное число</param>
            <returns></returns>
        </member>
        <member name="M:AI.Functions.Summ(System.Double[])">
            <summary>
            Суммирование всех элементов массива типа double
            </summary>
        </member>
        <member name="M:AI.Functions.Summ(AI.Vector[])">
            <summary>
            Поэлементная сумма
            </summary>
            <param name="vectors">Массив векторов</param>
            <returns>Результирующий вектор</returns>
        </member>
        <member name="M:AI.Functions.Summ(AI.Vector)">
            <summary>
            Суммирование всех элементов действительного вектора
            </summary>
        </member>
        <member name="M:AI.Functions.Summ(AI.ComplexVector)">
            <summary>
            Суммирование всех элементов комплексного вектора
            </summary>
        </member>
        <member name="M:AI.Functions.Summ(System.Int32[])">
            <summary>
            Суммирование всех элементов массива типа int
            </summary>
        </member>
        <member name="M:AI.Functions.Integral(AI.Vector)">
            <summary>
            Вычисляет интегральную функцию действительный вектор
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Functions.Integral(AI.Vector,System.Double)">
            <summary>
            Вычисляет интегральную функцию действительный вектор
            </summary>
            <param name="A">Входной вектор</param>
            <param name="fd">Частота дискретизации</param>
        </member>
        <member name="M:AI.Functions.WindowFunc(AI.Vector,System.Func{AI.Vector,AI.Vector},System.Int32)">
            <summary>
            Реализация оконных функций
            </summary>
            <param name="vect">входной вектор</param>
            <param name="Function">функция</param>
            <param name="window">окно</param>
            <returns>Результат применения ф-и</returns>
        </member>
        <member name="M:AI.Functions.WindowFuncDouble(AI.Vector,System.Func{AI.Vector,System.Double},System.Int32)">
            <summary>
            Реализация оконных функций
            </summary>
            <param name="vect">входной вектор</param>
            <param name="Function">функция</param>
            <param name="window">окно</param>
            <returns>Результат применения ф-и</returns>
        </member>
        <member name="M:AI.Functions.WindowFuncDouble(AI.Vector,System.Func{AI.Vector,System.Double},System.Int32,System.Int32)">
            <summary>
            Реализация оконных функций
            </summary>
            <param name="vect">входной вектор</param>
            <param name="Function">функция</param>
            <param name="window">окно</param>
            <param name="stride">шаг</param>
            <returns>Результат применения ф-и</returns>
        </member>
        <member name="M:AI.Functions.Diff(AI.Vector)">
            <summary>
            Вычисляет диференциальную функцию действительный вектор
            </summary>
            <param name="A"> Входной вектор</param>
        </member>
        <member name="M:AI.Functions.Diff(AI.Vector,System.Double)">
            <summary>
            Вычисляет диференциальную функцию действительный вектор
            </summary>
            <param name="A"> Входной вектор</param>   
            <param name="fd"> Частота дискретизации</param>
        </member>
        <member name="M:AI.Functions.DiffWithOutF(AI.Vector,System.Double)">
            <summary>
            Вычисляет диференциальную функцию действительный вектор (без первого отсчета)
            </summary>
            <param name="A"> Входной вектор</param>
            <param name="fd"> Частота дискретизации</param>
        </member>
        <member name="M:AI.Functions.Diff(AI.ComplexVector)">
            <summary>
            Вычисляет диференциальную функцию комплексный вектор
            </summary>
            <param name="A">Входной вектор</param>
        </member>
        <member name="M:AI.Functions.Diff(AI.ComplexVector,System.Int32)">
            <summary>
            Вычисляет i-ю производную по dx
            </summary>
            <param name="A">Входной вектор</param>
            <param name="i">Порядок производной 1, 2, 3 ....</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.Functions.Diff(AI.Vector,System.Int32)">
            <summary>
            Вычисляет i-ю производную по dx
            </summary>
            <param name="A">Входной вектор</param>
            <param name="i">Порядок производной 1, 2, 3 ....</param>
            <returns>Действительный вектор</returns>
        </member>
        <member name="M:AI.Functions.Multiplication(System.Double[])">
            <summary>
            Перемножение всех элементов массива типа double
            </summary>
        </member>
        <member name="M:AI.Functions.Multiplication(AI.Vector)">
            <summary>
            Перемножение всех элементов действительного вектора
            </summary>
        </member>
        <member name="M:AI.Functions.MultiplicationFunction(AI.Vector)">
            <summary>
            Перемножение всех элементов действительного вектора
            </summary>
        </member>
        <member name="M:AI.Functions.PowFunction(System.Double,System.Int32)">
            <summary>
            Возвращает набор степеней данного числа
            </summary>
            <param name="inp">Число</param>
            <param name="pow">максимальная степень</param>
        </member>
        <member name="M:AI.Functions.Multiplication(System.Int32[])">
            <summary>
            Перемножение всех элементов массива типа int
            </summary>
        </member>
        <member name="T:AI.IMathStruct">
            <summary>
            Интерфейс математической структуры
            </summary>
        </member>
        <member name="T:AI.Matrix">
            <summary>
            Класс реализующий матрицы и операции над ними
            </summary>
            
        </member>
        <member name="P:AI.Matrix.Matr">
            <summary>
            Массив значений в матрице
            </summary>
        </member>
        <member name="P:AI.Matrix.DataType">
            <summary>
            Тип матрицы
            </summary>
        </member>
        <member name="P:AI.Matrix.MatrixName">
            <summary>
            Имя матрицы
            </summary>
        </member>
        <member name="P:AI.Matrix.H">
            <summary>
            Высота
            </summary>
        </member>
        <member name="P:AI.Matrix.W">
            <summary>
            Ширина
            </summary>
        </member>
        <member name="P:AI.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Элемент матрицы
            </summary>
        </member>
        <member name="M:AI.Matrix.#ctor">
            <summary>
            Создает матрицу со всеми нулями размерности 3х3
            </summary>
        </member>
        <member name="M:AI.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            Создает матрицу на основе двумерного массива
            </summary>
        </member>
        <member name="M:AI.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Создает матрицу со всеми нулями размерности MxN
            </summary>
        </member>
        <member name="M:AI.Matrix.op_Addition(AI.Matrix,AI.Matrix)">
            <summary>
             сложение 
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Addition(AI.Matrix,System.Double)">
            <summary>
             сложение 
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Addition(System.Double,AI.Matrix)">
            <summary>
            Сложение числа и матрицы
            </summary>
            <param name="k"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Subtraction(AI.Matrix,System.Double)">
            <summary>
            вычитание
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Subtraction(System.Double,AI.Matrix)">
            <summary>
            вычитание
            </summary>
            <param name="k"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Subtraction(AI.Matrix,AI.Matrix)">
            <summary>
             вычитание матриц
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Multiply(AI.Matrix,System.Double)">
            <summary>
            Умножение матрицы на число
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Division(AI.Matrix,System.Double)">
            	
        </member>
        <member name="M:AI.Matrix.op_Division(System.Double,AI.Matrix)">
            <summary>
             Умножение матрицы на число	
            </summary>
            <param name="k"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Multiply(System.Double,AI.Matrix)">
            <summary>
            Умножение вектора на матрицу
            </summary>
            <param name="k"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Multiply(AI.Matrix,AI.Vector)">
            <summary>
            Умножение вектора на матрицу
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Multiply(AI.Vector,AI.Matrix)">
            <summary>
            Умножение вектора на матрицу
            </summary>
            <param name="B"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Multiply(AI.Matrix,AI.Matrix)">
            <summary>
            Умножение матриц
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.Min">
            <summary>
            Минимальное значение матрицы
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.Max">
            <summary>
            Максимальное значение матрицы
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.Mean">
            <summary>
            Среднее арифметическое матрицы 
            </summary>
        </member>
        <member name="M:AI.Matrix.Summ">
            <summary>
            Сумма 
            </summary>
        </member>
        <member name="M:AI.Matrix.AdamarProduct(AI.Matrix)">
            <summary>
            Адамарово произведение(поэлементное)
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.MaxPool(System.Int32,System.Int32,System.Int32[0:,0:]@)">
            <summary>
            Макс пулинг
            </summary>
            <param name="poolH">шаг по высоте</param>
            <param name="poolW">шаг по ширине</param>
            <param name="indexPool">Максимальные индексы в исходной матрице</param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.Flatten">
            <summary>
            Преобразование матрицы в вектор
            </summary>
            <returns>Вектор</returns>
        </member>
        <member name="M:AI.Matrix.FlattenGradientMSR(AI.Vector,AI.Vector,System.Int32,System.Int32)">
            <summary>
            Расчет градиента
            </summary>
            <param name="output"></param>
            <param name="ideal"></param>
            <param name="h"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.FlattenGradientDelts(AI.Vector,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="delts"></param>
            <param name="h"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.Mul2VecFast(AI.Vector,AI.Vector)">
            <summary>
            Умножение вектора-столбца на вектор строку, возвращается матрица результата
            </summary>
            <param name="ABinaryBip">Бинарный вектор</param>
            <param name="B">строка</param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.Mul2Vec(AI.Vector,AI.Vector)">
            <summary>
            Умножение вектора-столбца на вектор строку, возвращается матрица результата
            </summary>
            <param name="A">столбец</param>
            <param name="B">строка</param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.Sum2Vec(AI.Vector,AI.Vector)">
            <summary>
            Сложение вектора-столбца на вектор строку по следующему правилу "matr[i, j] = B[j] + A[i];" возвращается матрица результата
            </summary>
            <param name="A">столбец</param>
            <param name="B">строка</param>
        </member>
        <member name="M:AI.Matrix.Norm2Vec(AI.Vector,AI.Vector)">
            <summary>
            Вычисление нормы по след. правилу  matr[i, j] = Math.Sqrt(B[j]*B[j]+ A[i]*A[i]);, возвращается матрица результата
            </summary>
            <param name="A">столбец</param>
            <param name="B">строка</param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.MulMatrOnVectColumn(AI.Vector)">
            <summary>
            Умножение матрицы на вектор столбец
            </summary>
            <param name="vectCol">Вектор столбец</param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.ToVector">
            <summary>
             Преобразование матрицы в вектор
            </summary>
        </member>
        <member name="M:AI.Matrix.GradientMatrixConvDelts(AI.Matrix,AI.Matrix)">
            <summary>
            Градиент свертки
            </summary>
            <param name="core"></param>
            <param name="delts"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.Region(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Выделение региона
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.Tr">
            <summary>
            Транспонирование матрицы
            </summary>
            <returns>Возвращает транспонированную матрицу</returns>
        </member>
        <member name="M:AI.Matrix.TransformMatrix(System.Func{System.Double,System.Double})">
            <summary>
            Трансформирование матрицы
            </summary>
            <param name="transformFunc">Функция трансформации</param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.Pow(AI.Matrix,System.Int32)">
            <summary>
            Возведение матрицы в степень 
            путем матричного умножения на саму себя
            </summary>
            <param name="A">Входная матрица</param>
            <param name="stepen">Степень</param>
        </member>
        <member name="M:AI.Matrix.Copy">
            <summary>
            Копирование матрицы
            </summary>
            <returns>Возвращает копию</returns>
        </member>
        <member name="M:AI.Matrix.Spagetiz">
            <summary>
            Вытягивает матрицу в вектор
            </summary>
        </member>
        <member name="M:AI.Matrix.ToString">
            <summary>
            Выводит значение элементов матрицы в виде текста
            </summary>
        </member>
        <member name="M:AI.Matrix.ToStringFloat">
            <summary>
            Перевод в строку тип float
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.ToStringRound7">
            <summary>
            Сохранение и округление
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.ToString(System.String)">
            <summary>
            Выводит значение элементов матрицы в виде текста
            </summary>
            <param name="sep">Разделитель горизонтальный</param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.GetColumns(AI.Matrix)">
            <summary>
            Разложение матрицы на столбцы
            </summary>
            <param name="matr">Матрица</param>
            <returns>Массив векторов</returns>
        </member>
        <member name="M:AI.Matrix.Round(System.Int32)">
            <summary>
            Округление значений
            </summary>
            <param name="n">До какого знака</param>
        </member>
        <member name="M:AI.Matrix.SaveAsText(System.String)">
            <summary>
            Сохранение матрицы в виде текста
            </summary>
            <param name="path">Путь до файла</param>
        </member>
        <member name="M:AI.Matrix.LoadFromText(System.String)">
            <summary>
            Загрузка матрицы из текстового файла
            </summary>
            <param name="path">Путь до текстового файла</param>
        </member>
        <member name="M:AI.Matrix.Save(System.String)">
            <summary>
            Сохранение матрицы
            </summary>
            <param name="path">Путь до файла</param>
        </member>
        <member name="M:AI.Matrix.AlternativMatrix(System.Func{System.Double,System.Double}[],AI.Vector)">
            <summary>
            Альтернативная матрица
            </summary>
            <param name="functions">Функции</param>
            <param name="values">Значения</param>
            <returns>Возвращает альтернативную матрицу</returns>
        </member>
        <member name="M:AI.Matrix.OrtogonalMatrix(System.Func{System.Int32,System.Double,System.Double},AI.Vector,System.Int32)">
            <summary>
            Ортогональная матрица
            </summary>
            <param name="functions">Порождающая функция</param>
            <param name="values">Значения</param>
            <param name="count">Число выходов</param>
            <returns>Возвращает ортогональную матрицу</returns>
        </member>
        <member name="M:AI.Matrix.Determinant">
            <summary>
            Расчет определителя матрицы
            </summary>
            <returns>Определитель</returns>
        </member>
        <member name="M:AI.Matrix.ToTriangularMatr">
            <summary>
            Переводит произвольную матрицу в треугольную
            </summary>
            <returns>Диагональная матрица</returns>
        </member>
        <member name="M:AI.Matrix.GetVector(System.Int32,System.Int32)">
            <summary>
            Возвращает вектор с нужного среза, нужный индекс
            </summary>
            <param name="index">Индекс</param>
            <param name="dimension">Срез/размерность</param>
            <returns>Вектор</returns>
        </member>
        <member name="M:AI.Matrix.Swap(System.Int32,System.Int32,System.Int32)">
            <summary>
            Перегруппировка матрицы (Замена индексов)
            </summary>
            <param name="i">На какой индекс заменить</param>
            <param name="j">Какой индекс заменить</param>
            <param name="dimension">Размерность среза 0 или 1</param>
        </member>
        <member name="M:AI.Matrix.CorrelationMatrixNorm(AI.Vector[])">
            <summary>
            Метод создает матрицу с коэффициентами попарной корреляции векторов
            </summary>
            <param name="vectors">Вектора</param>
            <returns>Корреляционная матрица</returns>
        </member>
        <member name="M:AI.Matrix.Open(System.String)">
            <summary>
            Загрузка матрицы
            </summary>
            <param name="path">Путь до файла</param>		
        </member>
        <member name="T:AI.MatrixType">
            <summary>
            Тип матрицы
            </summary>
        </member>
        <member name="F:AI.MatrixType.Image">
            <summary>
            Изображение
            </summary>
        </member>
        <member name="F:AI.MatrixType.MatStruct">
            <summary>
            Математическая структура
            </summary>
        </member>
        <member name="T:AI.MatrixSaver">
            <summary>
            Класс для сохранения матрицы
            </summary>
        </member>
        <member name="M:AI.MatrixSaver.Save(System.String,AI.Matrix)">
            <summary>
            Сохранение матрицы
            </summary>
            <param name="path">Путь</param>
            <param name="matrix">Матрица</param>
        </member>
        <member name="M:AI.MatrixSaver.Load(System.String)">
            <summary>
            Загрузка матрицы
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="T:AI.Statistics.Histogramm">
            <summary>
            Структура гистограммы
            </summary>
        </member>
        <member name="P:AI.Statistics.Histogramm.X">
            <summary>
            Значения столбцов
            </summary>
        </member>
        <member name="P:AI.Statistics.Histogramm.Y">
            <summary>
            Высоты столбцов
            </summary>
        </member>
        <member name="P:AI.Statistics.Histogramm.Name">
            <summary>
            Название гистограммы
            </summary>
        </member>
        <member name="P:AI.Statistics.Histogramm.Info">
            <summary>
            Описание гистограммы
            </summary>
        </member>
        <member name="P:AI.Statistics.Histogramm.XLable">
            <summary>
            Название оси "Х" гистограммы
            </summary>
        </member>
        <member name="P:AI.Statistics.Histogramm.YLables">
            <summary>
            Название оси "У" гистограммы
            </summary>
        </member>
        <member name="M:AI.Statistics.Histogramm.Save(System.String)">
            <summary>
            Сохранение гистограммы
            </summary>
            <param name="path">Путь до файла</param>
        </member>
        <member name="M:AI.Statistics.Histogramm.IntegralValueH(AI.Matrix)">
            <summary>
            Сумма значений по строкам
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Histogramm.IntegralValueHMean(AI.Matrix)">
            <summary>
            Средние знач. яркости
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Histogramm.IntegralValueW(AI.Matrix)">
            <summary>
            Сумма значений по строкам
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Histogramm.IntegralValueWMean(AI.Matrix)">
            <summary>
            Средние знач. яркости
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Histogramm.HarAnd(AI.Matrix)">
            <summary>
            Получение характеристики яркости на базе умножения(Эквивалент "И")
            </summary>
            <param name="matrix">Входная матрица</param>
        </member>
        <member name="M:AI.Statistics.Histogramm.HarSumm(AI.Matrix)">
            <summary>
            Получение характеристики яркости на базе сложения
            </summary>
            <param name="matrix">Входная матрица</param>
        </member>
        <member name="M:AI.Statistics.Histogramm.HarNorm(AI.Matrix)">
            <summary>
            Получение характеристики яркости на базе вычисления модуля
            </summary>
            <param name="matrix">Входная матрица</param>
        </member>
        <member name="M:AI.Statistics.Histogramm.Open(System.String)">
            <summary>
            Загрузка гистограммы
            </summary>
            <param name="path">Путь до файла</param>		
        </member>
        <member name="T:AI.Statistics.Quantile">
            <summary>
            Квантили
            </summary>
        </member>
        <member name="P:AI.Statistics.Quantile.SortVec">
            <summary>
            Сортированный вектор
            </summary>
        </member>
        <member name="M:AI.Statistics.Quantile.#ctor(AI.Vector)">
            <summary>
            Квантиль
            </summary>
            <param name="vect">Вектор</param>
        </member>
        <member name="M:AI.Statistics.Quantile.#ctor(AI.Matrix)">
            <summary>
            Квантиль
            </summary>
            <param name="matr">Матрица</param>
        </member>
        <member name="M:AI.Statistics.Quantile.GetQuantile(System.Double)">
            <summary>
            Получение заданного квантиля (0 - 1)
            </summary>
            <param name="q">Квантиль</param>
            <returns></returns>
        </member>
        <member name="T:AI.Statistics.Statistic">
            <summary>
            Класс содержит методы для статистического анализа.
            А так же генераторы псевдо случайных чисел
            </summary>
        </member>
        <member name="P:AI.Statistics.Statistic.SCO">
            <summary>
            Среднеквадратичное отклонение
            </summary>
        </member>
        <member name="P:AI.Statistics.Statistic.MinValue">
            <summary>
            Минимальное значение в массиве
            </summary>
        </member>
        <member name="P:AI.Statistics.Statistic.MaxValue">
            <summary>
            Максимальное значение в массиве
            </summary>
        </member>
        <member name="P:AI.Statistics.Statistic.Dispersia">
            <summary>
            Дисперсия
            </summary>
        </member>
        <member name="P:AI.Statistics.Statistic.Expected">
            <summary>
            Математическое ожидание
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.#ctor(AI.Vector)">
            <summary>
            Создает объек класса Statistic, принимает вектор входных значений случайной переменной
            </summary>
            <param name="A">Вектор значений</param>
        </member>
        <member name="M:AI.Statistics.Statistic.ExpectedValue">
            <summary>
            Математическое ожидание
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.Dispers">
            <summary>
            Дисперсия
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.Std">
            <summary>
            СКО
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.Dispers(AI.Vector)">
            <summary>
            Дисперсия вектора
            </summary>
            <param name="vector">Входной вектор</param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.Std(AI.Vector)">
            <summary>
            Среднеквадратичное отклонение
            </summary>
            <param name="vector">Входной вектор</param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.rand(System.Int32)">
            <summary>
            Генератор случайных чисел с равномерным распределением
            </summary>
            <param name="n">Длинна вектора</param>
            <returns>Возвращает вектор случайных чисел</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.rand(System.Int32,System.Random)">
            <summary>
            Генератор случайных чисел с равномерным распределением
            </summary>
            <param name="n">Длинна вектора</param>
            <param name="random">ГСПЧ</param>
            <returns>Возвращает вектор случайных чисел</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.Gauss(System.Random)">
            <summary>
            Гауссовское распределение
            </summary>
            <returns>Возвращает норм. распред величину СКО = 1, M = 0</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.randNorm(System.Int32)">
            <summary>
            Генератор случайных чисел с нормальным распределением
            </summary>
            <param name="n">Длинна вектора</param>
            <returns>Возвращает вектор случайных чисел</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.randNorm(System.Int32,System.Random)">
            <summary>
            Генератор случайных чисел с нормальным распределением
            </summary>
            <param name="n">Длинна вектора</param>
            <param name="rnd">Генератор случайных чисел</param>
            <returns>Возвращает вектор случайных чисел</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.rand(System.Int32,System.Int32)">
            <summary>
            Cоздает матрицу с равномерно распределенными значениями
            размерности m на n
            </summary>
            <param name="m">Количество строк</param>
            <param name="n">Количество столбцов</param>
        </member>
        <member name="M:AI.Statistics.Statistic.rand(System.Int32,System.Int32,System.Random)">
            <summary>
            Cоздает матрицу с равномерно распределенными значениями
            размерности m на n
            </summary>
            <param name="m">Количество строк</param>
            <param name="n">Количество столбцов</param>
            <param name="random">ГСПЧ</param>
        </member>
        <member name="M:AI.Statistics.Statistic.rand(System.Int32,System.Int32,System.Int32)">
            <summary>
            Тензор
            </summary>
            <param name="h">Высота</param>
            <param name="w">Ширина</param>
            <param name="d">Глубина</param>
        </member>
        <member name="M:AI.Statistics.Statistic.rand(System.Int32,System.Int32,System.Int32,System.Random)">
            <summary>
            Тензор
            </summary>
            <param name="h">Высота</param>
            <param name="w">Ширина</param>
            <param name="d">Глубина</param>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.randNorm(System.Int32,System.Int32,System.Int32)">
            <summary>
            Тензор
            </summary>
            <param name="h">Высота</param>
            <param name="w">Ширина</param>
            <param name="d">Глубина</param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.MeanAbs(AI.Vector)">
            <summary>
            Возвращает средний модуль
            </summary>
            <param name="data">Данные</param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.randNorm(System.Int32,System.Int32,System.Random)">
            <summary>
            Cоздает матрицу с нормально распределенными значениями
            размерности m на n
            </summary>
            <param name="m">Количество строк</param>
            <param name="n">Количество столбцов</param>
            <param name="rn">ГПСЧ</param>
        </member>
        <member name="M:AI.Statistics.Statistic.randNorm(System.Int32,System.Int32,System.Int32,System.Random)">
            <summary>
            Тензор
            </summary>
            <param name="h">Высота</param>
            <param name="w">Ширина</param>
            <param name="d">Глубина</param>
            <param name="random">ГПСЧ</param>
        </member>
        <member name="M:AI.Statistics.Statistic.MaximalValue(AI.Vector)">
            <summary>
            Максимальное значение вектора
            </summary>
            <param name="vect">Вектор</param>
        </member>
        <member name="M:AI.Statistics.Statistic.MinimalValue(AI.Vector)">
            <summary>
            Минимальное значение вектора
            </summary>
            <param name="vect">Вектор</param>
        </member>
        <member name="M:AI.Statistics.Statistic.rand(System.Int16)">
            <summary>
            Cоздает матрицу с равномерно распределенными значениями
            размерности n на n
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.ExpectedValue(AI.Vector)">
            <summary>
            Математическое ожидание
            </summary>
            <param name="vector">вектор, содержащий отсчеты случайной величины</param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.randNorm(System.Int32,System.Int32)">
            <summary>
            Cоздает матрицу с нормально распределенными значениями
            размерности m на n
            </summary>
            <param name="m">Количество строк</param>
            <param name="n">Количество столбцов</param>
        </member>
        <member name="M:AI.Statistics.Statistic.randNorm(System.Int16)">
            <summary>
            Cоздает матрицу с нормально распределенными значениями
            размерности n на n
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.randNorm">
            <summary>
            Генератор случайных чисел с нормальным распределением
            </summary>
            <returns>Возвращает случайные числа</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.Histogramm(System.Int32)">
            <summary>
            Строит гистограмму
            </summary>
            <param name="nRazr">Количество разрядов гистограммы</param>
            <returns>возращает вектор длинной nRazr, содержащий отсчеты для построения гистограммы</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.InitialMoment(System.Int32)">
            <summary>
            Начальный момент
            </summary>
            <param name="n">порядок момента 1,2,3...</param>
            <returns>Возвращает число типа Double</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.CentrMoment(System.Int32)">
            <summary>
            Центральный момент
            </summary>
            <param name="n">порядок момента 1,2,3...</param>
            <returns>Возвращает число типа Double</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.Asymmetry">
            <summary>
            Асимметрия распределения
            </summary>
            <returns>Возвращает коэффициент асимметрии, число типа Double</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.Excess">
            <summary>
            Эксцесс, "крутость" распределения
            </summary>
            <returns>Возвращает коэффициент эксцесса, число типа Double</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.Cov(AI.Vector,AI.Vector)">
            <summary>
            Ковариация(корреляционный момент, линейная зависимость) двух векторов,
            длины векторов должны быть равны
            </summary>
            <param name="X">первый вектор</param>
            <param name="Y">второй вектор</param>
            <returns>Возвращает число типа Double</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.CorrelationCoefficient(AI.Vector,AI.Vector)">
            <summary>
            Коэфициент корреляции
            </summary>
            <param name="X">Вектор X</param>
            <param name="Y">Вектор Y</param>
            <returns>Возвращает коэф. кор.</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.MeanVector(AI.Vector[])">
            <summary>
            Усреднение по выборке(ансамблю)
            </summary>
            <param name="vectors">Выборка</param>
            <returns>Средний вектор</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.MeanGeom(AI.Vector)">
            <summary>
            Среднее геометрическое 
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.MeanGarmonic(AI.Vector)">
            <summary>
            Среднее гармоническое
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.RMS(AI.Vector)">
            <summary>
            Среднeквадратичное значение
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.EnsembleDispersion(AI.Vector[])">
            <summary>
            Дисперсия по ансамлю
            </summary>
            <param name="ensemble">Ансамбль векторов</param>
        </member>
        <member name="M:AI.Statistics.Statistic.EnsembleStd(AI.Vector[])">
            <summary>
            СКО по ансамлю
            </summary>
            <param name="ensemble">Ансамбль векторов</param>
        </member>
        <member name="M:AI.Statistics.Statistic.MaxEns(AI.Vector[])">
            <summary>
            Максимум по ансамлю
            </summary>
            <param name="ensemble">Ансамбль векторов</param>
        </member>
        <member name="M:AI.Statistics.Statistic.MaxEnergeVector(AI.Vector[])">
            <summary>
            Возвращает вектор с максимальной энергией
            </summary>
            <param name="ens">Ансамбль векторов</param>
            <returns>Вектор с максимальной энергией</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.SimpleMeanFreq(AI.Vector)">
            <summary>
            Средняя частота (не нормированная, зависит от кол-ва точек)
            </summary>
            <param name="signal">Сигнал</param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.MeanFreq(AI.Vector,System.Double)">
            <summary>
            Средняя частота сигнала
            </summary>
            <param name="signal">Сигнал</param>
            <param name="fd">Частота дискретизации</param>
            <returns>Средняя частота [Гц]</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.DivFreq(AI.Vector)">
            <summary>
            Изменение частоты
            </summary>
            <param name="signal">Сигнал</param>
            <returns>Дивиация средней частоты</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.MeanStep(AI.Vector)">
            <summary>
            Средний шаг, насколько в среднем отличается x[i] от x[i+1]
            </summary>
            <param name="vector">Последовательность</param>
        </member>
        <member name="T:AI.Tensor">
            <summary>
            Представляет тензор 3-го ранга
            </summary>
        </member>
        <member name="F:AI.Tensor.D">
            <summary>
            Глубина
            </summary>
        </member>
        <member name="F:AI.Tensor.H">
            <summary>
            Высота
            </summary>
        </member>
        <member name="F:AI.Tensor.DataInTensor">
            <summary>
            Значения
            </summary>
        </member>
        <member name="F:AI.Tensor.W">
            <summary>
            Ширина
            </summary>
        </member>
        <member name="P:AI.Tensor.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Доступ по индексу
            </summary>
            <param name="i">высота</param>
            <param name="j">ширина</param>
            <param name="k">глубина</param>
            <returns></returns>
        </member>
        <member name="M:AI.Tensor.#ctor(System.Double[0:,0:,0:])">
            <summary>
            Инициализация массивом
            </summary>
            <param name="data">Значения</param>
        </member>
        <member name="M:AI.Tensor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Создание нулевого тензора
            </summary>
            <param name="h">высота</param>
            <param name="w">ширина</param>
            <param name="d">глубина</param>
        </member>
        <member name="M:AI.Tensor.#ctor(System.Double[])">
            <summary>
            Инициализация с помощь интерфейса IList
            </summary>
            <param name="data">Значения</param>
        </member>
        <member name="M:AI.Tensor.Copy">
            <summary>
            Копирует значения
            </summary>
        </member>
        <member name="M:AI.Tensor.op_Addition(AI.Tensor,System.Double)">
            <summary>
            Сложение
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Tensor.op_Addition(AI.Tensor,AI.Tensor)">
            <summary>
            Сложение
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Tensor.op_Addition(System.Double,AI.Tensor)">
            <summary>
            Сложение
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Tensor.op_Multiply(AI.Tensor,System.Double)">
            <summary>
            Умножение
            </summary>
            <param name="A"></param>
            <param name="K"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Tensor.op_Multiply(System.Double,AI.Tensor)">
            <summary>
            Умножение
            </summary>
            <param name="A"></param>
            <param name="K"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Tensor.op_Multiply(AI.Tensor,AI.Tensor)">
            <summary>
            Умножение
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Tensor.op_Division(AI.Tensor,System.Double)">
            <summary>
            Деление
            </summary>
        </member>
        <member name="M:AI.Tensor.op_Division(System.Double,AI.Tensor)">
            <summary>
            Деление
            </summary>
        </member>
        <member name="M:AI.Tensor.op_Division(AI.Tensor,AI.Tensor)">
            <summary>
            Деление
            </summary>
        </member>
        <member name="M:AI.Tensor.op_Subtraction(AI.Tensor,System.Double)">
            <summary>
            Вычитание
            </summary>
        </member>
        <member name="M:AI.Tensor.op_Subtraction(System.Double,AI.Tensor)">
            <summary>
            Вычитание
            </summary>
        </member>
        <member name="M:AI.Tensor.op_Subtraction(AI.Tensor,AI.Tensor)">
            <summary>
            Вычитание
            </summary>
        </member>
        <member name="M:AI.Tensor.TransformTensor(System.Func{System.Double,System.Double})">
            <summary>
            Поэлементное трансформирование тензора
            </summary>
            <param name="transform">Функция для трансформирования</param>
        </member>
        <member name="M:AI.Tensor.TensorToMatrixs">
            <summary>
            Преобразование тензора в массив матриц
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Tensor.MatricesToTensor(AI.Matrix[])">
            <summary>
            Преобразование массива матриц в тензор
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Tensor.ToVector">
            <summary>
            Преобразование в вектор
            </summary>
        </member>
        <member name="M:AI.Tensor.VectorToTensor(AI.Vector,System.Int32,System.Int32)">
            <summary>
            Преобразование вектора в тензор
            </summary>
        </member>
        <member name="M:AI.Tensor.ToString">
            <summary>
            Перевод тензора в строку
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Tensor.DivD(AI.Vector)">
            <summary>
            Вычитание вектора поэлементно из глубины
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Tensor.PlusD(AI.Vector)">
            <summary>
            Прибавление вектора поэлементно к глубине
            </summary>
        </member>
        <member name="M:AI.Tensor.Sum">
            <summary>
            Сумма всех элементов тензора
            </summary>
        </member>
        <member name="M:AI.Tensor.Mean">
            <summary>
            Среднее всех элементов тензора
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Tensor.Dispersion(System.Double)">
            <summary>
            Дисперсия
            </summary>
            <param name="mean">Вычесленное среднее</param>
            <returns></returns>
        </member>
        <member name="M:AI.Tensor.Dispersion">
            <summary>
            Дисперсия
            </summary>
        </member>
        <member name="M:AI.Tensor.Std(System.Double)">
            <summary>
            Среднеквадратичное отклонение
            </summary>
            <param name="mean">Среднее</param>
            <returns></returns>
        </member>
        <member name="M:AI.Tensor.Std">
            <summary>
            Среднеквадратичное отклонение
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.Vector">
            <summary>
            Класс реализующий вектора и операции над ними
            </summary>
        </member>
        <member name="P:AI.Vector.Current">
            <summary>
            Текущий элемент
            </summary>
        </member>
        <member name="M:AI.Vector.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.MoveNext">
            <summary>
            Перевод указателя на следующий элемент
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.Reset">
            <summary>
            Сброс указателя
            </summary>
        </member>
        <member name="P:AI.Vector.Count">
            <summary>
            Кол-во элементов, аналог N
            </summary>
        </member>
        <member name="P:AI.Vector.IsReadOnly">
            <summary>
            Является коллекция только для чтения
            </summary>
        </member>
        <member name="M:AI.Vector.IndexOf(System.Double)">
            <summary>
            Определяет индекс, аналог IndexValue
            </summary>
            <param name="item">Число типа double</param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.Insert(System.Int32,System.Double)">
            <summary>
            Добавление элемента после определенного индекса
            </summary>
            <param name="index">Индекс, куда вставить</param>
            <param name="item">значение, что вставить</param>
        </member>
        <member name="M:AI.Vector.RemoveAt(System.Int32)">
            <summary>
            Удаление по индексу
            </summary>
            <param name="index">Индекс удаляемого элемента</param>
        </member>
        <member name="M:AI.Vector.Add(System.Double)">
            <summary>
            Добавление элемента
            </summary>
            <param name="item">Элемент</param>
        </member>
        <member name="M:AI.Vector.AddCB(System.Double)">
            <summary>
            Добавление элемента в циклический буффер
            </summary>
            <param name="item">Элемент</param>
        </member>
        <member name="M:AI.Vector.Clear">
            <summary>
            Очистка вектора
            </summary>
        </member>
        <member name="M:AI.Vector.Contains(System.Double)">
            <summary>
            Проверяет, содержит ли вектор данный элемент
            </summary>
            <param name="item">Число double</param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.CopyTo(System.Double[],System.Int32)">
            <summary>
            Копирование данных начиная с  arrayIndex
            </summary>
            <param name="array">Массив</param>
            <param name="arrayIndex">Начало копирование</param>
        </member>
        <member name="M:AI.Vector.Remove(System.Double)">
            <summary>
            Удаляет первое вхождение item
            </summary>
            <param name="item">Число double</param>
        </member>
        <member name="M:AI.Vector.Sort">
            <summary>
            Сортировка
            </summary>
        </member>
        <member name="P:AI.Vector.DataInVector">
            <summary>
            Массив типа double содержащий отсчеты вектора
            </summary>
        </member>
        <member name="P:AI.Vector.N">
            <summary>
            Размерность вектора
            </summary>
        </member>
        <member name="P:AI.Vector.Item(System.Int32)">
            <summary>
            Доступ по индексу
            </summary>
            <param name="i">Индекс</param>
            <returns>Значение вектора</returns>
        </member>
        <member name="M:AI.Vector.#ctor">
            <summary>
            Создает вектор с нулями размерности 3
            </summary>
        </member>
        <member name="M:AI.Vector.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Создание вектора на базе интерфейса IEnumerable
            </summary>
            <param name="data">Данные</param>
        </member>
        <member name="M:AI.Vector.#ctor(System.Double)">
            <summary>
            Создает вектор размерности 1, со значением a
            </summary>
            <param name="a">Значение нулевой ячейки</param>
        </member>
        <member name="M:AI.Vector.#ctor(System.Int32)">
            <summary>
            Создает вектор с нулями размерности n
            </summary>
        </member>
        <member name="M:AI.Vector.#ctor(System.Double[])">
            <summary>
            Создает вектор на основе массива
            </summary>
        </member>
        <member name="M:AI.Vector.#ctor(System.Byte[])">
            <summary>
            Создает вектор на основе массива байт
            </summary>
        </member>
        <member name="M:AI.Vector.#ctor(System.IO.Stream)">
            <summary>
            Создает вектор из потока
            </summary>
        </member>
        <member name="M:AI.Vector.#ctor(System.String[])">
            <summary>
            Создает вектор на основе строк, где каждая строка представляет число double
            </summary>
            <param name="strVector"></param>
        </member>
        <member name="M:AI.Vector.#ctor(System.String,System.Char)">
            <summary>
            Создает вектор на основе текстового файла, где лежат числа double
            </summary>
            <param name="textPath">Путь до файла</param>
            <param name="separator">разделитель, 1 заменяется на \n</param>
        </member>
        <member name="M:AI.Vector.#ctor(System.String)">
            <summary>
            Создает вектор на основе текстового файла, каждая строка представляет число double
            </summary>
            <param name="textPath">Путь до файла</param>
        </member>
        <member name="M:AI.Vector.op_Multiply(AI.Vector,AI.Vector)">
            <summary>
            Умножение
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Addition(AI.Vector,AI.Vector)">
            <summary>
            Сложение
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Addition(AI.Vector,System.Double)">
            <summary>
            Сложение
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Addition(System.Double,AI.Vector)">
            <summary>
            Сложение
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Subtraction(System.Double,AI.Vector)">
            <summary>
            Вычитание
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Subtraction(AI.Vector,System.Double)">
            <summary>
            Вычитание
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_UnaryNegation(AI.Vector)">
            <summary>
            Отрицание
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Division(AI.Vector,AI.Vector)">
            <summary>
            Деление
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Subtraction(AI.Vector,AI.Vector)">
            <summary>
            Вычитание
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Multiply(System.Double,AI.Vector)">
            <summary>
            Умножение
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Multiply(AI.Vector,System.Double)">
            <summary>
            Умножение
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Division(System.Double,AI.Vector)">
            <summary>
            Деление
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Division(AI.Vector,System.Double)">
            <summary>
            Деление
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_ExclusiveOr(AI.Vector,System.Double)">
            <summary>
            Возведение в степень
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_ExclusiveOr(System.Double,AI.Vector)">
            <summary>
            Возведение в степень
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_ExclusiveOr(AI.Vector,AI.Vector)">
            <summary>
            Возведение в степень
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Modulus(AI.Vector,System.Double)">
            <summary>
            Остаток от деления
            </summary>
            <param name="k"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Modulus(System.Double,AI.Vector)">
            <summary>
            Остаток от деления
            </summary>
            <param name="k"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Modulus(AI.Vector,AI.Vector)">
            <summary>
            Остаток от деления поэлементно
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_BitwiseAnd(AI.Vector,AI.Vector)">
            <summary>
            Свертка
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_BitwiseOr(AI.Vector,AI.Vector)">
            <summary>
            Корреляция
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_LogicalNot(AI.Vector)">
            <summary>
            Автокорреляция
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Equality(AI.Vector,AI.Vector)">
            <summary>
            Проверка равенства
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Inequality(AI.Vector,AI.Vector)">
            <summary>
            Проверка равенства
            </summary>
            <param name="A">Вектор 1</param>
            <param name="B">Вектор 2</param>
            <returns>Равно ли</returns>
        </member>
        <member name="M:AI.Vector.Repeat(System.Int32)">
            <summary>
            Повтор вектора
            </summary>
            <param name="count">Число повторов</param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.Cos(AI.Vector)">
            <summary>
            Косинус угла между векторами
            </summary>
        </member>
        <member name="M:AI.Vector.VectorToBts">
            <summary>
            Вектор в массив байт
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.MaxOut">
            <summary>
            Преобразование вектора в число one-hot
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.MaxOutVector">
            <summary>
            Вывод индекса с максимальным значением
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.GetUnitVector">
            <summary>
            Получение единичного вектора(вектора направления)
            </summary>
        </member>
        <member name="M:AI.Vector.IndexDel(System.Int32)">
            <summary>
            Удаление по индексу
            </summary>
            <param name="index">Индекс</param>
        </member>
        <member name="M:AI.Vector.Round(System.Int32)">
            <summary>
            Округление
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.ElementDel(System.Double)">
            <summary>
            Удаление выбранного элемента
            </summary>
            <param name="element">Элементы</param>
        </member>
        <member name="M:AI.Vector.IndexValue(System.Double)">
            <summary>
            Выдает индекс по первому вхождению значения  
            </summary>
            <param name="value">значение</param>
        </member>
        <member name="M:AI.Vector.ElementsDel(AI.Vector)">
            <summary>
            Удаление выбранных элементов
            </summary>
            <param name="elements">Элементы</param>
        </member>
        <member name="M:AI.Vector.ElementsDel(System.Double[])">
            <summary>
            Удаление выбранных элементов
            </summary>
            <param name="elements">Элементы</param>
        </member>
        <member name="M:AI.Vector.ElementsDel(System.Collections.Generic.List{System.Double})">
            <summary>
            Удаление выбранных элементов
            </summary>
            <param name="elements">Элементы</param>
        </member>
        <member name="M:AI.Vector.SaveAsText(System.String)">
            <summary>
            Сохраняет вектор как текстовый файл
            </summary>
            <param name="path">Путь до файла</param>
        </member>
        <member name="M:AI.Vector.GetIntervalDouble(System.Int32,System.Int32,System.Double[])">
            <summary>
            Возвращает вектор в интервале [a;b]
            </summary>
            <param name="a">a - нижняя граница</param>
            <param name="b">b - верхняя граница</param>
            <param name="data">Данные массив double</param>
            <returns>Вектор</returns>
        </member>
        <member name="M:AI.Vector.GetInterval(System.Int32,System.Int32)">
            <summary>
            Возвращает вектор в интервале [a;b]
            </summary>
            <param name="a">a - нижняя граница</param>
            <param name="b">b - верхняя граница</param>
            <returns>Вектор</returns>
        </member>
        <member name="M:AI.Vector.Copy">
            <summary>
            Копирование вектора
            </summary>
            <returns>Возвращает копию</returns>
        </member>
        <member name="M:AI.Vector.AddSimmetr">
            <summary>
            Добавление отраженного вектора
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.Revers">
            <summary>
            Реверс вектора
            </summary>
        </member>
        <member name="M:AI.Vector.CutAndZero(System.Int32)">
            <summary>
            Дополнение нулями или обрезание до нужного размера 
            вектора.
            </summary>
            <param name="n">Новый размер</param>
        </member>
        <member name="M:AI.Vector.Shift(System.Int32)">
            <summary>
            Сдвиг последовательности на определенное число
            Пример: последовательность 1 2 3 сдвинута на 2
            это 0 0 1 2 3, на 4 это 0 0 0 0 1 2 3
            </summary>
            <param name="valueShift"> На сколько сдвинуть</param>
            <returns>возвращает вектор длинны N+valueShift</returns>
        </member>
        <member name="M:AI.Vector.ToMatrix">
            <summary>
            Преобразование вектора в матрицу
            </summary>
        </member>
        <member name="M:AI.Vector.Decim(System.Int32)">
            <summary>
            Децимация(прореживание) вектора
            </summary>
            <param name="kDecim">Коэффициент децимации</param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.UnPooling(System.Int32)">
            <summary>
            Увеличение частоты дискретизации, вставка нулей в секредину
            </summary>
            <param name="kUnPool">Число нулей между отсчетами исходного вектора</param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.InterpolayrZero(System.Int32)">
            <summary>
            Интерполяция поленомом нулевого порядка
            </summary>
            <param name="kInterp">коэффициент интерполяции</param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.AddOne">
            <summary>
            Добавляет 1 в начало
            </summary>
        </member>
        <member name="M:AI.Vector.Is0">
            <summary>
            Проверяет все ли элементы вектора нулевые
            </summary>
            <returns>true если все, false иначе</returns>
        </member>
        <member name="M:AI.Vector.Is0(System.Int32)">
            <summary>
            Проверяет нулевых элементов больше "n"
            </summary>
            <param name="n"></param>
            <returns>true если больше, false иначе</returns>
        </member>
        <member name="M:AI.Vector.Save(System.String)">
            <summary>
            Сохранение вектора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.Vector.Open(System.String)">
            <summary>
            Загрузка вектора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.Vector.ToList">
            <summary>
            Преобразование вектора в структуру типа List"double" 
            </summary>
        </member>
        <member name="M:AI.Vector.ToString">
            <summary>
            Выводит значение элементов вектора в виде строки
            </summary>
        </member>
        <member name="M:AI.Vector.Equals(System.Object)">
            <summary>
            Эквивалентность
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.GetHashCode">
            <summary>
            Хэш-код
            </summary>
        </member>
        <member name="M:AI.Vector.TransformVector(System.Func{System.Double,System.Double})">
            <summary>
            Преобразование вектора
            </summary>
            <param name="transformFunc">Функция преобразования</param>
        </member>
        <member name="M:AI.Vector.TransformVectorInd(System.Func{System.Int32,System.Double})">
            <summary>
            Преобразование вектора
            </summary>
            <param name="transformFunc">Функция преобразования, фунция от индекса</param>
        </member>
        <member name="M:AI.Vector.TransformVectorInd(System.Func{System.Int32,System.Double,System.Double})">
            <summary>
            Преобразование вектора
            </summary>
            <param name="transformFunc">Функция преобразования, фунция от индекса и значения
            F(int i, double vect_i)</param>
        </member>
        <member name="M:AI.Vector.TransformVectorX(AI.Vector,System.Func{System.Double,System.Double,System.Double})">
            <summary>
            Преобразование вектора(Используется вектора аргументов)
            </summary>
            <param name="transformFunc">Функция преобразования, фунция от значения вектора аргументов и текущего вектора
            double F(double x_i, double vect_i)</param>
            <param name="x">Вектор аргументов</param>
        </member>
        <member name="M:AI.Vector.Normal">
            <summary>
            Нормализация, приводит вектор к диапазону 0-1
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.Max">
            <summary>
            Максимальное значение
            </summary>
        </member>
        <member name="M:AI.Vector.MaxAbs">
            <summary>
            Максимальное значение по модулю
            </summary>
        </member>
        <member name="M:AI.Vector.Min">
            <summary>
            Минимальное значение
            </summary>
        </member>
        <member name="M:AI.Vector.MinAbs">
            <summary>
            Минимальное значение по модулю
            </summary>
        </member>
        <member name="M:AI.Vector.Expend">
            <summary>
            Мат. ожидание
            </summary>
        </member>
        <member name="M:AI.Vector.Sum">
            <summary>
            Сумма
            </summary>
        </member>
        <member name="M:AI.Vector.Dispers">
            <summary>
            Дисперсия
            </summary>
        </member>
        <member name="M:AI.Vector.Std">
            <summary>
            СКО
            </summary>
        </member>
        <member name="M:AI.Vector.Norm">
            <summary>
            Норма вектора
            </summary>
        </member>
        <member name="M:AI.Vector.Normalise">
            <summary>
            Нормализация ско = 1, мат. ожидание 0
            </summary>
        </member>
        <member name="M:AI.Vector.Normalise(AI.Vector,AI.Vector)">
            <summary>
            Нормализация по ансамблю ско = 1, мат. ожидание 0
            </summary>
        </member>
        <member name="M:AI.Vector.TransformVectorX(AI.Vector,System.Func{System.Double,System.Double})">
            <summary>
            Преобразование вектора(Используется вектора аргументов)
            </summary>
            <param name="transformFunc">Функция преобразования, фунция от значения вектора аргументов</param>
            <param name="x">Вектор аргументов</param>
        </member>
        <member name="M:AI.Vector.SummWithCol(AI.Vector[],System.Int32)">
            <summary>
            Соединение векторов с перекрытием, путем суммирования в обл. перекрытия
            </summary>
            <param name="data">Вектора</param>
            <param name="col">Области перекрытия(коллизии)</param>
        </member>
        <member name="M:AI.Vector.OneHotPol(System.Int32,System.Int32)">
            <summary>
            Преобразование индекса(натуральное число) в вектор one-hot (однополярное)
            </summary>
            <param name="index">Индекс(натуральное число)</param>
            <param name="maxInd">Максимально возможное число</param>
            <returns>Вектор, где все нули, кроме позиции индекса</returns>
        </member>
        <member name="M:AI.Vector.OneHotBePol(System.Int32,System.Int32)">
            <summary>
            Преобразование индекса(натуральное число) в вектор one-hot (двуполярное)
            </summary>
            <param name="index">Индекс(натуральное число)</param>
            <param name="maxInd">Максимально возможное число</param>
            <returns>Вектор, где все -1, кроме позиции индекса</returns>
        </member>
        <member name="M:AI.Vector.Concatinate(AI.Vector[])">
            <summary>
            Конкатенация векторов
            </summary>
            <param name="vectors">Вектора</param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.Seq0(System.Double,System.Double)">
            <summary>
            Последовательность начиная с нуля
            </summary>
            <param name="step">Шаг</param>
            <param name="end">Конечное значение</param>
        </member>
        <member name="M:AI.Vector.Time0(System.Double,System.Double)">
            <summary>
            Массив отсчетов времени
            </summary>
            <param name="fd">Частота дискретизации</param>
            <param name="t">Время (сек)</param>
        </member>
        <member name="M:AI.Vector.GetWindows(AI.Vector,System.Int32,System.Int32)">
            <summary>
            Разбивка на окна
            </summary>
            <param name="inp">Вход</param>
            <param name="w">Длинна окна</param>
            <param name="step">шаг</param>
        </member>
        <member name="M:AI.Vector.GetWindowsWithFunc(System.Func{AI.Vector,AI.Vector},AI.Vector,System.Int32,System.Int32)">
            <summary>
            Разбивка на окна
            </summary>
            <param name="transformer">Функция для трансформации векторов</param>
            <param name="inp">Вход</param>
            <param name="w">Длинна окна</param>
            <param name="step">шаг</param>
        </member>
        <member name="M:AI.Vector.GetWindowsWithFuncVect(System.Func{AI.Vector,System.Double},AI.Vector,System.Int32,System.Int32)">
            <summary>
            Разбивка на окна
            </summary>
            <param name="transformer">Функция для трансформации векторов</param>
            <param name="inp">Вход</param>
            <param name="w">Длинна окна</param>
            <param name="step">шаг</param>
        </member>
        <member name="M:AI.Vector.ScaleData(AI.Vector[])">
            <summary>
            Масштабирование данных
            </summary>
            <param name="data">Данные</param>
        </member>
        <member name="M:AI.Vector.Mean(AI.Vector[])">
            <summary>
            Усреднение по ансамблю
            </summary>
            <param name="vectors">Ансамбль векторов</param>
            <returns>Средний вектор</returns>
        </member>
        <member name="M:AI.Vector.Std(AI.Vector[])">
            <summary>
            СКО по ансамблю
            </summary>
            <param name="vectors">Ансамбль векторов</param>
            <returns>Средний вектор</returns>
        </member>
        <member name="M:AI.Vector.LoadAsBinary(System.String)">
            <summary>
            Загрузка вектора из массива double
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.Vector.SaveAsBinary(System.String,AI.Vector)">
            <summary>
            Сохранение в массив double
            </summary>
            <param name="path">Путь до файла</param>
            <param name="vect">Вектор</param>
        </member>
        <member name="M:AI.Vector.ListToVector(System.Collections.Generic.List{System.Double})">
            <summary>
            Преобразование List в вектор
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.AddVector(AI.Vector,AI.Vector)">
            <summary>
            Вставляет отсчеты второго вектора, после отсчетов первого
            </summary>
            <param name="startVector">куда вставлять</param>
            <param name="addedVector">что вставлять</param>
            <returns>вектор размерности nach.N+dop.N</returns>
        </member>
        <member name="M:AI.Vector.GetCharVector(System.String)">
            <summary>
            Выдает вектор букв
            </summary>
            <param name="str">Строка</param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.IndexMax">
            <summary>
            Индекс элемента с максимальным значением
            </summary>
        </member>
        <member name="M:AI.Vector.IndexMaxAbs">
            <summary>
            Индекс элемента с максимальным абсолютным значением
            </summary>
        </member>
        <member name="M:AI.Vector.IndexMin">
            <summary>
            Индекс элемента с минимальным значением
            </summary>
        </member>
        <member name="M:AI.Vector.IndexMinAbs">
            <summary>
            Индекс элемента с минимальным абсолютным значением
            </summary>
        </member>
        <member name="M:AI.Vector.IndexMaxRegion(System.Int32,System.Int32)">
            <summary>
            Индекс элемента с максимальным значением
            </summary>
            <param name="a">Индекс начала региона(включительно)</param>
            <param name="b">Индекс конца региона(включительно)</param>
        </member>
        <member name="M:AI.Vector.IndexMaxAbsRegion(System.Int32,System.Int32)">
            <summary>
            Индекс элемента с максимальным абсолютным значением в регионе
            </summary>
            <param name="a">Индекс начала региона(включительно)</param>
            <param name="b">Индекс конца региона(включительно)</param>
        </member>
        <member name="M:AI.Vector.IndexMinRegion(System.Int32,System.Int32)">
            <summary>
            Индекс элемента с минимальным значением
            </summary>
            <param name="a">Индекс начала региона(включительно)</param>
            <param name="b">Индекс конца региона(включительно)</param>
        </member>
        <member name="M:AI.Vector.IndexMinAbsRegion(System.Int32,System.Int32)">
            <summary>
            Индекс элемента с минимальным абсолютным значением в регионе
            </summary>
            <param name="a">Индекс начала региона(включительно)</param>
            <param name="b">Индекс конца региона(включительно)</param>
        </member>
        <member name="M:AI.Vector.IndexValueEps(System.Double,System.Double,AI.Vector.TypeEps)">
            <summary>
            Индекс  первого вхождения значения удв. усл., что значение отличается от value не более чем на eps, и типом ограничений typeEps
            </summary>
            <param name="value">Значение</param>
            <param name="eps">Окрестность</param>
            <param name="typeEps">Тип ограничений</param>
        </member>
        <member name="M:AI.Vector.IndexesValueEps(System.Double,System.Double,AI.Vector.TypeEps)">
            <summary>
            Индексы  всех вхождений значений удв. усл., что значение отличается от value не более чем на eps, и типом ограничений typeEps
            </summary>
            <param name="value">Значение</param>
            <param name="eps">Окрестность</param>
            <param name="typeEps">Тип ограничений</param>
        </member>
        <member name="T:AI.Vector.TypeEps">
            <summary>
            тип поиска
            </summary>
        </member>
        <member name="F:AI.Vector.TypeEps.Up">
            <summary>
            Ограничение сверху от value до value+eps
            </summary>
        </member>
        <member name="F:AI.Vector.TypeEps.Down">
            <summary>
            Ограничение снизу от value-eps до value
            </summary>
        </member>
        <member name="F:AI.Vector.TypeEps.Neighborhood">
            <summary>
            Поиск в окрестности от value-eps до value+eps
            </summary>
        </member>
        <member name="T:AI.IntervalData">
            <summary>
            Данные интервалов
            </summary>
        </member>
        <member name="M:AI.IntervalData.#ctor">
            <summary>
            Данные интервалов
            </summary>
        </member>
        <member name="M:AI.IntervalData.Add(System.Int32,System.Int32)">
            <summary>
            Добавление интервала
            </summary>
            <param name="bI">Начало</param>
            <param name="eI">Конец</param>
        </member>
        <member name="M:AI.IntervalData.GetVects(AI.Vector)">
            <summary>
            Нарезка вектора по интервалам
            </summary>
            <param name="inputVector">Вектор входа</param>
        </member>
        <member name="M:AI.IntervalData.GetVect(System.Func{AI.Vector,System.Double},AI.Vector)">
            <summary>
            Нарезка вектора по интервалам + преобразование
            </summary>
            <param name="vect2doub">Функция для преобразования вектора в число</param>
            <param name="input">Вектор входа</param>
        </member>
        <member name="T:AI.Convolution">
            <summary>
            Класс реализующий свертку последовательностей
            </summary>
        </member>
        <member name="M:AI.Convolution.DirectConvolution(AI.Vector,AI.Vector)">
            <summary>
            Свертка
            </summary>
            <param name="signal">Сигнал</param>
            <param name="Ht">Импульсная характеристика</param>
        </member>
        <member name="M:AI.Convolution.ConvolutionNormal(AI.Vector,AI.Vector)">
            <summary>
            Свертка
            </summary>
            <param name="signal">Сигнал</param>
            <param name="Ht">Импульсная характеристика</param>
        </member>
        <member name="M:AI.Convolution.DirectConvolution(AI.Vector,AI.Vector,System.Double)">
            <summary>
            Свертка
            </summary>
            <param name="signal">Сигнал</param>
            <param name="ht">Импульсная характеристика</param>
            <param name="fd">Частота дискретизации</param>
        </member>
        <member name="M:AI.Convolution.StWithHt(AI.Vector,System.Int32)">
            <summary>
            Создание нового вектора отсчета сигнала
            </summary>
            <param name="st">Сигнал</param>
            <param name="htLen">Длинна импульсной характеристики</param>
            <returns>Новый вектор</returns>
        </member>
        <member name="M:AI.Convolution.DirectConvolution(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Прямая свертка комплексный вектор
            </summary>
        </member>
    </members>
</doc>
